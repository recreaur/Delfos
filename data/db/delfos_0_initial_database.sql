-- MySQL dump 10.13  Distrib 8.0.31, for Linux (x86_64)
--
-- Host: localhost    Database: aplicacionbd
-- ------------------------------------------------------
-- Server version	8.0.31

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!50503 SET NAMES utf8mb4 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `alumno`
--

DROP TABLE IF EXISTS `alumno`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alumno` (
  `cuasi` varchar(12) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `dni` varchar(9) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `nombre` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `apellidos` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `habilitado` tinyint(1) NOT NULL,
  PRIMARY KEY (`cuasi`),
  UNIQUE KEY `UNIQUE` (`dni`),
  CONSTRAINT `FK_alumno_1` FOREIGN KEY (`cuasi`) REFERENCES `usuario` (`cuasi`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alumno`
--

LOCK TABLES `alumno` WRITE;
/*!40000 ALTER TABLE `alumno` DISABLE KEYS */;
/*!40000 ALTER TABLE `alumno` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `alumno_ejercicio_practica`
--

DROP TABLE IF EXISTS `alumno_ejercicio_practica`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alumno_ejercicio_practica` (
  `alumno` varchar(12) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `ejerciciopractica` int unsigned NOT NULL,
  `respuesta` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `correcta` tinyint(1) NOT NULL,
  `fechahora` datetime NOT NULL,
  PRIMARY KEY (`alumno`,`ejerciciopractica`) USING BTREE,
  KEY `FK_alumno_ejercicio_practica_2` (`ejerciciopractica`),
  CONSTRAINT `FK_alumno_ejercicio_practica_1` FOREIGN KEY (`alumno`) REFERENCES `alumno` (`cuasi`),
  CONSTRAINT `FK_alumno_ejercicio_practica_2` FOREIGN KEY (`ejerciciopractica`) REFERENCES `ejercicio_practica` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alumno_ejercicio_practica`
--

LOCK TABLES `alumno_ejercicio_practica` WRITE;
/*!40000 ALTER TABLE `alumno_ejercicio_practica` DISABLE KEYS */;
/*!40000 ALTER TABLE `alumno_ejercicio_practica` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `alumno_ejercicio_repaso`
--

DROP TABLE IF EXISTS `alumno_ejercicio_repaso`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alumno_ejercicio_repaso` (
  `alumnorepaso` int NOT NULL,
  `ejercicio` int unsigned NOT NULL,
  `respuesta` longtext CHARACTER SET utf8mb3 COLLATE utf8mb3_bin,
  `correcta` tinyint(1) DEFAULT NULL,
  `numintentos` int DEFAULT NULL,
  `tiemporesolucion` int DEFAULT NULL,
  `fechaguardado` datetime DEFAULT NULL,
  PRIMARY KEY (`alumnorepaso`,`ejercicio`),
  KEY `fk_alumno_ejercicio_repaso_alumno_repaso1_idx` (`alumnorepaso`),
  KEY `fk_alumno_ejercicio_repaso_ejercicio1_idx` (`ejercicio`),
  CONSTRAINT `fk_alumno_ejercicio_repaso_alumno_repaso1` FOREIGN KEY (`alumnorepaso`) REFERENCES `alumno_repaso` (`id`),
  CONSTRAINT `fk_alumno_ejercicio_repaso_ejercicio1` FOREIGN KEY (`ejercicio`) REFERENCES `ejercicio` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alumno_ejercicio_repaso`
--

LOCK TABLES `alumno_ejercicio_repaso` WRITE;
/*!40000 ALTER TABLE `alumno_ejercicio_repaso` DISABLE KEYS */;
/*!40000 ALTER TABLE `alumno_ejercicio_repaso` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `alumno_practica`
--

DROP TABLE IF EXISTS `alumno_practica`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alumno_practica` (
  `alumno` varchar(12) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `practica` int unsigned NOT NULL,
  `fechahora` datetime NOT NULL,
  PRIMARY KEY (`alumno`,`practica`),
  KEY `FK_alumno_practica_2` (`practica`),
  CONSTRAINT `FK_alumno_practica_1` FOREIGN KEY (`alumno`) REFERENCES `alumno` (`cuasi`),
  CONSTRAINT `FK_alumno_practica_2` FOREIGN KEY (`practica`) REFERENCES `practica` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alumno_practica`
--

LOCK TABLES `alumno_practica` WRITE;
/*!40000 ALTER TABLE `alumno_practica` DISABLE KEYS */;
/*!40000 ALTER TABLE `alumno_practica` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `alumno_repaso`
--

DROP TABLE IF EXISTS `alumno_repaso`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `alumno_repaso` (
  `id` int NOT NULL AUTO_INCREMENT,
  `alumno` varchar(12) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `maxnumejercicio` int NOT NULL,
  `minnumsesion` int NOT NULL,
  `maxnumsesion` int NOT NULL,
  `esquemas` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `dificultad` varchar(100) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `fechainicio` datetime NOT NULL,
  `fechafin` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `fk_repaso_1_idx` (`alumno`),
  CONSTRAINT `fk_repaso_1` FOREIGN KEY (`alumno`) REFERENCES `alumno` (`cuasi`)
) ENGINE=InnoDB AUTO_INCREMENT=14085 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `alumno_repaso`
--

LOCK TABLES `alumno_repaso` WRITE;
/*!40000 ALTER TABLE `alumno_repaso` DISABLE KEYS */;
/*!40000 ALTER TABLE `alumno_repaso` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ejercicio`
--

DROP TABLE IF EXISTS `ejercicio`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ejercicio` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `esquema` int unsigned NOT NULL,
  `enunciado` longtext CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL,
  `query` longtext CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL,
  `dificultad` varchar(10) CHARACTER SET latin1 COLLATE latin1_swedish_ci NOT NULL,
  `numsesion` int unsigned NOT NULL,
  `visible` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `FK_ejercicio_1` (`esquema`),
  CONSTRAINT `FK_ejercicio_1` FOREIGN KEY (`esquema`) REFERENCES `esquema` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1213 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ejercicio`
--

LOCK TABLES `ejercicio` WRITE;
/*!40000 ALTER TABLE `ejercicio` DISABLE KEYS */;
INSERT INTO `ejercicio` VALUES (639,61,'Fecha de nacimiento y dirección de los empleados Juan Suárez (nombre y primer apellido)','select e.fechaNcto, e.direccion\nfrom empleado e\nwhere e.nombre = \'Juan\' and e.apellidos like \'Suárez%\';','facil',1,0),(640,61,'Halla la suma de los salarios de todos los empleados, salario máximo, salario mínimo y salario medio. Las columnas del resultado deben llamarse igual a como se indica: salario total, salario máximo, salario mínimo y salario medio.','select sum(salario) as \'salario total\', max(salario) as \'salario máximo\',\n       min(salario) as \'salario mínimo\',   avg(salario) as \'salario medio\'\nfrom empleado;','facil',1,0),(641,61,'Números de seguridad social sin repeticiones de todos los empleados que trabajan en los proyectos 1, 2 o 20. Llamar a la columna NSS.','select distinct t.empleado as NSS\nfrom trabaja t\nwhere t.proyecto in (\'1\',\'2\',\'20\');','facil',1,0),(642,61,'Apellidos y nombre de los empleados con jefe que viven en las calles Gran Vía, Graus o Alicante.\nObtener los datos en una columna llamada \"Nombre completo\" obtenida al unir apellidos y nombre separados por una coma y un espacio','select CONCAT(apellidos , \', \' , nombre)  as \'Nombre completo\'\nfrom empleado\nwhere jefe is not null\n      and (direccion like \'%Gran Vía%\' or direccion like \'%Graus%\' \n		   or direccion like \'%Alicante%\');','facil',1,0),(643,61,'De los empleados nacidos a partir de 1940, cuántos son, cuántos disponen de salario y cuántos salarios diferentes tienen.\nLlama a las columnas: \'empleados\', \'empleados con salario\' y \'salarios diferentes\'.','select count(*) as \'empleados\', count(salario) as \'empleados con salario\' , \n       count(distinct salario) as \'salarios diferentes\'\nfrom empleado e\nwhere year(e.fechancto)>=1940;','facil',1,0),(644,61,'Para el departamento cuyo director lleva más años en el puesto, nos interesa saber cuántos años son (diferencia entre el año actual y el inicial).\nLa fecha actual se obtiene mediante la función: current_date() y el año de una fecha se obtiene con year(la_fecha)\'.','select max(year(current_date())-year(fechaIniDir)) as años\nfrom departamento;','facil',1,0),(645,61,'Número de proyecto y número de seguridad social (NSS) de los empleados que trabajan al menos 4 horas a la semana (atributo horas) en un mismo proyecto, exceptuando los del proyecto 1.\nOrdénalos ascendentemente por proyecto y a iguales proyectos, descendentemente por NSS\'.','select proyecto as \'numero proyecto\', empleado as NSS\nfrom trabaja\nwhere horas>=4 and proyecto<>1\norder by proyecto asc, empleado desc;','facil',1,0),(646,61,'Calcula el salario medio de los empleados a los que, si se les aplicase un aumento del 2 por ciento, su salario se encontraría entre 2000 y 3000 euros mensuales. Llama a la columna \"salario medio\".','select avg(salario) as \'salario medio\'\nfrom empleado\nwhere salario*1.02 between 2000 and 3000;','facil',1,0),(647,61,'Direcciones en las que viven empleados cuyo número de portal (tomar los dos últimos caracteres de la dirección) sea múltiplo de 3. Ordénalas por número de portal.\nAyuda: puedes usar la función right.','select direccion\nfrom empleado\nwhere right(direccion,2) % 3 = 0\norder by right(direccion,2);','facil',1,0),(648,61,'Número de seguridad social del empleado y nombre de aquellos hijos o hijas de este  nacidos en los últimos 20000 días. La fecha actual se obtiene mediante la función: current_date(). La diferencia entre dos fechas se obtiene mediante datediff.','select empleado, nombre\nfrom familiar\nwhere datediff(current_date(), fechancto)<=20000 and parentesco in (\'hijo\',\'hija\');','facil',1,0),(649,61,'Dirección y salario del empleado cuyo primer apellido es \'Requena\', vive en la calle \'Alicante\' y es mujer.','select direccion, salario\nfrom empleado\nwhere apellidos like \'Requena%\'\nand direccion like \'Alicante%\'\nand sexo = \'M\';','facil',1,0),(650,61,'Fechas de nacimiento del empleado más joven, del más viejo y media de número de años entre el año de nacimiento respecto al año actual.\nLa fecha actual se obtiene mediante la función: current_date() y el año de una fecha se obtiene con	year(la_fecha)','select max(fechancto) as \'más joven\',\n       min(fechancto) as \'más viejo\',\n       avg(year(current_date())-year(fechancto)) as \'media años\'\nfrom empleado;','facil',1,0),(651,61,'Suma del número de horas totales dedicadas a los proyectos 1, 2 y 30. La columna se llamará \"Horas proyectos\".','select sum(horas) as \'Horas proyectos\'\nfrom trabaja\nwhere proyecto in (1,2,30);','facil',1,0),(652,61,'Número de localidades diferentes en las que existe algún departamento de la empresa y número de departamentos de la empresa con al menos una localidad.\nLas columnas del resultado deben llamarse: \"Número localidades\" y \"Número departamentos\".','select count(distinct localidad) as \'Número localidades\', count(distinct Depto) as \'Número departamentos\'\nfrom localidadesdepto;\n','facil',1,0),(653,61,'Para los empleados nacidos a partir del año 1955, mostrar su nombre, apellidos y la diferencia entre el año actual y el de nacimiento. Llamar \"EDAD\" a la última columna.\nMostrar el resultado ordenado por apellidos. La fecha actual se obtiene mediante la función: current_date() y el año de una fecha se obtiene con year(la_fecha)','SELECT e.nombre, e.apellidos, year(current_date())-year(e.fechaNcto) as EDAD\nFROM empleado e\nwhere e.fechaNcto >= \'1955-1-1\'\norder by apellidos;','facil',1,0),(654,61,'Apellidos y nombre, separados por una coma, de los empleados que no tengan jefe y de los que teniendo jefe viven en una calle que contenga la letra \"u\" o la \"o\". Obtener los datos en una columna llamada \"Nombre completo\".\nAyuda: si no funciona || puedes usar concat.','select CONCAT(apellidos , \', \' , nombre)  as \'Nombre completo\'\nfrom empleado\nwhere jefe is null\nOR (jefe is not null and (direccion like \'%u%\' or direccion like \'%o%\' ));','facil',1,0),(655,61,'NSS del empleado, el de su jefe, número del departamento en el que trabaja y salario anual (12 meses sin pagas extras), para aquellos empleados cuyo salario anual es superior a 18.000 € e inferior a 28.000 €. Ordénalos descendentemente por jefe y para un mismo jefe, ascendentemente por departamento.','select NSS, jefe, Depto, salario * 12\nfrom empleado\nwhere salario * 12 > 18000 and salario * 12 < 28000\norder by jefe desc , depto asc;','facil',1,0),(656,61,'Mostrar el nombre, apellidos, calle y número (dos últimos caracteres) de la dirección de los empleados que vivan en un portal cuyo número sea menor de 10. La dirección se mostrará en dos columnas, una llamada calle y otra número. Te pueden venir bien las funciones right, left, substring y length.','select nombre, apellidos, substring(direccion, 1, length(direccion)-2) as calle, \n       substring(direccion,-2,2) as \'numero\'\nfrom empleado\nwhere substring(direccion,-2,2) < 10;','facil',1,0),(657,61,'Para cada hijo o hija de empleado, calcular el número de años (resta de años) y el número de días que han pasado desde que nacieron. Ordenados por número de años.\nLas columnas se llamarán: \"Años hijos\" y \"Días\". Obtener el número de días entre dos fechas con datediff.','select year(current_date())- year(fechancto) as \'Años hijos\', \n       datediff(current_date(),fechancto) as Días\nfrom familiar\nwhere parentesco like \'hij_\'\norder by 1;','facil',1,0),(658,61,'Mostrar el listado de NSS de empleados, para aquellos que dedican al proyecto al menos 10 horas, exceptuando los proyectos 1 y 2.','select distinct empleado\nfrom trabaja\nwhere horas >= 10 and proyecto not in (1,2);','facil',1,0),(679,58,'Nombre, peso, color y nombre de proveedor de los artículos de color verde','SELECT nombr_artic, peso, color, nombr_prov\nFROM articulo a join\n     proveedor p on a.ident_prov=p.ident_prov\nWHERE  color = \'verde\';','facil',3,0),(680,58,'Nombre de los proveedores que suministran algun bolígrafo que figure en alguna venta de más de 1 €, junto al identificador del bolígrafo.','SELECT DISTINCT p.nombr_prov, a.ident_artic\nFROM  proveedor p join\n	  articulo a on p.ident_prov=a.ident_prov join\n	  venta v on a.ident_artic=v.ident_artic\nWHERE  a.nombr_artic like \'%bolígrafo%\' and v.prec_total>1;','facil',3,0),(681,58,'Ciudades donde haya tiendas que hayan vendido al menos una unidad del artículo con identificador 3 el año 2002','SELECT t.ciud\nFROM   tienda t join\n       venta v on t.ident_tiend = v.ident_tiend\nWHERE  v.ident_artic=\'3\' and v.cant_artics>0 and year(v.fech_vent)=2002;','facil',3,0),(682,58,'Para cada venta donde las unidades de artículo se hayan vendido a un precio superior a su precio de venta establecido (prec_vent) mostrar el nombre del artículo, la fecha de venta y el incremento que se ha aplicado sobre el precio de venta por unidad. Nota: en cada venta se venden cant_artics unidades y prec_total es lo que se ha cobrado por el conjunto de dichas unidades. El incremento que se aplica al precio de venta es la diferencia entre el precio real de venta y el precio de venta establecido','SELECT distinct a.nombr_artic, v.fech_vent as fech_vent,\n	   v.prec_total/v.cant_artics-a.prec_vent as precioVentaUnidad\nFROM  articulo a join\n	  venta v on a.ident_artic=v.ident_artic\nWHERE v.prec_total/v.cant_artics > a.prec_vent;','facil',3,0),(683,58,'Tipo de peso, nombre y precio de compra de los artículos, en función del contenido de la tabla clasif_peso (ya incluida en la BD, la puedes ver con select * from clasif_peso) para los artículos de color blanco, ordenados por tipo de peso','SELECT cp.tipo_peso, a.nombr_artic, a.prec_compr as prec_compr\nFROM  articulo a join\n	  clasif_peso cp on a.peso BETWEEN cp.peso_minim AND cp.peso_maxim\nWHERE a.color=\'blanco\'\nORDER BY cp.tipo_peso;','facil',3,0),(684,58,'Identificador de proveedor, nombre de artículo y precio de venta de los artículos cuyo proveedor suministra alguna lámpara (artículos que tienen la palabra lámpara en su nombre) con precio de venta superior a 17.5 €','SELECT distinct a.ident_prov, a.nombr_artic, a.prec_vent as prec_vent\nFROM   articulo a join\n	   articulo lamp on a.ident_prov = lamp.ident_prov\nWHERE  lamp.nombr_artic like \'%lámpara%\' and lamp.prec_vent>17.5;','facil',3,0),(685,58,'Por cada color de artículo con ventas en el año 2002, calcula el precio medio de compra de los artículos de ese color (considera solo precios de compra diferentes de artículos al hacer la media). ','SELECT a.color as coloracion, AVG(distinct a.prec_compr) as precio_medio_compra\n FROM   articulo a join\n       venta v on a.ident_artic=v.ident_artic\n\nwhere  year(v.fech_vent)=2002\nGROUP  BY a.color;','facil',3,0),(686,58,'Por cada proveedor de artículos, obtener el nombre del proveedor y el precio medio de venta establecido de sus artículos (prec_vent), excluyendo del cálculo aquellos artículos para los que se desconoce su peso. Ordena el resultado ascendentemente por precio medio de venta.','SELECT p.nombr_prov, AVG(a.prec_vent) as precio_medio_venta\nFROM   articulo a join\n	   proveedor p on a.ident_prov=p.ident_prov\nWHERE  a.peso is not null\nGROUP  BY p.ident_prov, p.nombr_prov\norder by 2;','facil',3,0),(687,58,'Tipo de peso de la tabla clasif_peso (ya incluida en la BD, la puedes ver haciendo select * from clasif_peso) junto al precio medio de compra de los artículos de ese tipo de peso pero considerando sólo artículos suministrados por los proveedores 1, 3 y 5. Ordena el resultado por el precio medio de compra.','SELECT   cp.tipo_peso, avg(a.prec_compr) as prec_med_compra\nFROM     articulo a join clasif_peso cp on\n		 a.peso BETWEEN cp.peso_minim AND cp.peso_maxim\nWHERE	 a.ident_prov in (1,3,5)\nGROUP BY cp.tipo_peso\norder by 2;','facil',3,0),(688,58,'Colores de artículo con más de dos proveedores que lo suministren, junto a la suma de precios de venta de los artículos de ese color','SELECT   color, sum(prec_vent) as PrecioTotalVenta\nFROM     articulo\nGROUP BY color\nHAVING   count(distinct ident_prov)>2;','facil',3,0),(689,58,'Identificadores de tiendas que hayan ingresado por ventas una cantidad superior a 50 €. Muestra junto al identificador las fechas de las ventas más antigua y más reciente','SELECT   ident_tiend,\n	     min(fech_vent) as mas_antigua,\n	     max(fech_vent) as mas_reciente\nFROM     venta\nGROUP BY ident_tiend\nHAVING   sum(prec_total)>50;','facil',3,0),(690,58,'Identificadores de cliente que hayan gastado en artículos una cantidad superior a 50 €. Muestra junto al identificador el número total de unidades compradas (de cant_artics) y el número de artículos diferentes adquiridos','SELECT   ident_client, sum(cant_artics) as unidades,  count(distinct ident_artic) as articulos\nFROM     venta\nGROUP BY ident_client\nHAVING   sum(prec_total)>50;','facil',3,0),(691,58,'Nombre de artículo y número de ventas donde figura el mismo, para aquellos artículos cuyo precio medio de venta por unidad (donde las unidades vendidas en la venta son cant_artics) supera la media entre el precio de compra y el de venta del artículo (prec_compr y prec_vent). Nota: Queremos artículos distintos y nombre de artículo no es clave.','SELECT   a.nombr_artic, count(*) as num_ventas\nFROM     articulo a join\n	venta v on a.ident_artic = v.ident_artic\nGROUP BY a.ident_artic, a.nombr_artic , a.prec_vent, a.prec_compr\nHAVING   avg(v.prec_total/v.cant_artics)>(a.prec_vent+a.prec_compr)/2;','facil',3,0),(692,58,'Nombre de artículo y suma total de dinero recaudado en sus ventas (tomado de prec_total) para aquellos artículos en los que se haya obtenido en las ventas un beneficio medio por unidad superior al 50% respecto a su precio de compra (prec_compr). Nota: el beneficio medio se obtiene como la diferencia entre el precio medio de venta por unidad (calculado a partir de prec_total y cant_artics) y el precio de compra.','SELECT   a.nombr_artic, sum(prec_total) as suma_ventas\nFROM     articulo a join\n		 venta v on a.ident_artic = v.ident_artic\nGROUP BY a.ident_artic, a.nombr_artic, a.prec_compr\nHAVING   avg(v.prec_total/v.cant_artics) - a.prec_compr > 0.5*a.prec_compr;','media',3,0),(693,58,'Nombre de artículo y precio máximo cobrado por una de sus unidades (tomándolo de prec_total y cant_artics) para aquellos artículos en los que se haya incrementado en las ventas su precio medio por unidad más de un 10% respecto a su precio de venta estipulado para el artículo (prec_vent)','SELECT   a.nombr_artic, max(v.prec_total/v.cant_artics) as precio_max_unidad\nFROM     articulo a join\n		 venta v on a.ident_artic = v.ident_artic\nGROUP BY a.ident_artic, a.nombr_artic, a.prec_vent\nHAVING   avg(v.prec_total/v.cant_artics) - a.prec_vent > 0.1*a.prec_vent;','media',3,0),(694,58,'Nombre y apellido de los clientes de la misma ciudad que el cliente apellidado Minguín, que adquirieron más de 5 unidades de artículo en el conjunto de las ventas realizadas a ellos (es decir, en la cantidad total de unidades de artículos adquirida por ellos). ','SELECT c.nombr_client, c.apell1\nFROM cliente c3 join\n	cliente c on c3.ciud=c.ciud join\n	venta v on c.ident_client = v.ident_client\nWHERE	c3.apell1=\'Minguín\'\nGROUP BY  c.ident_client, c.nombr_client, c.apell1\nHAVING	sum(v.cant_artics)>5;','media',3,0),(695,58,'Nombre de artículo, precios estipulados de compra y venta (prec_compr y prec_vent) para aquellos artículos  suministrados por el proveedor del artículo 10, que figuran en más de cuatro ventas. Nota: consideraremos aquí artículos iguales los que tengan el mismo nombre y precios de compra y venta.','SELECT a.nombr_artic, a.prec_compr, a.prec_vent as prec_vent\nFROM articulo a10 join\n	articulo a on a10.ident_prov=a.ident_prov join\n	venta v on a.ident_artic=v.ident_artic\nWHERE  a10.ident_artic=10\nGROUP BY  a.nombr_artic, a.prec_compr, a.prec_vent\nHAVING	count(*)>4;','media',3,0),(696,58,'Identificador de tienda, ciudad y nombre de gerente de aquellas tiendas situadas en la misma ciudad que la tienda 2 que obtuvieron un total de ventas inferior a 35 euros','SELECT t.ident_tiend, t.ciud, t.nombr_gerent\nFROM tienda t2 join\n     tienda t on t2.ciud=t.ciud join\n     venta v on t.ident_tiend=v.ident_tiend\nWHERE  t2.ident_tiend=2\nGROUP BY  t.ident_tiend, t.ciud, t.nombr_gerent\nHAVING	sum(v.prec_total)<35;','media',3,0),(697,58,'Identificador, nombre y precio de venta de los artículos vendidos a clientes que contengan una \"o\" como segunda letra de su apellido y cuyo precio de venta (prec_vent) es mayor que el precio de venta del artículo más barato (prec_vent) de color blanco.','# SELECT ident_artic, nombr_artic, prec_vent\n# FROM articulo\n# WHERE prec_vent > (SELECT MIN(prec_vent) FROM articulo WHERE color=\'blanco\');\n\nSELECT distinct A.ident_artic, nombr_artic, prec_vent\nFROM articulo as A join\nventa as V ON A.ident_artic = V.ident_artic join\ncliente as C on V.ident_client = C.ident_client\nWHERE apell1 like \'_o%\'\nAND prec_vent > (SELECT MIN(prec_vent) FROM articulo WHERE color=\'blanco\');\n\n# Emilio 3-5-2021 he añadido distinct a la solución','media',7,0),(698,58,'¿Qué cliente ha comprado más artículos diferentes, el cliente número uno o el número siete?','select ident_client\nfrom venta\nwhere ident_client in (\'1\',\'7\')\ngroup by ident_client\nhaving count(distinct ident_artic) >= all\n         (select count(distinct ident_artic)\n          from venta\n          where ident_client in (\'1\',\'7\')\n          group by ident_client\n         );','dificil',7,0),(699,58,'Calcula la diferencia en valor absoluto (abs(cantidad)) entre el valor total de lo vendido (prec_total) en las tiendas de Barcelona y lo vendido en las tiendas de Madrid.','select abs( \n	(select sum(vB.prec_total)\n     from  venta vB join\n      tienda tB on vB.ident_tiend = tB.ident_tiend\n      where tB.ciud=\'Barcelona\') -\n     (select sum(vM.prec_total)\n      from venta vM join\n                    tienda tM on vM.ident_tiend = tM.ident_tiend\n       where tM.ciud = \'Madrid\')\n	  ) as DifBarcelonaMadrid\n\n/* select abs(  sum(vB.prec_total) -\n             ( select sum(vM.prec_total)\n               from venta vM join\n                    tienda tM on vM.ident_tiend = tM.ident_tiend\n               where tM.ciud = \'Madrid\'\n             )\n	  ) as DifBarcelonaMadrid\nfrom  venta vB join\n      tienda tB on vB.ident_tiend = tB.ident_tiend\nwhere tB.ciud=\'Barcelona\';*/\n\n','dificil',7,0),(700,58,'Identificador de artículo (ident_artic) y número total de unidades de artículo vendidas (cant_artics) a clientes a los que se les ha vendido más de tres artículos distintos (ident_artic)','select v1.ident_artic, sum(v1.cant_artics) as \'total unidades vendidas\'\nfrom venta v1\nwhere v1.ident_client in\n      ( select v2.ident_client\n        from venta v2\n        group by v2.ident_client\n        having count(distinct v2.ident_artic)>3\n      )\ngroup by v1.ident_artic;','dificil',7,0),(701,58,'Identificador, nombre y precio de compra de los artículos con el mismo peso que el artículo número 12 y cuyo precio de compra (el de los artículos a obtener) es menor que el precio de compra _medio_ de todos los artículos de color blanco.','SELECT a.ident_artic, a.nombr_artic, a.prec_compr as prec_compr\nFROM articulo a join articulo a12 on a.peso=a12.peso\nWHERE a12.ident_artic=\'12\' and\n      a.prec_compr < (SELECT avg(prec_compr) FROM articulo WHERE color=\'blanco\');','media',7,0),(702,58,'Obtén el identificador del proveedor que menos cantidad de artículos (cant_artics) vendió en el mes de Marzo (month(fecha)=3)','select a.ident_prov\nfrom  articulo a join\n      venta v on a.ident_artic=v.ident_artic\nwhere MONTH(v.fech_vent) = 3\ngroup by a.ident_prov\nhaving sum(v.cant_artics) <= all\n      ( select sum(vM.cant_artics)\n        from articulo aM join\n             venta vM on aM.ident_artic = vM.ident_artic\n        where MONTH(vM.fech_vent)= 3\n        group by aM.ident_prov\n      );','dificil',7,0),(703,58,'Calcula la diferencia en valor absoluto (abs(cantidad)) entre el valor total de lo vendido (prec_total) a clientes de Pamplona y lo vendido a clientes de París.','select abs(\n            sum(vP.prec_total) -\n            ( select sum(vPr.prec_total)\n              from venta vPr join\n                   cliente cPr on vPr.ident_client=cPr.ident_client\n              where cPr.ciud=\'París\'\n            )\n          ) as diferencia\nfrom venta vP join\n     cliente cP on vP.ident_client=cP.ident_client\nwhere cP.ciud=\'Pamplona\';','dificil',7,0),(704,58,'Nombres de proveedores (nombr_prov) que aun no han vendido artículos a clientes de Lyon.','select p.nombr_prov\nfrom proveedor p\nwhere p.ident_prov not in\n      ( select a.ident_prov\n        from articulo a join\n             venta v on a.ident_artic=v.ident_artic join\n             cliente c on v.ident_client=c.ident_client\n        where c.ciud=\'Lyon\'\n      );\n	-- Este con minus/except NO sale porque hay dos Sanjita \n	-- diferentes, uno de ellos sin ventas. Pero estamos en\n	-- MySQL y no hay except/minus','dificil',7,0),(705,58,'Todas las columnas de ventas en las que el artículo vendido (ident_artic) sea uno de los artículos que se ha vendido al cliente número 7 (ident_client) en alguna ocasión. Sólo queremos obtener en el resultado las ventas efectuadas con anterioridad a la última venta realizada al cliente número 7.','select distinct v.*\nfrom venta v join \n     venta v7 on v.ident_artic=v7.ident_artic\nwhere v7.ident_client=\'7\' and\n      v.fech_vent < (select max(fech_vent) from venta where ident_client = \'7\');','media',7,0),(706,58,'Identificador del cliente o clientes a quienes se ha cobrado la mayor cantidad de dinero por el conjunto de sus ventas (total de prec_total) junto al coste medio por venta (prec_total) de ese/esos cliente/s','select v.ident_client, avg(v.prec_total) as media_por_venta\nfrom venta v\ngroup by v.ident_client\nhaving sum(v.prec_total) >= all\n       ( select sum(prec_total)\n         from venta\n         group by ident_client);','dificil',7,0),(707,58,'Identificador, nombre y apellido de cada cliente junto a la fecha (o fechas) en la que compró una mayor cantidad de unidades de artículo (cant_artics).  Mostrar todos los clientes, incluyendo aquellos que no han comprado nada (en tal caso, en fecha de compra se indicará \'Sin compras\').','select c.ident_client, c.nombr_client, c.apell1, coalesce(v.fech_vent, \'Sin compras\') as fech_vent\nfrom cliente c left join\n     venta v on c.ident_client=v.ident_client\ngroup by c.ident_client, c.nombr_client, c.apell1, v.fech_vent\nhaving sum(v.cant_artics) >= all\n         ( select sum(v2.cant_artics)\n           from venta v2\n           where v2.ident_client=c.ident_client -- CORRELACIÓN\n           group by v2.fech_vent\n         );','dificil',8,0),(710,58,'Identificador de artículo y nombre de su proveedor, de aquellos artículos de los que se han vendido más unidades (cant_artics) a un mismo cliente llamado Marcel Souris (puede haber varios clientes llamados así)','select v1.ident_artic, p.nombr_prov\nfrom   proveedor p join\n       articulo a  on p.ident_prov=a.ident_prov join\n       venta v1    on a.ident_artic=v1.ident_artic join\n       cliente c   on v1.ident_client=c.ident_client\nwhere  c.nombr_client=\'Marcel\' and c.apell1=\'Souris\'\ngroup by v1.ident_artic, p.nombr_prov, v1.ident_client, p.ident_prov\nhaving sum(v1.cant_artics)>= all\n       ( -- unidades vendidas al cliente v1.ident_client de cada artículo\n         select sum(v2.cant_artics)\n         from venta v2\n         where v2.ident_client=v1.ident_client -- CORRELACIÓN\n         group by v2.ident_artic\n       );','dificil',8,0),(711,58,'Identificador y gerente de las _tiendas_de_Barcelona_, que han vendido por un valor (suma de prec_total) superior a alguna de las _tiendas_del_resto_de_ciudades_ de entre aquellas que hayan tenido el menor número de operaciones de venta (filas en la tabla venta), pero que tengan al menos una venta (las tiendas_del_resto_de_ciudades).','select tf.ident_tiend, tf.nombr_gerent\nfrom  tienda tf join\n      venta vf on tf.ident_tiend=vf.ident_tiend\nwhere  tf.ciud in (\'Barcelona\')\ngroup by tf.ident_tiend, tf.nombr_gerent\nhaving sum(vf.prec_total) > any\n       ( -- dinero recaudado por tiendas de ciudades diferentes a Barcelona con\n         -- las mínimas operaciones de venta (pero con al menos una venta)\n         select sum(ve.prec_total)\n         from tienda te join\n              venta ve on te.ident_tiend=ve.ident_tiend\n         where te.ciud not in (\'Barcelona\')\n         group by te.ident_tiend\n         having count(*)<=all\n                ( -- núm de op. de venta en tiendas de ciudades diferentes a Barcelona (con al menos una venta)\n                  select count(*)\n                  from tienda te2 join\n                       venta ve2 on te2.ident_tiend=ve2.ident_tiend\n                  where te2.ciud not in (\'Barcelona\')\n                  group by te2.ident_tiend\n                )\n       );','dificil',8,0),(712,58,'Nombre de cada ciudad donde residan clientes, junto al identificador del cliente (o los clientes si son varios) a quien se le haya aplicado el mayor descuento en UNA venta individual respecto a todos los clientes de su ciudad (Descuento: prec_vent * cant_artics - prec_total). \nPuede haber alguna ciudad donde ninguno de los clientes que viven en ella haya hecho compras. Estas últimas ciudades no habrá que sacarlas en el resultado. Quitar repetidos si el cliente ha hecho varias compras.','select distinct c1.ciud, c1.ident_client\nfrom  cliente c1 join\n      venta v1 on c1.ident_client = v1.ident_client join\n      articulo a1 on v1.ident_artic=a1.ident_artic\nwhere (a1.prec_vent * v1.cant_artics - v1.prec_total) =\n      ( select max(a2.prec_vent * v2.cant_artics - v2.prec_total)\n        from  cliente c2 join\n              venta v2 on c2.ident_client=v2.ident_client join\n              articulo a2 on v2.ident_artic=a2.ident_artic\n        where c2.ciud=c1.ciud -- CORRELACIÓN\n      );\n/* ALTERNATIVA\nselect c.ciud, c.ident_client\nfrom cliente c\njoin venta v on v.ident_client=c.ident_client\njoin articulo a on v.ident_artic=a.ident_artic\nwhere (a.prec_vent * v.cant_artics - v.prec_total) >=all (\n	select (a1.prec_vent * v1.cant_artics - v1.prec_total)\n	from articulo a1\n	join venta v1 on a1.ident_artic=v1.ident_artic\n	join cliente c1 on v1.ident_client=c1.ident_client\n	where c1.ciud=c.ciud -- CORRELACION\n	)\n*/','dificil',8,0),(715,58,'identificador y ciudad de las tiendas que han vendido todos los artículos del proveedor 1','-- insert into venta values  (4,12,1, \'2002-01-09\', 1,26.93);\nselect t.ident_tiend, t.ciud\nfrom tienda t\nwhere not exists\n      ( select a.ident_artic\n        from articulo a\n        where a.ident_prov = 1\n              and a.ident_artic not in\n                    ( select v.ident_artic\n                      from venta v\n                      where v.ident_tiend = t.ident_tiend #correlación\n                    )\n       );\n-- delete from venta where ident_client=4 and ident_tiend=12 and ident_artic=1;','dificil',9,0),(716,58,'Identificador y ciudad de las tiendas que han vendido a todos los clientes que son de Lyon','select t.ident_tiend, t.ciud\nfrom tienda t\nwhere not exists\n     ( select c.ident_client\n       from cliente c\n       where c.ciud=\'Lyon\'\n             and c.ident_client not in\n                     ( select v.ident_client\n                       from venta v\n                       where v.ident_tiend = t.ident_tiend #correlación\n                     )\n     );','dificil',9,0),(717,58,'identificador y apellido de los clientes que han comprado todos los articulos del proveedor 1','-- insert into venta values  (6,12,1, \'2002-01-09\', 1,26.93);\nselect c.ident_client, c.apell1\nfrom cliente c\nwhere not exists\n      ( select a.ident_artic\n        from articulo a\n        where a.ident_prov=1\n              and a.ident_artic not in\n                     ( select v.ident_artic\n                       from venta v\n                       where v.ident_client = c.ident_client #correlación\n                     )\n      );\n-- delete from venta where ident_client=6 and ident_tiend=12 and ident_artic=1;','dificil',9,0),(718,58,'Para cada tienda de Lyon obtener el identificador de la tienda y el identificador y apellido del cliente o clientes que han gastado más dinero (prec_total) en ella.\nSi la tienda no tuviera ventas no debería aparecer en la solución','select t.ident_tiend, c.ident_client, c.apell1\nfrom cliente c join\n     venta v on c.ident_client=v.ident_client join\n     tienda t on v.ident_tiend=t.ident_tiend\nwhere t.ciud=\'Lyon\'\ngroup by t.ident_tiend, c.ident_client, c.apell1\nhaving sum(v.prec_total) >= all\n          ( select sum(v2.prec_total)\n            from venta v2\n            where v2.ident_tiend=t.ident_tiend #correlacion\n            group by v2.ident_client\n          );','dificil',9,0),(719,58,'Para cada artículo llamado pesacartas obtener su identificador y el identificador y ciudad de la tienda que ha vendido más unidades del mismo (cant_artics).','select a.ident_artic, t.ident_tiend, t.ciud\nfrom articulo a join\n     venta v on a.ident_artic=v.ident_artic join\n     tienda t on v.ident_tiend=t.ident_tiend\nwhere a.nombr_artic=\'pesacartas\'\ngroup by a.ident_artic, t.ident_tiend, t.ciud\nhaving sum(v.cant_artics) >= all\n         ( select sum(v2.cant_artics)\n           from venta v2\n           where v2.ident_artic=a.ident_artic #correlacion\n           group by v2.ident_tiend\n         );','dificil',9,0),(720,58,'Para cada artículo de nombre calculadora obtener su identificador y el identificador y apellido del cliente que ha pagado más dinero por una unidad del mismo (prec_total/cant_artics), junto al precio pagado.','select a.ident_artic, c.ident_client, c.apell1, max(v.prec_total/v.cant_artics)\nfrom articulo a join\n     venta v on a.ident_artic=v.ident_artic join\n     cliente c on v.ident_client=c.ident_client\nwhere a.nombr_artic=\'calculadora\'\ngroup by a.ident_artic, c.ident_client, c.apell1\nhaving max(v.prec_total/v.cant_artics) = \n        ( select max(v2.prec_total/v2.cant_artics)\n          from venta v2\n          where v2.ident_artic=a.ident_artic #correlacion\n        );','dificil',9,0),(761,76,'Título de los libros y nombre y dirección de la editorial para todos los libros del año 2008 (libro.año).','select	 l.titulo as titulo, l.editorial as editorial, e.direccion as dirección\nfrom	libro l join\neditorial e on l.editorial = e.nombre\nwhere l.año=2008;','facil',2,0),(762,76,'Título y año de los libros, junto al nombre y teléfono de su editorial para todos los libros de los años 2007 y 2008.','select	l.titulo as titulo,l.año, l.editorial,e.tfno\nfrom	libro l join\n        editorial e on l.editorial=e.nombre\nwhere l.año=2008 or l.año=2007;','facil',2,0),(763,76,'Apellidos y nombre de los autores  junto al título y precio de cada uno de sus libros con precio que han sido editados desde el año 2002 (libro.año) ordenados por apellidos y nombre de autor.','select a.apellidos, a.nombre,  \n       l.titulo as titulo,\n       l.precio\nfrom  libro l join\n      autorlibro al on l.id=al.libro join\n      autor a on al.autor=a.id\nwhere l.precio is not null and l.año>=2002\norder by 1,2;','facil',2,0),(764,76,'Para cada ejemplar con más de 870 páginas de la biblioteca con identificador 4, obtener el título y la fecha de compra junto al identificador de cada uno de sus autores (o sea que si el ejemplar tiene 3 autores se obtendrán 3 filas).','select l.titulo as titulo,\n       e.fecha_compra as \'fecha de compra\',\n       al.autor as autor\nfrom  libro l join\n      autorlibro al on l.id=al.libro join\n      ejemplar e on l.id=e.libro\nwhere e.biblioteca=4 and l.paginas>870 ;','facil',2,0),(765,76,'Para cada ejemplar en préstamo (sin fecha_devuelto) de más de 850 gr. de peso (libro.peso), obtener el título, identificador del lector que lo tiene, la fecha en la que lo tomó prestado y el identificador de biblioteca al que está asignado.','select l.titulo,\n       p.lector,\n       p.fecha_prestado,\n       e.biblioteca\nfrom libro l join\n     ejemplar e on l.id=e.libro join\n     prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar\nwhere p.fecha_devuelto is null and l.peso>850;','facil',2,0),(766,76,'Título y número de páginas del libro junto a las fechas de préstamo de alguno de sus ejemplares para libros editados a partir del 2008 (libro.año) y cuyo título termine por \"ta\" o \"to\" (usa menos de tres tablas).','select distinct l.titulo as título,\n       l.paginas as páginas,\n       p.fecha_prestado as fecha_prestado\nfrom libro l join\n     prestamo p on l.id=p.libro\nwhere l.año>=2008 and (l.titulo like \'%ta\' or l.titulo like \'%to\');','facil',2,0),(767,76,'Localidades con biblioteca distintas a Logroño, junto al nombre de la biblioteca y el teléfono de los lectores que residen en la misma localidad de la biblioteca (la localidad es la parte final de la dirección, tras coma y espacio). Mostrar los resultados ordenados por localidad y nombre de biblioteca.\nAyuda: para obtener la localidad a partir de la dirección puedes usar: substring(direccion, charindex(\',\', direccion)+2, len(direccion)),  donde charindex permite detectar la posición de la coma (u otro texto contenido en el primer argumento) en la direccion y len calcula la dirección de la cadena.','select substring(l.direccion, charindex(\',\', l.direccion)+2, len(l.direccion)) as localidad,\n       b.nombre as biblioteca,\n       l.tfno as teléfono\nfrom biblioteca b join\n     lector l on substring(b.direccion, charindex(\',\', b.direccion)+2, len(b.direccion))=\n                substring(l.direccion, charindex(\',\', l.direccion)+2, len(l.direccion))\nwhere b.direccion NOT LIKE \'%Logroño%\'\norder by 1, 2;\n\n\n-- En MySQL\n-- select substring(l.direccion, instr(l.direccion,\',\')+2, length(l.direccion)), substring(l.direccion, instr(l.direccion,\',\')+2, length(l.direccion)) as localidad,\n--       b.nombre as biblioteca,\n--       l.tfno as teléfono\n-- from biblioteca b join\n--     lector l on substring(b.direccion, instr(b.direccion,\',\')+2, length(b.direccion))=\n--                 substring(l.direccion, instr(l.direccion,\',\')+2, length(l.direccion))\n-- where b.direccion NOT LIKE \'%Logroño%\'\n-- order by 1, 2;','facil',2,0),(768,62,'Apellidos y nombre de aquellos lectores, inscritos a partir de 1990, que han sido para el mismo libro tanto primeros solicitantes de compra (primer_solicitante) como tomadores del libro en préstamo. Junto al nombre y apellido debería figurar el año de publicación del libro y su editorial. (Puedes usar year para obtener el año de una fecha)','select lc.apellidos,\n       lc.nombre,\n       l.año as \'año libro\',\n       l.editorial\nfrom libro l join\n     prestamo p on l.id=p.libro and l.primer_solicitante=p.lector join\n     lector lc on p.lector=lc.id\nwhere year(lc.fecha_inscripcion)>=\'1990\';','media',2,0),(769,76,'Para cada ejemplar actualmente en préstamo (sin fecha_devuelto) mostrar el título del libro, los apellidos del primer solicitante de compra (primer_solicitante) de ese libro, la fecha en la que se sacó de la biblioteca (fecha_prestado), el número de ejemplar de ese volúmen del libro y el telefono del lector que lo tiene.\nMostrar las filas ordenadas por fecha de préstamo.','select lb.titulo as titulo,\n       l2.apellidos as \"primer solicitante\",\n       p.fecha_prestado as \"fecha préstamo\",\n       p.ejemplar as ejem,\n       l1.tfno as \"tfno\"\nfrom lector l1 join\n     prestamo p on l1.id=p.lector join\n     libro lb on p.libro=lb.id join\n     lector l2 on lb.primer_solicitante=l2.id\nwhere p.fecha_devuelto is null\norder by p.fecha_prestado;','media',2,0),(770,76,'Emparejamientos posibles, sin repeticiones, entre nombres de lector que empiecen entre la J y la L y apellidos de lector cuyo primer apellido empiece entre la R y la T. Ordena el resultado por nombre y apellidos. Ayuda: puedes usar la función  left o la función substring.','select distinct a1.nombre as nombre,\n       a2.apellidos as apellidos\nfrom  lector a1 cross join\n      lector a2\nwhere left(a1.nombre,1) between \'J\' and \'L\' and \n      left(a2.apellidos,1) between \'R\' and \'T\'\norder by 1,2;','facil',2,0),(771,76,'Calcular el número de libros diferentes asignados a bibliotecas de Villamediana.\nLa localidad es la última palabra de la dirección tras coma y  espacio.','select	count(distinct libro) as \"Ejemplares de Villamediana\"\nfrom 	biblioteca b join\n        ejemplar e on b.id=e.biblioteca\nwhere b.direccion like \'%, Villamediana\';','facil',2,0),(772,76,'Calcular el número de libros (libros, y no ejemplares) diferentes que se prestaron alguna vez durante los cien días que siguen a su fecha de solicitud (incluida) junto al número medio de páginas (número entero truncando decimales) de sus ejemplares. Para truncar utiliza la función FLOOR.  La diferencia entre dos fechas se obtiene con la función datediff. (datediff en SQL Server tiene tres argumentos DATEDIFF (datepart , startdate , enddate), el primero indica en qué unidad quieres dicha diferencia. Poner d para obtener la diferencia en días.) ','select	count(distinct e.libro) as \"Prestados 100 días\", FLOOR(avg(paginas)) as \"Media páginas\"\nfrom   libro l join\n       ejemplar e on l.id=e.libro join\n       prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar \nwhere datediff(d, p.fecha_prestado, e.fecha_solicitud)<=100\n\n/* Otra forma: \nselect	count(distinct e.libro) as \"Prestados 100 días\", FLOOR(avg(paginas)) as \"Media páginas\"\nfrom  libro l join\n      ejemplar e on l.id=e.libro join\n      prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar and\n               p.fecha_prestado between e.fecha_solicitud and DATE_ADD(e.fecha_solicitud,interval 100 day);\nOtra forma:\nselect count(distinct p.libro) as \"Prestados 100 días\", \nfloor(avg(l.paginas))  as \"Media páginas\"\nfrom libro l\njoin prestamo p on p.libro = l.id\njoin ejemplar e on (e.libro, e.ejemplar) = (p.libro, p.ejemplar)\nwhere datediff(p.fecha_prestado, e.fecha_solicitud)+1<=100\n\n*/','facil',2,0),(773,76,'Calcular el peso conjunto de los ejemplares (con peso declarado) de la biblioteca \"Baroja\" prestados y sin devolver (sin fecha_devuelto).\nEn este ejercicio entenderemos que cada ejemplar puede tener a lo sumo un préstamo asociado sin fecha de devolución (aunque en la BD nada garantiza que esto vaya a ser así).','select	sum(l.peso) as \"Peso conjunto\"\nfrom libro l join\n     ejemplar e on l.id=e.libro join\n     prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar join\n     biblioteca b on e.biblioteca=b.id\nwhere p.fecha_devuelto is null and b.nombre=\'Baroja\';','facil',2,0),(774,76,'Apellidos y nombre de los lectores que hayan tomado en préstamo varias veces el  mismo ejemplar, junto al identificador del libro y el número de ejemplar. Ordena el resultado por los apellidos y los lectores que tengan los mismos apellidos, por el identificador del libro.','select distinct lc.apellidos, lc.nombre, p1.libro, p1.ejemplar\nfrom prestamo p1 join\n     prestamo p2 on p1.libro=p2.libro and p1.lector=p2.lector and\n                    p1.ejemplar=p2.ejemplar and \n                    p1.fecha_prestado<>p2.fecha_prestado join\n     lector lc on p1.lector=lc.id\norder by 1,3;','facil',2,0),(775,76,'Identificador de los lectores que tengan o hayan tenido en préstamo varias veces el mismo libro, junto a cada año de edición correspondiente a estos libros (sin repetición), para libros con precio superior a 70€.','select distinct p1.lector, l.año\nfrom  libro l join\n      prestamo p1 on l.id=p1.libro join\n      prestamo p2 on l.id=p2.libro and p1.lector=p2.lector and\n                      (p1.ejemplar<>p2.ejemplar or\n                       p1.fecha_prestado<>p2.fecha_prestado)\nwhere l.precio>70;','media',2,0),(776,76,'Identificador de los lectores que tengan actualmente en préstamo (sin fecha_devuelto) varios ejemplares tomados en préstamo el mismo día (fecha_prestado), junto a la fecha de préstamo. Ordena el resultado por el identificador del lector.','select distinct p1.lector, p1.fecha_prestado as fecha_prestado\nfrom prestamo p1 join\n     prestamo p2 on p1.lector=p2.lector and p1.fecha_prestado=p2.fecha_prestado and\n                    (p1.ejemplar<>p2.ejemplar or p1.libro<>p2.libro)\nwhere p1.fecha_devuelto is null and p2.fecha_devuelto is null\norder by 1;','media',2,0),(777,76,'Nombre y apellido de cada lector que se inscribió el mismo día que otro lector, junto al identificador de este segundo lector. Evitar la aparición de un lector consigo mismo.','select l1.nombre, l1.apellidos, l2.id\nfrom lector l1 join\n     lector l2 on l1.fecha_inscripcion=l2.fecha_inscripcion and l1.id<>l2.id;','facil',2,0),(778,76,'Titulo de los libros con ejemplares comprados el mismo día que alguno de los ejemplares de \"Mañana de las amapolas\", junto al número de libro y de ejemplar de este último libro (de \"Mañana de las amapolas\") y la fecha de compra. Descartar de la solución la compra de ejemplares de \"Mañana de las amapolas\" salvo que se compraran varios ejemplares el mismo día.','select l.titulo, ema.libro, ema.ejemplar, ema.fecha_compra\nfrom libro l join\n     ejemplar e on l.id=e.libro join\n     ejemplar ema on e.fecha_compra=ema.fecha_compra and\n                     (e.libro<>ema.libro or e.ejemplar<>ema.ejemplar) join\n     libro ma on ema.libro=ma.id\nwhere ma.titulo=\'Mañana de las amapolas\';','media',2,0),(813,64,'Créditos de la asignatura más pequeña en número de creditos y coste de la más cara.','SELECT MIN(CREDITOS) AS MENOR, MAX(COSTEBASICO) AS \'MÁS CARA\' \nFROM asignatura;','facil',1,1),(814,64,'Qué posibilidades de créditos de asignatura hay en asignaturas de la titulación 130110 junto al coste básico por hora de clase (1 crédito=10 horas de clase).','SELECT DISTINCT creditos, costebasico/(creditos*10) as \'€/hora\'\nFROM asignatura\nWHERE idtitulacion=130110;','facil',1,1),(815,64,'Mostrar el nombre de las asignaturas del primer cuatrimestre cuyo coste básico por crédito sea mayor o igual que 8€, y que tengan valores tanto para la titulación como para el profesor (es decir que titulación y profesor sean distintos a nulo).','select nombre\nfrom asignatura\nwhere cuatrimestre =\'1\'\nand IdProfesor is not null\nand IdTitulacion is not null\nand (CosteBasico/Creditos)>=8;','facil',1,1),(816,64,'Nombre de cada asignatura de la BD, exceptuando las de la titulación 160000, junto al número de horas de clase (1 crédito ECTS = 10 horas clase) y al número de horas total a dedicar por el estudiante (1 crédito ECTS = 25 horas de dedicación).','SELECT nombre, creditos*10 as \'horas clase\', creditos*25 AS \'horas dedicación\'\nFROM asignatura\nWHERE idtitulacion<>160000;','facil',1,1),(817,64,'Listado de los apellidos y nombre (separados entre sí por una coma y un espacio) de las personas y sus direcciones (en una columna), ordenado por apellido y luego por nombre. Llama a la columna del nombre “Nombre completo” y a la de direcciones “Dirección”.\nNota: Utiliza la función concat.','SELECT concat(Apellido, \', \', Nombre) AS \'Nombre completo\',\n       concat(DIRECCIONCALLE, \' \', DIRECCIONNUM, \' \', ciudad) AS Dirección\nFROM persona\nORDER BY apellido, nombre;','facil',1,1),(818,64,'Listado que muestre el nombre de las asignaturas y su coste por crédito ordenadas ascendentemente por su coste por crédito, y a igual coste por crédito ordenadas descendentemente por nombre.','SELECT nombre, costebasico/creditos AS \'Coste por crédito\'\nFROM asignatura\nORDER BY costebasico/creditos asc, nombre desc;','facil',1,1),(819,64,'Nombre, apellido y fecha de nacimiento de las personas residentes en Logroño que no nacieran ni en el año 78 ni en el mes de mayo.','select nombre, apellido, fechaNacimiento\nfrom persona\nwhere ciudad = \'Logroño\' and\n      not fechaNacimiento like \'%1978%\' and not fechaNacimiento like \'%-05-%\';','facil',1,1),(820,64,'Nombre e identificador de titulación de las asignaturas cuyo coste básico oscila entre 40 y 60 euros inclusive, que estén asociadas a alguna titulación.','select nombre, idtitulacion\nfrom asignatura\nwhere costeBasico between 40 and 60 and idTitulacion is not null;','facil',1,1),(821,64,'Identificadores de las titulaciones con alguna asignatura de primer curso en las que dan clase profesores con alguno de los siguientes códigos de profesor: P204, P304, P117 o P101.','select distinct idTitulacion\nfrom asignatura\nwhere curso=1 and idProfesor in (\'P204\', \'P304\', \'P117\', \'P101\') and\n      idTitulacion is not null;','facil',1,1),(822,64,'Listado de personas, de las cuales se mostrará el nombre y apellido, cuyo apellido no contenga una \"i\" o \"í\" a partir del 4 caracter.','select nombre, apellido\nfrom persona\nwhere not apellido LIKE \'___%i%\' and not apellido LIKE \'___%í%\';','facil',1,1),(824,64,'Listado de alumnos que son mayores que algún profesor, indicando el nombre y apellido de cada alumno y cada profesor.','select pa.nombre as \'nombre alumno\', pa.apellido as \'apellido alumno\', pp.nombre as \'nombre profesor\', pp.apellido as \'apellido profesor\'\nfrom  	 alumno a join\n	 persona pa on a.dni=pa.dni join\n	 persona pp on pa.FechaNacimiento < pp.FechaNacimiento join\n	 profesor p on p.dni=pp.dni;','facil',2,1),(825,64,'Id de las titulaciones donde se han matriculado (en alguna de sus asignaturas) alumnos varones llamados Luis. Elimina repeticiones sólo si es necesario.','select distinct a.idtitulacion\nfrom asignatura a join\n     alumnoasignatura aa on a.idasignatura=aa.idasignatura join\n     alumno al on aa.idalumno=al.idalumno join\n     persona p on al.dni=p.dni\nwhere p.nombre=\'Luis\' and p.varon;','facil',2,1),(826,64,'¿Cuál sería el coste global de cursar la titulación de Matemáticas si el coste de cada asignatura fuera incrementado un 7%?','select sum(a.costebasico*1.07) as \'coste global\'\nfrom titulacion as t join\n     asignatura as a on t.idtitulacion=a.idtitulacion\nwhere t.nombre=\'Matemáticas\';','facil',2,1),(827,64,'DNI, nombre y apellido de los profesores que son al mismo tiempo alumnos junto al nombre de cada una de las asignaturas que cursan. El resultado deberá estar ordenado por apellido y nombre.','select pf.dni, p.nombre as nombre, p.apellido as apellido,\n       a.nombre as asignatura\nfrom persona p join\n     profesor as pf on  p.dni=pf.dni join\n     alumno as al on pf.dni=al.dni join\n     alumnoasignatura as aa on al.idalumno=aa.idalumno join\n     asignatura as a on aa.idasignatura=a.idasignatura\nwhere pf.dni=al.dni\norder by p.apellido, p.nombre;','facil',2,1),(828,64,'Nombre de las titulaciones en las que imparte docencia cada profesor, junto con el nombre y apellido de cada profesor. Nombra a las columnas como en el resultado siguiente.','select distinct t.nombre as titulacion,\n                p.nombre as nombre,\n                p.apellido as apellido\nfrom titulacion t join\n     asignatura a on t.idtitulacion=a.idtitulacion join\n     profesor pr on a.idprofesor=pr.idprofesor join\n     persona p on pr.dni=p.dni;','facil',2,1),(829,64,'Identificador y nombre de las asignaturas con más créditos que la asignatura de libre elección (sin titulación) “Seguridad Vial”.','select a.nombre\nfrom asignatura a join\n     asignatura sv on a.creditos>sv.creditos\nwhere sv.nombre=\'Seguridad Vial\' and sv.idtitulacion is null;','facil',2,1),(830,64,'Alumnos que son mayores que alguno de sus profesores (que sea profesor del alumno en alguna de las asignaturas en la que está matriculado), indicando el nombre y apellido tanto del alumno como del profesor que cumplen lo anterior.','select pa.nombre as \'nom alum\',\n	   pa.apellido as \'apell alum\',\n	   pp.nombre as \'nom prof\',\n      pp.apellido as \'apell prof\'\nfrom persona pa join\n	 alumno al on pa.dni=al.dni join\n	 alumnoasignatura aa on al.idalumno=aa.idalumno join\n	 asignatura a on aa.idasignatura=a.idasignatura join\n     profesor pr on a.idprofesor=pr.idprofesor join\n	 persona pp on pr.dni=pp.dni and pa.fechanacimiento < pp.fechanacimiento;','media',2,1),(831,64,'Identificador, apellido y nombre de los alumnos matriculados en las asignaturas 150212 y 130113 (en ambas a la vez).','select a.idalumno, p.apellido as apellido, p.nombre as nombre\nfrom alumno a join\n     persona p on a.dni=p.dni join\n     alumnoasignatura aa1 on a.idalumno=aa1.idalumno join\n     alumnoasignatura aa2 on a.idalumno=aa2.idalumno\nwhere aa1.idasignatura=\'150212\' and aa2.idasignatura=\'130113\'; \n/* select aa.idalumno\nfrom alumnoasignatura aa\nwhere aa.idasignatura in (150212,130113)\ngroup by aa.idalumno\nhaving count(*)=2;*/','media',2,1),(832,64,'Nombre de las titulaciones que tengan al menos un alumno mayor de 35 años (el 1 de enero).','SELECT distinct t.nombre\nfrom titulacion as t join\n     asignatura as a on t.idtitulacion=a.idtitulacion join\n     alumnoasignatura aa on a.idasignatura=aa.idasignatura join\n     alumno as al on aa.idalumno=al.idalumno join\n     persona as p on al.dni=p.dni\nwhere year(current_date())-year(p.fechanacimiento)>35;','media',2,1),(833,64,'Listado de ciudades donde vive tanto algún profesor como algún alumno.','select distinct pp.ciudad\nfrom persona pp join profesor pf on pp.dni=pf.dni join\n     persona pa on pp.ciudad=pa.ciudad join alumno a on pa.dni=a.dni;','facil',2,1),(834,64,'Identificadores de las asignaturas en las que están matriculados alumnos que a su vez son profesores.','select aa.idasignatura\nfrom alumnoasignatura aa join\n     alumno a on aa.idalumno = a.idalumno join\n     profesor p on a.dni=p.dni;','facil',2,1),(835,64,'DNI, apellido y nombre de los alumnos de la titulación de matemáticas que tengan el mismo nombre de pila que algun profesor.','select distinct p.dni, p.apellido as apellido, p.nombre as nombre\nfrom persona as p join\n    alumno as al on p.dni=al.dni join\n    alumnoasignatura as aa on al.idalumno=aa.idalumno join\n    asignatura as asg on aa.idasignatura=asg.idasignatura join\n    titulacion as t on asg.idtitulacion=t.idtitulacion join\n    persona ppf on ppf.nombre=p.nombre join\n    profesor pf on pf.dni=ppf.dni;','media',2,1),(837,64,'Cuál es la recaudación por matrícula de cada titulación (coste básico pagado por los alumnos por las asignaturas en las que están matriculados). Indicar el nombre de la titulación y el dinero recaudado. Obtener sólo titulaciones con alumnos matriculados.','select t.nombre, sum(costebasico)\nfrom   titulacion t join\n       asignatura a on t.idtitulacion=a.idtitulacion join\n       alumnoasignatura aa on a.idasignatura=aa.idasignatura\ngroup by t.nombre;','facil',3,1),(838,64,'Identificador de cada titulación junto al coste básico medio de sus asignaturas para aquellas titulaciones cuyo coste total de matrícula (suma de costes básicos de todas sus asignaturas) sea mayor de 100 €.','select a.idtitulacion, avg(a.costebasico) as \'coste medio asig\'\nfrom asignatura a\ngroup by a.idtitulacion\nhaving sum(a.costebasico)>100;','facil',3,1),(839,64,'Listado de alumnos cuya matrícula haya supuesto un coste superior a 100 €.','select a.idalumno, a.dni\nfrom alumno a join\n     alumnoasignatura aa on a.idalumno=aa.idalumno join\n     asignatura asg on aa.idasignatura=asg.idasignatura\ngroup by a.idalumno, a.dni\nhaving sum(costebasico)>100;','media',3,1),(840,64,'Nombre de las titulaciones por orden descendente en función del total de créditos necesarios para cursarlas. ¿Cambiaría algo si el nombre de la titulación no fuese clave?','select t.nombre as titulación\nfrom titulacion t join\n	   asignatura a on t.idtitulacion=a.idtitulacion\ngroup by t.nombre\norder by sum(a.creditos) desc;','facil',3,1),(841,64,'Edad del alumno más viejo de cada asignatura.','select year(current_date())-year(min(p.fechanacimiento)) \'Edad alumno más viejo\'\nfrom persona p join\n     alumno a on p.dni=a.dni join\n     alumnoasignatura aa on a.idalumno=aa.idalumno\ngroup by aa.idasignatura;','facil',3,1),(842,64,'Cada nueva matrícula de una asignatura (atributo NumeroMatrícula) supone añadir al pago un 10% de aumento sobre su coste básico. Mostrar el identificador de cada alumno junto a lo que ha pagado este en concepto de matrículas.','select aa.idalumno,\n       sum(a.costebasico+0.10*a.costebasico*(aa.numeromatricula-1)) as matriculas\nfrom alumnoasignatura aa join\n     asignatura a on aa.idasignatura=a.idasignatura\ngroup by aa.idalumno;','facil',3,1),(844,64,'Nombre de las asignaturas de la titulación 130110 cuyo coste básico sea mayor o igual el coste básico promedio por asignatura en dicha titulación.','select a.nombre\nfrom asignatura a\nwhere a.idtitulacion = \'130110\' and\n      a.costebasico >= (select avg(a1.costebasico)\n                        from asignatura a1\n                        where a1.idtitulacion = \'130110\' );','media',7,1),(845,64,'Listado de asignaturas que pertenecen al mismo cuatrimestre que la asignatura (o asignatruras) de menor coste y que tienen unos créditos superiores a la media de las asignaturas.','select a.*\nfrom asignatura a\nwhere a.cuatrimestre =\n      ( select a1.cuatrimestre\n        from asignatura a1\n        where a1.costebasico in\n              ( select min(costebasico)\n                from asignatura\n              )\n      ) and\n      a.creditos >\n      ( select avg(creditos)\n        from asignatura\n      );','media',7,1),(846,64,'Listado de personas que viven en alguna de las ciudades donde viven más personas de la BD.','select p.nombre, p.apellido\nfrom persona p\nwhere p.ciudad in (select p1.ciudad\n                    from persona p1\n                    group by p1.ciudad\n                    having count(*) >= ALL\n                            (select count(*)\n                             from persona p1\n                             group by p1.ciudad\n                             )\n                  );','dificil',7,1),(847,64,'Listado de ciudades en las que vive algún profesor pero ningún alumno. (Nota: MySQL no admite EXCEPT.)','select distinct p.ciudad\nfrom persona p join\n     profesor pf on p.dni=pf.dni\nwhere p.ciudad not in\n      (select pa.ciudad\n       from persona pa join\n            alumno a on pa.dni=a.dni\n      );','media',7,1),(848,64,'Listar los ids de los alumnos para los que se cumpla que la suma de créditos de las asignaturas en las que está matriculado sea superior a la suma de créditos de todas las asignaturas de Empresariales.','select aa.idalumno\nfrom alumnoasignatura aa join\n     asignatura a on aa.idasignatura=a.idasignatura\ngroup by aa.idalumno\nhaving sum(creditos)>\n       ( select sum(a1.creditos)\n         from asignatura a1 join\n              titulacion t1 on a1.idtitulacion=t1.idtitulacion\n         where t1.nombre=\'empresariales\'\n       );','dificil',7,1),(849,64,'Nombre de las titulaciones donde sus estudiantes usan un mayor número de convocatoria promedio (número de matrícula).','select t.nombre\nfrom titulacion t join\n     asignatura a on t.idtitulacion=a.idtitulacion join\n     alumnoasignatura aa on a.idasignatura=aa.idasignatura\ngroup by t.nombre\nhaving avg(aa.numeromatricula) >=all\n       (select avg(aa.numeromatricula)\n        from titulacion t join\n             asignatura a on t.idtitulacion=a.idtitulacion join\n             alumnoasignatura aa on a.idasignatura=aa.idasignatura\n        group by t.nombre\n       );','dificil',7,1),(851,64,'Para cada asignatura con más de dos matriculados encuentra el número de alumnos matriculados en ella de más de 25 años.','select count(*) as \'mayores de 25\'\nfrom alumnoasignatura as aa join\n     alumno as a on aa.idalumno=a.idalumno join\n     persona as p on a.dni=p.dni\nwhere year(current_date())-year(p.fechanacimiento)>25\ngroup by aa.idasignatura\nhaving 2 <\n       ( select count(*)\n         from alumnoasignatura aa1\n         where aa1.idasignatura=aa.idasignatura\n       );','dificil',8,1),(852,64,'Identificador del alumno (o alumnos) más viejo de cada titulación.','select a.idalumno\nfrom persona p join\n     alumno a on p.dni=a.dni join\n     alumnoasignatura aa on a.idalumno=aa.idalumno join\n     asignatura asg on aa.idasignatura=asg.idasignatura\nwhere p.fechanacimiento in\n      ( select min(p1.fechanacimiento)\n        from asignatura asg1 join\n             alumnoasignatura aa1 on asg1.idasignatura=aa1.idasignatura join\n             alumno a1 on a1.idalumno=aa1.idalumno join\n             persona p1 on a1.dni=p1.dni\n        where asg1.idtitulacion=asg.idtitulacion #correlacion\n      );','dificil',8,1),(853,64,'Mostrar el ID de los alumnos matriculados en todas las asignaturas de primer curso de Empresariales.','select a.idalumno\nfrom alumno a\nwhere not exists(\n       select a.idasignatura\n       from asignatura a join\n           titulacion t on a.idtitulacion = t.idtitulacion\n       where t.nombre = \'Empresariales\' and a.curso = 1 and\n             a.idasignatura not in\n              (select aa.idasignatura\n               from alumnoasignatura aa\n               where aa.idalumno=a.idalumno #correlacion\n              )\n); \n\n/* select al.idalumno\nfrom alumno al join\n     alumnoasignatura aa on al.idalumno = aa.idalumno join\n     asignatura a on aa.idasignatura = a.idasignatura join\n     titulacion t on a.idtitulacion=t.idtitulacion\nwhere a.curso = 1 and t.nombre = \'Empresariales\'\ngroup by al.idalumno\nhaving count(*) =\n       ( select count(*)\n         from asignatura a1E join\n              titulacion tE on a1E.idtitulacion=tE.idtitulacion\n         where a1E.curso = 1 and tE.nombre = \'Empresariales\'\n       ); \n*/\n\n/*select a.idalumno\nfrom alumno a\nwhere not exists(\n       select a.idasignatura\n       from asignatura a join\n           titulacion t on a.idtitulacion = t.idtitulacion\n       where t.nombre = \'Empresariales\' and a.curso = 1\n       minus\n       select aa.idasignatura\n       from alumnoasignatura aa\n       where aa.idalumno=a.idalumno #correlacion\n);\n*/\n','dificil',8,1),(854,64,'DNI de cada alumna de nombre Malena y apellido Folgado y nombre de la titulación donde realizó más matriculas en sus asignaturas. La 1ª vez que se matricula de una asignatura NumeroMatrícula vale 1, la 2ª vale 2, etc.','select P.dni, T.nombre\nfrom persona P join\n     alumno A on P.dni= A.dni join\n     alumnoasignatura AA on A.idAlumno=AA.idAlumno join\n     asignatura Asg on AA.idAsignatura=Asg.idAsignatura join\n     titulacion T on Asg.idTitulacion=T.idTitulacion\nwhere P.nombre=\'Malena\' and P.apellido=\'Folgado\'\ngroup by P.dni, T.nombre, A.idAlumno\nhaving sum(AA.numeroMatricula) >= all\n            (select sum(AA2.numeroMatricula)\n             from alumnoasignatura AA2 join\n                     asignatura Asg2 on AA2.idAsignatura=Asg2.idAsignatura\n             where AA2.idAlumno=A.idAlumno\n             group by Asg2.idTitulacion\n            ); \n			\n-- Atencion el A.idAlumno es necesario en el group by ya que \n-- está en la subconsulta en un having','dificil',8,1),(855,64,'Nombre de la titulación con más alumnos matriculados por primera vez (sólo tienen asignaturas con númeroMatrícula=1), considerando sólo las titulaciones de matemáticas y empresariales.','select t.nombre\nfrom titulacion t join\n     asignatura a on t.idtitulacion=a.idtitulacion join\n     alumnoasignatura aa on a.idasignatura=aa.idasignatura\nwhere t.nombre in (\'matemáticas\',\'empresariales\') and\n      aa.numeromatricula=1 and aa.idalumno not in\n      ( select No_m1.idalumno\n        from alumnoasignatura as No_m1\n        where No_m1.numeromatricula>1\n      )\ngroup by t.nombre\nhaving count(*)>=any\n       ( select count(*)\n         from titulacion t join\n              asignatura a on t.idtitulacion=a.idtitulacion join\n              alumnoasignatura aa on a.idasignatura=aa.idasignatura\n         where t.nombre in (\'matemáticas\',\'empresariales\') and\n               aa.numeromatricula=1 and aa.idalumno not in\n               ( select No_m1.idalumno\n                 from alumnoasignatura as No_m1\n                 where No_m1.numeromatricula>1\n               )\n      );','dificil',8,1),(856,64,'Listado de alumnos (nombre y apellido) matriculados en todas las asignaturas de matemáticas.','select p.nombre, p.apellido\nfrom alumno al join\n     persona p on al.dni=p.dni\nwhere not exists\n      ( select a.idasignatura\n        from asignatura a join\n             titulacion t on a.idtitulacion = t.idtitulacion\n        where t.nombre=\'matematicas\' and\n              a.idasignatura not in\n              ( select aa.idasignatura\n                from alumnoasignatura aa\n                where aa.idalumno=al.idalumno #correlacion\n              )\n       );','dificil',8,1),(860,64,'Identificadores y nombre de titulación y de asignatura de aquellas asignaturas en las que no se ha matriculado nadie. Ten en cuenta que algunas asignaturas no tienen titulación y también deberían salir.','select t.idtitulacion,\n       t.nombre as \'titulacion\',\n       a.idasignatura,\n       a.nombre as \'asignatura\'\nfrom asignatura a  left join\n     titulacion t on a.idtitulacion=t.idtitulacion left join\n	 alumnoasignatura aa on a.idasignatura=aa.idasignatura\nwhere aa.idalumno is null','media',4,1),(861,77,'DNI, nombre y apellido de los alumnos que no se hayan matriculado en asignaturas de la titulación de matemáticas.','select p.dni, p.nombre,\n       p.apellido\nfrom persona p join\n     alumno a on p.dni=a.dni\nexcept\nselect p.dni, p.nombre, p.apellido\nfrom persona p join\n     alumno a on p.dni=a.dni join\n     alumnoasignatura aa on a.idalumno=aa.idalumno join\n     asignatura asg on aa.idasignatura=asg.idasignatura join\n     titulacion t on asg.idtitulacion=t.idtitulacion\nwhere t.nombre=\'matemáticas\';','media',4,1),(862,77,'Nombre y apellido de las personas relacionadas con la asignatura ‘Seguridad Vial’, bien por estar matriculadas, o por ser profesores de la misma.','select p.nombre, p.apellido\nfrom persona p join\n     alumno a on p.dni=a.dni join\n     alumnoasignatura aa on a.idalumno=aa.idalumno join\n     asignatura asg on aa.idasignatura=asg.idasignatura\nwhere asg.nombre=\'seguridad vial\'\nunion\nselect p.nombre, p.apellido\nfrom persona p join\n     profesor pf on p.dni=pf.dni join\n     asignatura asg on pf.idprofesor=asg.idprofesor\nwhere asg.nombre=\'seguridad vial\';','media',4,1),(863,77,'Nombre de cada titulación junto al coste básico medio y créditos medios de sus asignaturas. Incluye la información de las asignaturas sin titulación bajo la titulación inexistente llamada \"Asignaturas de campus\".\nNota: Para obtener 1 decimal, convertir el dato a float antes de hacer su media: convert(float,costebasico).','select case \n         when t.nombre is null then \'Asignaturas de campus\' \n		 else  t.nombre\n       end as nombre,\n       avg(convert(float,costebasico)) as [coste medio],\n       avg(convert(float,creditos)) as [creditos medios]\nfrom titulacion t right join\n     asignatura a on t.idtitulacion=a.idtitulacion\ngroup by t.nombre;','media',4,1),(864,77,'Identificador y nombre de las titulaciones que cumplen alguna de estas tres condiciones: (1) tiene alguna asignatura de más de 6 créditos (2) tiene algún profesor de Logroño (3) tiene más de un alumno en sus asignaturas. Una titulación deberá aparecer repetida en el resultado tantas veces como condiciones cumplan (una, dos o tres veces). Además, habrá una tercera columna con la etiqueta \'6 créditos\', \'Logroño\' o \'varios alumnos\' según la condición que cumplan. Ordénalas por identificador de titulación.','select distinct t.idtitulacion, t.nombre, \'6 créditos\' as etiqueta\nfrom titulacion t join\n     asignatura a on t.idtitulacion=a.idtitulacion\nwhere a.creditos>6\nunion all\nselect distinct t.idtitulacion, t.nombre, \'Logroño\' \nfrom titulacion t join\n     asignatura a on t.idtitulacion=a.idtitulacion join\n     profesor pf on a.idprofesor=pf.idprofesor join\n     persona p on pf.dni=p.dni\nwhere p.ciudad=\'Logroño\' \nunion all\nselect distinct t.idtitulacion, t.nombre, \'varios alumnos\'  \nfrom titulacion t join\n     asignatura a on t.idtitulacion=a.idtitulacion join\n     alumnoasignatura aa on a.idasignatura=aa.idasignatura\ngroup by t.idtitulacion, t.nombre  \nhaving count(*)>1\norder by 1;','media',4,1),(865,77,'Para cada ciudad donde viven personas obtener su nombre, junto al número de mujeres y número de hombres que viven en la misma. NOTA: si el atributo varon de persona vale 0  se trata de una mujer, y si vale 1 de un hombre.',' select ciudad,\n 		count(case when varon=0 then 1 else null end) as mujeres,\n        count(case when varon=1 then 1 else null end) as hombres\n from persona\n group by ciudad;\n \n /* select coalesce(m.ciudad, h.ciudad) as ciudad,\n       count(distinct m.dni) as mujeres,\n       count(distinct h.dni) as hombres\nfrom persona h full join\n     persona m on h.ciudad=m.ciudad and h.dni<>m.dni\nwhere (h.varon=1 or h.varon is null) and (m.varon=0 or m.varon is null)\ngroup by coalesce(m.ciudad, h.ciudad); */\n\n\n','dificil',3,1),(866,76,'Identificador, título y editorial, de los libros editados a partir del 2005 (año del libro), para los que hay algún ejemplar tanto en alguna biblioteca de \'Arnedo\' (la dirección de la biblioteca termina en Arnedo) como en alguna biblioteca de \'Villamediana\'.','select l.id, l.titulo, l.editorial\nfrom  libro l join\n      ejemplar e on l.id= e.libro join\n      biblioteca b on e.biblioteca=b.id\nwhere b.direccion like \'%Arnedo\' and l.año>=2005\nintersect\nselect l.id, l.titulo, l.editorial\nfrom   libro l join\n       ejemplar e on l.id= e.libro join\n       biblioteca b on e.biblioteca=b.id\nwhere  b.direccion like \'%Villamediana\' and l.año>=2005;','facil',4,0),(867,76,'Identificador y título de aquellos libros para los que  el lector de identificador=12 fue su primer solicitante de compra (primer_solicitante) o bien los tomó en préstamo en alguna ocasión. Ordena el resultado por identificador de libro.','select distinct l.id, l.titulo\nfrom   libro l left outer join \n       prestamo p on l.id=p.libro\nwhere  p.lector=12 or l.primer_solicitante=12\norder by l.id;\n-- Alternativa, Emilio\n/* select l.id,l.titulo\nfrom libro l\nwhere l.primer_solicitante=12\nunion\nselect l.id,l.titulo\nfrom libro l\njoin prestamo p on p.libro=l.id\nwhere p.lector=12\norder by l.id */\n','facil',4,0),(868,76,'Apellidos, nombre e identificador de los lectores que _SÓLO_ han tomado ejemplares en préstamo de la biblioteca \'Quevedo\'.','select lc.apellidos, lc.nombre, lc.id\nfrom   lector lc join\n       prestamo p on lc.id= p.lector join\n       ejemplar e on p.libro=e.libro and p.ejemplar=e.ejemplar join\n        biblioteca b on e.biblioteca=b.id\nwhere b.nombre=\'Quevedo\'\nexcept\nselect lc.apellidos, lc.nombre, lc.id\nfrom   lector lc join\n       prestamo p on lc.id= p.lector join\n       ejemplar e on p.libro=e.libro and p.ejemplar=e.ejemplar join\n       biblioteca b on e.biblioteca=b.id\nwhere b.nombre<>\'Quevedo\';','media',4,0),(869,76,'Identificador, apellidos y nombre de los lectores de Logroño (Logroño en dirección del lector) inscritos en el año 2000 o posterior (fecha_inscripcion), seguidos (pueden aparecer por lo tanto repetidos) de los lectores de Logroño que figuran como solicitantes de compra de algún libro (primer_solicitante).','select lc.id, lc.apellidos, lc.nombre\nfrom  lector lc\nwhere lc.direccion like \'%Logroño\' and year(lc.fecha_inscripcion)>1999\nunion all\nselect lc.id, lc.apellidos, lc.nombre\nfrom  lector lc join\n      libro l on lc.id=l.primer_solicitante\nwhere lc.direccion like \'%Logroño\';','facil',4,0),(870,76,'Identificador, título y editorial de libros escritos por más de un autor junto a su número de autores, su número de ejemplares, y número de localidades con algún ejemplar asignado en alguna de sus bibliotecas (biblioteca de la tabla ejemplar) y número de lectores diferentes que lo han tomado en préstamo. Algún libro podría no tener ejemplares o no haberse sacado nunca en préstamo, pero también tendrá que aparecer en la solución. Ten en cuenta que la localidad de la biblioteca aparece después de una coma y un espacio en el campo dirección. Para extraer la localidad de dirección puedes usar: substring(b.direccion, charindex(\',\',b.direccion)+2, len(b.direccion))','select l.id,l.titulo,l.editorial, \n       count(distinct al.autor) as autores, \n       count(distinct e.ejemplar) as ejemplares,\n       count(distinct substring(b.direccion, charindex(\',\',b.direccion)+2, len(b.direccion))) as localidades,\n       count(distinct p.lector) as lectores\nfrom  libro l join\n      autorLibro al on l.id=al.libro left join\n      ejemplar e on l.id=e.libro left join\n      biblioteca b on e.biblioteca=b.id left join\n      prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar\ngroup by l.id, l.titulo, l.editorial\nhaving count(distinct al.autor)>1;','media',4,0),(871,76,'Para cada año posterior a 1999, que aparezca en libro (columna año) o en fecha_inscripción de lector, obtener el número de libros editados ese año y el número de lectores inscritos.','-- Como el 72 de comercio\nselect coalesce(l.año, year(lc.fecha_inscripcion)) as año,\n       count(distinct l.id) as libros,\n       count(distinct lc.id) as lectores\nfrom  libro l full outer join\n      lector lc on l.año=year(lc.fecha_inscripcion)\nwhere l.año>1999\ngroup by coalesce(l.año, year(lc.fecha_inscripcion));','media',4,0),(872,76,'Identificador, apellidos, nombre y dirección de los lectores que _NO_ viven en \'Logroño\' (Logroño no está en dirección del lector) y que fueron el primer solicitante de compra (primer_solicitante) de algún libro que _NO_ tiene precio _NI_ páginas.','select lc.id as id,\n       lc.apellidos as apellidos,\n       lc. nombre as nombre,\n       lc.direccion as direccion\nfrom  lector lc join\n      libro l on lc.id=l.primer_solicitante\nwhere direccion not like \'%Logroño\' and l.precio is null and l.paginas is null;','facil',4,0),(873,76,'Identificador, apellidos y nombre de los lectores que han sido primer solicitante de compra (primer_solicitante) de algún libro de la editorial \'Galería\' (con tilde) o bien tienen en préstamo (sin fecha_devuelto) más de un ejemplar de cualquier libro.','select lc.id, lc.apellidos, lc.nombre\nfrom lector lc join\n     libro l on lc.id=l.primer_solicitante\nwhere  l.editorial=\'Galería\'\nunion\nselect lc.id, lc.apellidos, lc.nombre\nfrom lector lc join\n     prestamo p on lc.id=p.lector\nwhere p.fecha_devuelto is null\ngroup by lc.id, lc.apellidos, lc.nombre\nhaving  count(*)>1;','media',4,0),(874,76,'Identificador y título de los libros de la editorial \'Pergamino\' que _NO_ han sido tomados en préstamo por ningún lector de Fuenmayor (Fuenmayor en direccion del lector), ordenados por identificador de libro.','select l.id, l.titulo\nfrom libro l\nwhere l.editorial=\'Pergamino\'\nexcept\nselect l.id, l.titulo\nfrom libro l join\n     prestamo p on l.id=p.libro join\n     lector lc on p.lector=lc.id\nwhere lc.direccion like \'%Fuenmayor\'\norder by l.id;\n\n--Resultado con outer join (Carlos)\n--select distinct l.id, l.titulo\n--from libro l left join (prestamo p join lector le on p.lector = le.id and le.direccion like \'%Fuenmayor\') on l.id = p.libro \n--where l.editorial =\'Pergamino\' and p.libro is null\n--order by l.id','facil',4,0),(875,76,'Identificadores de libro y nombre y apellidos de su primer solicitante (o nulos si no tiene primer solicitante) de aquellos libros para los que no figura ni su peso ni sus páginas, seguidos de los identificadores de libro y nombre y apellidos del primer solicitante (o nulos si no tiene) para aquellos libros que todavía no se han adquirido (no tienen ejemplares en la BD).','select l.id, lc.nombre, lc.apellidos\nfrom  libro l left join\n      lector lc on l.primer_solicitante=lc.id\nwhere  l.peso is null and l.paginas is null\nunion all\nselect  l.id, lc.nombre, lc.apellidos\nfrom  libro l left join\n      lector lc on l.primer_solicitante=lc.id left join\n      ejemplar e on l.id=e.libro\nwhere e.libro is null ;','media',4,0),(876,76,'Por cada biblioteca devolver el nombre de biblioteca, titulo de libro y número de ejemplares de ese libro que _NUNCA_ han sido tomados en préstamo (ninguno de sus ejemplares), ordenado por número de ejemplares.','select b.nombre,\n       l.titulo, count(*) as numEjemplares\nfrom (biblioteca b join\n      ejemplar e on b.id=e.biblioteca join\n      libro l on e.libro=l.id) left outer join\n     prestamo p on e.libro=p.libro\nwhere p.libro is null\ngroup by b.nombre, l.titulo, l.id, b.id --agrupamos por biblioteca y libro\norder by 3; \n-- Nota: faltaba el ordenar (Carlos)\n-- Nota: como son ejemplares de libros no prestados, cada ejemplar\n--       aparecerá una sola vez, por eso es count(*)','media',4,0),(877,76,'Identificador de libros de la editorial \'La ruleta\' junto a la cadena \'pocos\' si la cantidad total de ejemplares está entre 0 y 1, \'bastantes\' si está entre 2 y 3 y \'muchos\' si es mayor que 3.','select l.id,\n       case\n          when count(*)<=1 then \'pocos\'\n          when count(*)<=3 then \'bastantes\'\n          else \'muchos\'\n       end as cantidad\nfrom  libro l left join \nejemplar e on e.libro=l.id\nwhere l.editorial=\'La ruleta\'\ngroup by l.id;','facil',4,0),(878,76,'Identificador, apellidos y nombre de los lectores que han tomado en préstamo _TANTO_ libros del autor 12 _COMO_ del autor 28.\nNo uses más de tres tablas distintas.','select lc.id, lc.apellidos, lc.nombre\nfrom  lector lc join\n      prestamo p on lc.id=p.lector join\n      autorLibro al on p.libro=al.libro\nwhere al.autor=12\nintersect\nselect lc.id, lc.apellidos, lc.nombre\nfrom  lector lc join\n      prestamo p on lc.id=p.lector join\n      autorLibro al on p.libro=al.libro\nwhere al.autor=28;','facil',4,0),(879,76,'Antigüedad de los lectores, poniendo el literal \'Reciente\' si se inscribió a partir del año 2009 (fecha_inscripcion), \'Antiguo\' si es socio antes de 1999 (fecha_inscripcion) y \'Medio\' en otro caso, junto al identificador del lector, para lectores de \'Alfaro\' (Alfaro en dirección del lector) _SIN_ ejemplares actualmente en préstamo (sin préstamos con fecha_devuelto nula).','select case\n         when year(fecha_inscripcion) >= 2009 then \'Reciente\'\n         when year(fecha_inscripcion) < 1999 then \'Antiguo\'\n         else \'Medio\'\n       end as Antiguedad,\n       id as lector\nfrom lector\nwhere direccion like \'%Alfaro\'\nexcept\nselect  case \n          when year(fecha_inscripcion) >= 2009 then \'Reciente\'\n          when year(fecha_inscripcion) < 1999 then \'Antiguo\'\n          else \'Medio\'\n        end as Antiguedad,\n        id as lector\nfrom  lector l join\n      prestamo p on l.id=p.lector\nwhere p.fecha_devuelto is null;','media',4,0),(880,76,'Apellidos y nombre de los autores de algún libro para el que todavía _NO_ hay ningún ejemplar registrado en la BD (que el libro no figura en la columna libro de la tabla ejemplar).\nNo uses más de tres tablas.','select a.apellidos, a.nombre\nfrom ( autor a join\n       autorlibro al on a.id=al.autor ) left outer join\n     ejemplar e on al.libro=e.libro\nwhere e.libro is null;','facil',4,0),(881,76,'Identificador de autores que hayan escrito seis o más libros (sólos o en colaboración con otros). A estos identificadores les seguirán los identificadores de autores con seis o más ejemplares de cualquier libro suyo (de nuevo, escrito en solitario o con otros) en una misma biblioteca.','select al.autor\nfrom  autorlibro al\ngroup by al.autor\nhaving count(al.libro)>=6\nunion all\nselect distinct al.autor\nfrom  autorlibro al join\n      ejemplar e on e.libro=al.libro\ngroup by al.autor, e.biblioteca\nhaving count(*)>=6;','media',4,0),(882,76,'Nombre de las diferentes localidades en las que viven los lectores (la localidad está en la dirección del lector), junto al número de lectores que viven en cada una y al número de bibliotecas de la localidad (localidad también está en la dirección de la biblioteca). \nNota: Puedes utilizar la siguiente expresión para obtener la ciudad a partir de la dirección substring(direccion, charindex(\',\',direccion)+2, len(direccion)).','select  substring(lc.direccion, charindex(\',\',lc.direccion)+2, len(lc.direccion)) as localidad,  \n        count(distinct lc.id) as lectores,\n        count(distinct b.id) as bibliotecas\nfrom   lector lc left outer join\n       biblioteca b on \n               substring(lc.direccion, charindex(\',\',lc.direccion)+2, len(lc.direccion))=\n               substring(b.direccion, charindex(\',\',b.direccion)+2, len(b.direccion))\ngroup by substring(lc.direccion, charindex(\',\',lc.direccion)+2, len(lc.direccion));','facil',4,0),(883,76,'Identificador de libros con algún ejemplar prestado en este momento (sin fecha_devuelto) junto a los apellidos del lector que fue su primer solicitante y si no tiene apellidos, junto al nombre de su editorial, o un nulo en caso de que no tenga ni primer solicitante ni editorial.','select distinct l.id, coalesce(lc.apellidos, l.editorial) as \"lector/editorial\"\nfrom (prestamo p join\n     libro l on l.id=p.libro) left join\n     lector lc on l.primer_solicitante=lc.id\nwhere p.fecha_devuelto is null; -- tiene prestamo pero sin devolver','facil',4,0),(885,62,'pru','select distinct\n        b.nombre,\n        l.titulo, count(*) as numEjemplares\nfrom (biblioteca b join\n       ejemplar e on b.id=e.biblioteca join\n       libro l on e.libro=l.id) left outer join\n      prestamo p on e.libro=p.libro\nwhere p.libro is null\ngroup by b.nombre, l.titulo, l.id\norder by count(*);','media',4,0),(886,58,'Calcula la diferencia en valor absoluto (abs(cantidad)) entre el valor total de lo vendido (prec_total) correspondiente a los proveedores de los artículos más caros (prec_vent) y los proveedores de los artículos más baratos.','select abs( sum(vC.prec_total) -\n            ( select sum(vB.prec_total)\n              from venta vB join\n                   articulo aB on vB.ident_artic=aB.ident_artic\n              where aB.ident_prov in\n                    (select ident_prov\n                     from articulo\n                     where prec_vent = (select min(prec_vent) from articulo)\n                    )\n            )\n          ) as diferencia\nfrom venta vC join\n     articulo aC on vC.ident_artic=aC.ident_artic\nwhere aC.ident_prov in\n      (select ident_prov\n       from articulo\n       where prec_vent = (select max(prec_vent) from articulo)\n      );','dificil',7,0),(887,58,'Apellido y nombre de los clientes a los que no se les ha vendido nada en el año 2002.','select apell1, nombr_client\nfrom cliente\nwhere ident_client not in\n      ( select ident_client \n        from venta\n        where year(fech_vent)=\'2002\'\n      );','media',7,0),(888,58,'En qué ciudad, de entre las que no tienen tiendas, viven más clientes de la BD','select ciud\nfrom cliente\nwhere ciud not in (select ciud from tienda)\ngroup by ciud\nhaving count(*)>=all\n       (select count(*)\n        from cliente\n        where ciud not in (select ciud from tienda)\n        group by ciud\n       );','dificil',7,0),(891,58,'En qué ciudad, de entre aquellas que tienen tiendas, viven menos clientes de la BD (puede ser una donde no viva ninguno)','select t.ciud\nfrom cliente c right join\n     tienda t on c.ciud=t.ciud\ngroup by t.ciud \nhaving count(distinct ident_client) <= all\n       (select count(distinct ident_client)\n        from cliente c right join\n             tienda t on c.ciud=t.ciud\n        group by t.ciud\n       );','dificil',7,0),(894,58,'Identificador y nombre de aquellos artículos de los que se ha vendido una sola unidad (cant_artics) en más de la mitad de sus ventas (filas de venta).\n','select v1.ident_artic, a.nombr_artic\nfrom venta v1 join\n	 articulo a on v1.ident_artic=a.ident_artic\ngroup by v1.ident_artic, a.nombr_artic\nhaving count(*)/2 <\n       (select count(*)\n        from venta v2\n        where v2.ident_artic=v1.ident_artic and -- CORRELACIÓN\n			  v2.cant_artics=1\n       ) ;\n/* ALTERNATIVA\nselect a.ident_artic, a.nombr_artic\nfrom articulo a\njoin venta v on v.ident_artic=a.ident_artic\nwhere v.cant_artics=1\ngroup by v.ident_artic, a.nombr_artic\nhaving count(*)>(select count(*)/2 \n				 from venta v1\n				 where v1.ident_artic=v.ident_artic\n				 )\n*/','dificil',8,0),(895,58,'Identificador, nombre y apellido de aquellos clientes a quienes se ha vendido más de una unidad (cant_artics) en al menos un tercio de las ventas realizadas a ellos (filas de venta)','select c.ident_client, c.nombr_client, c.apell1\nfrom venta v1 join\n	 cliente c on v1.ident_client=c.ident_client\ngroup by c.ident_client, c.nombr_client, c.apell1\nhaving count(*)/3 <=\n       (select count(*)\n        from venta v2\n        where v2.ident_client=c.ident_client and -- CORRELACIÓN\n              v2.cant_artics>1);','dificil',8,0),(896,58,'Identificadores de los proveedores que suministran todos los tipos de calendario (contenga la palabra calendario en nombr_artic)','/* select ident_prov\nfrom articulo\nwhere nombr_artic like \'%bolígrafo%\'\ngroup by ident_prov\nhaving count(ident_artic) =\n       ( select count(*)\n         from articulo \n         where nombr_artic like \'%bolígrafo%\'\n       );*/\n	   \nselect p.ident_prov\nfrom proveedor p\nwhere not exists (select a1.ident_artic\n				  from articulo a1\n				  where a1.nombr_artic like \'%calendario%\'\n				  and a1.ident_artic not in (select a2.ident_artic\n										 from articulo a2 \n										 where p.ident_prov = a2.ident_prov));','dificil',8,0),(897,58,'Gerentes de tiendas que han vendido artículos de todos los proveedores de artículos blancos','select nombr_gerent\nfrom tienda t\nwhere not exists\n     ( select a.ident_prov\n       from articulo a\n       where a.color=\'blanco\' and\n             a.ident_prov not in\n            ( select a1.ident_prov\n              from venta v join\n                   articulo a1 on v.ident_artic = a1.ident_artic\n              where v.ident_tiend= t.ident_tiend -- CORRELACIÓN\n            )\n     );','dificil',8,0),(898,58,'Identificador y nombre de los proveedores que suministran todos los pesacartas','select p.ident_prov, p.nombr_prov\nfrom proveedor p \nwhere not exists\n      ( select a1.ident_artic\n        from articulo a1\n        where a1.nombr_artic = \'pesacartas\' and\n	      a1.ident_artic NOT IN\n              (select a2.ident_artic\n               from articulo a2\n               where a2.ident_prov = p.ident_prov -- correlación\n              )\n       );','dificil',8,0),(899,58,'Obtener todas las filas y columnas de la tabla tienda de forma que, para aquellas tiendas que han vendido artículos a algún cliente que no es de su misma ciudad, figure que su administrador es \'Gómez, Salvador\'.','select t.ident_tiend, t.ciud,\n       case\n         when exists\n              ( select v.*\n                from venta v join\n                     cliente c on v.ident_client=c.ident_client\n                where c.ciud<>t.ciud and # correlacion\n                      v.ident_tiend=t.ident_tiend #correlacion\n              ) then \'Gómez, Salvador\'\n         else t.nombr_gerent\n       end as nombr_gerent\nfrom tienda as t;','dificil',9,0),(900,58,'Obtener todas las filas y columnas de la tabla proveedor de forma que el proveedor que haya vendido más artículos (en número de unidades) pase a denominarse \'Rodapén\'.\n','select p.ident_prov,\n       case\n         when p.ident_prov in\n              ( select a.ident_prov\n                from articulo a join\n                     venta v on a.ident_artic=v.ident_artic\n                group by a.ident_prov\n                having sum(v.cant_artics)  >= all\n                       ( select sum(v.cant_artics)\n                         from articulo a JOIN\n                              venta v ON a.ident_artic=v.ident_artic\n                         group by a.ident_prov\n                       )\n              ) then \'Rodapén\'\n         else p.nombr_prov\n       end as nombr_prov\nfrom proveedor as p;','dificil',9,0),(901,58,'Obtener todas las filas y columnas de la tabla artículo de forma que el proveedor (o proveedores) del artículo más vendido (en número de unidades) aumente un 5% los precios de venta de todos sus artículos.\n','select a.ident_artic, a.nombr_artic, a.peso, a.color, a.prec_compr,\n       case\n         when exists\n              ( select v.ident_artic\n                from venta as v join\n                     articulo as a1 on v.ident_artic=a1.ident_artic\n                where a1.ident_prov=a.ident_prov # correlacion\n                group by v.ident_artic\n                having sum(v.cant_artics) >= all\n                       ( select sum(v1.cant_artics)\n                         from venta v1\n                         group by v1.ident_artic\n                       )\n              ) then a.prec_vent * 1.05\n         else a.prec_vent\n       end as prec_vent,\n       a.ident_prov\nfrom articulo as a;','dificil',9,0),(902,58,'OJO: sesión 9 necesita incluir filas para que no se acepten las respuestas tan variopintas que hay actualmente','select * from venta;','facil',9,0),(903,58,'En qué ciudades con tienda viven clientes con el mínimo número de unidades de artículo (cant_artics) compradas (en cualquier tienda) de entre los clientes que viven en ciudades con tienda.  Tener en cuenta que puede haber clientes que no hayan comprado nada.\nNota:  recordar que sum(null, null, ..., null) devuelve null y que para conseguir que en ese caso devuelva cero se puede usar coalesce.\nOtra formulación enunciado: Para las ciudades que tengan tienda, obtener las que son residencia de clientes que tienen el mínimo número de unidades de artículo (cant_artics) compradas (en cualquier tienda) de entre los clientes que viven en ciudades con tienda. ','select distinct c.ciud\nfrom cliente c left join\n     venta v on v.ident_client=c.ident_client\nwhere c.ciud in (select ciud from tienda)\ngroup by c.ident_client, c.ciud -- agrupa por cliente (ciudad es dato de cliente)\nhaving coalesce(sum(v.cant_artics),0) <= all\n       (select coalesce(sum(v1.cant_artics),0)\n        from cliente c1 left join\n             venta v1 on v1.ident_client=c1.ident_client\n        where c1.ciud in (select ciud from tienda)\n        group by c1.ident_client\n       );','dificil',7,0),(904,64,'Prueba-Fco-Universidad Listado de asignaturas','select * \nfrom asignatura','facil',21,1),(905,64,'Prueba-Fco-Universidad Listado de profesores','select *\nfrom profesor','facil',21,0),(909,61,'Obtener el número de empleadas, su salario medio, su edad media y el número de los diferentes departamentos en los que  trabajan','SELECT count(*) \'Número de empleadas\',avg(salario) \'Salario medio\',\navg(year(current_date)-year(fechancto)) \'Edad media empleadas\', count(distinct depto) as \'Departamentos con mujeres\'\nFROM empleado e\nwhere Sexo=\'M\'\n;','facil',1,1),(910,62,'Código sin repeticiones de los libros con dos o más autores. Se debe resolver la consulta sin utilizar la función count(). ','select distinct al1.libro \nfrom autorlibro al1 join \nautorlibro al2 on al1.libro=al2.libro and al1.autor<>al2.autor;\n','facil',2,1),(911,58,'Nombre y apellido de los clientes que hayan realizado compras en alguna tienda de la localidad en la que ellos mismos residen.','select distinct nombr_client, apell1\nfrom cliente c join\n         venta v on c.ident_client = v.ident_client join\n         tienda t on  t.ident_tiend = v.ident_tiend and\n                   c.ciud = t.ciud;','facil',2,1),(912,58,'Mostrar los códigos de clientes de aquellos clientes que hayan gastado en total en tiendas de su ciudad más de 20 euros.','select c.ident_client\nfrom cliente c join\n         venta v on c.ident_client = v.ident_client join\n         tienda t on  t.ident_tiend = v.ident_tiend and\n                   c.ciud = t.ciud\n group by c.ident_client\n having sum(prec_total)>20;','media',3,1),(913,58,'Selecionar los códigos de cliente que hayan comprado más de dos veces en una misma tienda ubicada en su lugar de residencia.','select c.ident_client\nfrom cliente c join\n         venta v on c.ident_client = v.ident_client join\n         tienda t on  t.ident_tiend = v.ident_tiend and\n                   c.ciud = t.ciud\n group by c.ident_client, t.ident_tiend\n having count(t.ident_tiend)>2;','media',3,1),(914,58,'Mostrar los códigos de tienda y su ciudad, junto con el número de ‘Clientes de fuera’ diferentes (que no residen en la ciudad donde se ubica la tienda) que han hecho alguna compra en la tienda.','select v.ident_tiend, t.ciud, count(distinct c.ident_client) as \'Clientes de fuera\'\nfrom cliente c join\n     venta v on c.ident_client = v.ident_client join\n     tienda t on  t.ident_tiend = v.ident_tiend and c.ciud <> t.ciud\ngroup by v.ident_tiend, t.ciud;','media',3,1),(915,61,'Obtenga los empleados en los que los dígitos tercero y cuarto de su número de la seguridad social y de su jefe son 3 y 4 respectivamente y su fecha de nacimiento coincide con la última fecha del mes. Muestre nombre, apellidos, año de nacimiento y día de la semana de su fecha de nacimiento. Para filtrar el número de la seguridad social utilizar únicamente like. Serán de utilidad las funciones dayname y last_day.','SELECT nombre, apellidos, year(fechancto) as \'Año nacimiento\', dayname(fechancto) as \'Día de la semana nacimiento\'\nFROM empresa.empleado e\nwhere nss like \'__34_____\' and jefe like \'__34_____\'\nand last_day(fechancto)=fechancto\n;','facil',1,1),(916,61,'Obtener el nombre, mes de nacimiento y sexo de parientes de empleados que son hijos o hijas y su nombre comienza y termina por la letra a. ','SELECT nombre, month(fechancto) \'Mes de nacimiento\', sexo\nFROM familiar f\nwhere parentesco like \'hij_\'\nand nombre like \'A%\'\nand nombre like \'%a\';','facil',1,1),(917,61,'Calcular el número de empleados distintos que trabajan en total en los proyectos 1, 2 y 3, junto al máximo y el valor medio de las horas trabajadas en dichos proyectos.','SELECT count(distinct empleado) \'Empleados\',max(horas) \'Máximo horas\', avg(horas) \'Media de horas\'\nFROM trabaja t\nwhere proyecto in (1,2,3)\n;\n','facil',1,1),(918,61,'Obtenga el nombre de los proyectos en los que la inicial de su localidad está entre M y T. Puede usar la función left. ','SELECT nombre\nFROM proyecto p\nwhere left(localidad,1) between \'M\' and \'T\';','facil',1,1),(919,62,'Fechas de préstamo de todas las parejas de préstamo consecutivo del lector 4 (sin contar como consecutivo las que se han hecho el mismo día) junto al número de días transcurridos entre las dos fechas de préstamo.','select p1.fecha_prestado, p2.fecha_prestado,\n	datediff(p2.fecha_prestado, p1.fecha_prestado) as \"dias\", p1.lector\nfrom  (prestamo as p1 join\n	   prestamo as p2 on\n	   p1.lector=p2.lector and\n	   p1.fecha_prestado<p2.fecha_prestado)\nwhere p1.lector=4 and\n	not exists(\n		select pi.fecha_prestado\n		from prestamo as pi\n		where pi.lector=p1.lector and\n		p1.fecha_prestado<pi.fecha_prestado and\n		pi.fecha_prestado<p2.fecha_prestado)\norder by 1;','media',8,0),(920,62,'Título e identificador de libro para aquellos libros que tengan ejemplares tanto en la biblioteca 3 como en la 4','select distinct l1.titulo, l1.id\nfrom libro as l1 join\n     ejemplar as e1 on l1.id=e1.libro join\n     ejemplar as e2 on e1.libro=e2.libro\nwhere e1.biblioteca=3 and e2.biblioteca=4\n\n-- Arturo  17/3/2014','facil',2,0),(921,62,'Nombre, apellidos e id de aquellos lectores que hayan tomado ejemplares en préstamo durante el año 2005 donde la fecha de préstamo sea anterior a la fecha de compra del ejemplar (por lo tanto haya fechas erróneas)','select l.nombre, l.apellidos, l.id, e.fecha_compra, p.fecha_prestado\nfrom lector as l join\n     prestamo as p on l.id=p.lector join\n     ejemplar as e on p.libro=e.libro and p.ejemplar=e.ejemplar and \n	                  p.fecha_prestado<e.fecha_compra \nwhere year(p.fecha_prestado)=2005 \n\n-- Arturo  17/3/2014','media',2,0),(922,62,'Identificador, nombre y apellidos de los lectores que hayan tardado en devolver alguno de sus préstamos de la biblioteca 2 más de 20 días (sin repeticiones) ordenados por identificador de lector. No se incluyen los préstamos no devueltos.\n','select distinct l.id, l.nombre, l.apellidos\nfrom lector as l join\n     prestamo as p on l.id=p.lector join\n     ejemplar as e on p.libro=e.libro and e.ejemplar=p.ejemplar\nwhere datediff(p.fecha_devuelto, p.fecha_prestado)>20 and e.biblioteca=2\norder by 1\n\n-- Arturo 17/3/2014','media',2,0),(923,61,'Obtener por cada sexo el número de directores/as de departamento, su salario medio y la media de los años que llevan ejerciendo la dirección (calculado como el año actual menos el año del inicio de la dirección). La función para obtener la fecha actual es current_date().','select e.sexo, count(distinct director) \'Directores/as departamento\', \navg(e.salario) \'Salario medio\', \navg(year(current_date())-year(fechainidir)) \'Media años de dirección\'\nfrom empleado e\njoin departamento d on d.director=e.nss\ngroup by 1\n;','facil',3,1),(924,58,'Nombre y apellido de los clientes que tengan una tienda en su ciudad\n','select distinct c.nombr_client, c.apell1\nfrom cliente c join\n	 tienda t on c.ciud=t.ciud;','facil',2,1),(925,58,'Código de articulo de aquellos artículos cuyo peso sea superior al peso del artículo con código 1','select a1.ident_artic\nfrom articulo a1 join\n	 articulo a2 on a1.peso>a2.peso\nwhere a2.ident_artic = 1;','facil',2,1),(926,58,'Ciudades en las que hay más de una tienda (sin utilizar group by ni distinct).','select t1.ciud\nfrom tienda t1 join\n     tienda t2 on t1.ciud=t2.ciud and\n	 t1.ident_tiend<t2.ident_tiend;','facil',2,1),(927,58,'Ciudades en las que hay tres o más tiendas (sin utilizar group).','select distinct t1.ciud\nfrom tienda t1 join\n     tienda t2 on t1.ciud=t2.ciud and\n	 t1.ident_tiend<t2.ident_tiend join\n	 tienda t3 on t2.ciud=t3.ciud and\n	 t2.ident_tiend<t3.ident_tiend;','media',2,1),(928,58,'Código de artículo junto con el mayor número de unidades vendidas en una sola venta para aquellos artículos vendidos en más de una venta','select ident_artic, max(v.cant_artics)\nfrom venta v\ngroup by ident_artic\nhaving count(*)>1;','facil',3,1),(929,58,'Para cada artículo diferente, nombre del artículo junto con la suma del dinero que se ha obtenido en sus ventas. Ordena el resultado por nombre de artículo. (no devolver aquellos que no se han vendido)','select a.nombr_artic, sum(v.PREC_TOTAL)\nfrom articulo a join \n     venta v on a.IDENT_ARTIC=v.IDENT_ARTIC\ngroup by a.ident_artic, a.nombr_artic\norder by a.nombr_artic;','facil',3,1),(930,62,'Se quiere mostrar el número de lectores que tienen los autores.  Se consideran sólo aquellos libros que han sido prestados y devueltos en un plazo que garantice que han podido ser leídos. Se supone que como máximo un lector puede leer 40 páginas al día, de tal manera que si se ha devuelto en un plazo que implique una velocidad mayor de lectura se considera que en realidad el lector no lo ha leído. No tener en cuenta los libros que aún no han sido devueltos. Mostrar el nombre y apellidos (separado por un blanco) del autor y el número de lectores de dicho autor ordenados de mayor a menor.','select concat(a.nombre,\' \',a.apellidos) as \'Autor\', count(distinct p.lector) as \'Número de lectores\'\nfrom libro li join \n     autorlibro al on al.libro=li.id join \n	 autor a on al.autor=a.id join \n	 prestamo p on p.libro = li.id\nwhere p.fecha_devuelto is not null \nand datediff(p.fecha_devuelto, p.fecha_prestado)> li.paginas/40\ngroup by a.id, concat(a.nombre,\' \',a.apellidos)\norder by 2 desc','media',3,1),(931,62,'Mostrar nombre y apellidos de los lectores (separados por un blanco) y nombre de las bibliotecas cercanas (considerando que un lector está cercano a una biblioteca si los dos primeros dígitos de su número de teléfono coinciden con los dos primeros dígitos del teléfono de la biblioteca) en las que el lector haya tomado en préstamo al menos un libro. Ordenar el resultado por código de lector y código de biblioteca.\nNota: Usar la función concat.','select distinct concat(le.nombre, \' \', le.apellidos) as Lector, \n b.nombre as \'Biblioteca\'\nfrom prestamo p\njoin lector le on p.lector=le.id\njoin ejemplar e on p.libro=e.libro and p.ejemplar=e.ejemplar\njoin biblioteca b on e.biblioteca=b.id\nwhere left(le.tfno,2)= left(b.tfno,2)\norder by le.id, b.id;','facil',2,1),(932,62,'Obtener las editoriales cuyo precio medio por página es inferior a 10 céntimos. Mostrar el nombre de la editorial y el precio por página de la misma. Ordena el resultado por el precio por página.','select e.nombre as \'Editorial\', avg(li.precio/li.paginas) as \'Precio medio por página\'\nfrom libro li\njoin editorial e on e.nombre=li.editorial\ngroup by e.nombre\nhaving avg(li.precio/li.paginas)<0.10\norder by 2;','facil',3,1),(933,62,'Mostrar título de los libros, nombre y apellidos (separados por un blanco) del lector y días que ha sido prestado el libro para aquellos libros del año 2002 o posterior de la editorial Pergamino que han sido prestados a lectores inscritos a partir del año 2003 en la biblioteca Cervantes y cuya autora tiene de nombre Esther. Descartar aquellos libros que aún no han sido devueltos.\nNota: Usar la función concat.','select li.titulo as libro, concat(le.nombre,\' \',le.apellidos) as lector, datediff(fecha_devuelto, fecha_prestado) as \'Días de lectura\'\nfrom libro li\njoin autorlibro al on li.id=al.libro\njoin autor a on al.autor=a.id\njoin ejemplar e on e.libro = li.id\njoin biblioteca b on e.biblioteca = b.id\njoin prestamo p on p.libro=e.libro and p.ejemplar=e.ejemplar\njoin lector le on p.lector=le.id\nwhere li.año>=2002 and li.editorial=\'Pergamino\' and b.nombre=\'Cervantes\'\nand year(le.fecha_inscripcion)>=2003 and p.fecha_devuelto is not null\nand a.nombre=\'Esther\'\n;','media',2,1),(934,62,'Para todos los libros mostrar los datos del libro junto con los datos de su primer lector solicitante.','select li.id, li.titulo, le.nombre, le.apellidos\nfrom libro li left outer join \nlector le on li.primer_solicitante = le.id\n','facil',4,1),(935,62,'Para todos los libros mostrar el código del libro, el título y el número de autores (NumeroAutores).\nMostrar el resultado de manera descendente según el númeo de autores, y para aquellos con el mismo número de autores, ascendente por el código de libro','select li.id, li.titulo, count(a.autor) NumeroAutores\nfrom libro li left outer join autorlibro a on li.id = a.libro\ngroup by li.id, li.titulo\norder by count(a.autor) desc, li.id;','facil',4,1),(936,61,'Para cada empleado obtener su NSS, su salario, el total del salario de sus subordinados (SalarioSubordinados) y el total de subordinados (TotalSubordinados).','select  je.nss, je.salario, coalesce(sum(e.salario),0) as SalarioSubordinados, count(e.nss) as TotalSubordinados\nfrom empleado je left outer join empleado e on je.nss= e.jefe\ngroup by je.nss, je.salario;\n','media',4,1),(937,62,'Para todos los libros mostrar el código de libro, el título y el total de préstamos que se han realizado de dicho libro (TotalPrestamos), solo si el total de préstamos es menor o igual que 2.\n','select li.id, li.titulo,count(p.libro) TotalPrestamos\nfrom libro li left outer join prestamo p on li.id = p.libro\ngroup by li.id,li.titulo\nhaving count(p.libro)<=2;','media',4,1),(938,62,'ID y nombre de todas las bibliotecas de Logroño junto con el número de ejemplares\nque tienen de peso superior a 980 g (TotalLibros). Mostrar también la suma del peso de dichos ejemplares (SumaPeso).','select b.id, b.nombre, count(e.libro) TotalLibros, coalesce(sum(l.peso), 0) SumaPeso\nfrom biblioteca b left join \n(libro l join ejemplar e on l.id = e.libro and peso >980) on b.id =e.biblioteca\nwhere direccion like \'%Logroño\'\ngroup by b.id, b.nombre;','media',4,1),(939,62,'Nombre y dirección de las editoriales de Barcelona o Valencia y el número de libros de más de 900 páginas que tienen editados (TotalLibros). Incluir también la suma de las páginas de dichos libros (SumaPaginas). Ordena el resultado de más a menos libros de más de 900 páginas editados. Deben aparecer las editoriales sin libros editados o aquellas que solo tengan libros editados pero de menos de 900 pagínas (con 0 libros y 0 en el total de páginas). ','select e.nombre, e.direccion, count(l.id) TotalLibros, coalesce(sum(l.paginas), 0) SumaPaginas\nfrom editorial e left join libro l  on e.nombre = l.editorial and paginas>900\nwhere e.direccion like \'%Barcelona\' or e.direccion like \'%Valencia\'\ngroup by e.nombre, e.direccion\norder by count(l.id) desc;','media',4,1),(940,62,'Nombre de cada editorial junto con el código, título del libro (o libros) y número de páginas, siendo ese libro el que más páginas tiene entre los libros editados por ella. Solo nos interesan las editoriales que tengan editado al menos un libro. Ordena por nombre de editorial.  (Nota: Resolverla sin subconsulta.)','select l1.id, l1.editorial,  l1.titulo, l1.paginas\nfrom libro l1 join libro l2 on l1.editorial = l2.editorial\ngroup by  l1.id, l1.editorial, l1.titulo,l1.paginas\nhaving l1.paginas = max(l2.paginas)\norder by l1.editorial; \n\n\n-- select  l1.id, l1.editorial, l1.titulo, l1.paginas\n-- from libro l1\n-- where l1.paginas in (select max(l2.paginas)\n--                                    from libro l2\n--                                     where l2.editorial = l1.editorial);','dificil',3,1),(941,62,'Obtener el peso medio de los libros que tienen coinciden en número de páginas cuando ese peso medio es inferior a 550 y el número de libros que coinciden en número de páginas es igual a 2. Mostrar el número de páginas y su precio medio.','SELECT l.paginas, avg(l.precio) as \'Precio medio\'\nFROM libro l\njoin libro l2 on l.paginas=l2.paginas and l.id<>l2.id\ngroup by 1\nhaving count(*)=2 and avg(l.peso)<550','facil',3,0),(942,58,'Obtener para cada ciudad, cuántos clientes (NumeroClientes) y cuántas tiendas (NumeroTiendas) hay en dicha ciudad. (Nota: Esta consulta se hace contra MySQL y este sistema no soporta full outer join.)','select c.ciud, count(distinct c.ident_client) \'NumeroClientes\', count(distinct t.ident_tiend) \'NumeroTiendas\'\nfrom cliente c left join\n     tienda t  on c.ciud=t.ciud\ngroup by c.ciud\nunion\nselect t.ciud, count(distinct c.ident_client), count(distinct t.ident_tiend) \nfrom cliente c right join\n     tienda t  on c.ciud=t.ciud\ngroup by t.ciud;\n','media',4,1),(943,76,'Para cada ciudad (Ciudad), cuántas bibliotecas (NumeroBibliotecas) y cuántas editoriales (NumeroEditoriales) hay en la ciudad. La ciudad se encuentra en el campo dirección a partir de la coma. En concreto la función SQL SERVER que obtiene la ciudad de una biblioteca (alias de la tabla b) es\nSUBSTRING(b.direccion, CHARINDEX(\',\', b.direccion)+2, LEN(b.direccion)).','select coalesce(SUBSTRING(b.direccion, CHARINDEX(\',\', b.direccion)+2, LEN(b.direccion)),\n				SUBSTRING(e.direccion, CHARINDEX(\',\', e.direccion)+2, LEN(e.direccion))) \n				as \'Ciudad\', \n                count(distinct b.id) as \'NumeroBibliotecas\', \n				count(distinct e.nombre) as \'NumeroEditoriales\'\nfrom biblioteca b full join\n     editorial e  on SUBSTRING(b.direccion, CHARINDEX(\',\', b.direccion)+2, LEN(b.direccion))\n	                =SUBSTRING(e.direccion, CHARINDEX(\',\', e.direccion)+2, LEN(e.direccion))\ngroup by coalesce(SUBSTRING(b.direccion, CHARINDEX(\',\', b.direccion)+2, len(b.direccion)),\n				  SUBSTRING(e.direccion, CHARINDEX(\',\', e.direccion)+2, LEN(e.direccion)));','dificil',4,1),(944,58,'Para las tiendas de Barcelona obtener su código de tienda, el número de ventas realizadas (TotalVentas) y el total de dinero recaudado (SumaRecaudado)  a clientes de Barcelona','select t.ident_tiend,count(v.ident_artic) \'TotalVentas\', \n			coalesce(sum(prec_total),0) \'SumaRecaudado\'\nfrom tienda t left outer join\n     (venta v  join\n      cliente c on v.ident_client = c.ident_client) \n              on t.ident_tiend=v.ident_tiend and c.ciud=\'Barcelona\'\nwhere t.ciud=\'Barcelona\'\ngroup by t.ident_tiend;','dificil',4,1),(945,58,'Mostrar para cada tienda el código de tienda,  el número de ventas realizadas (TotalVentas) y el total de dinero recaudado en sus ventas (SumaRecaudado).','select t.ident_tiend,count(v.ident_artic) \'TotalVentas\', \n			coalesce(sum(prec_total),0) \'SumaRecaudado\'\nfrom tienda t left outer join\n     venta v  on t.ident_tiend=v.ident_tiend\ngroup by t.ident_tiend;\n','media',4,1),(946,58,'Por cada cliente obtener su identificador y el número de tiendas (NumeroTiendas) que tiene en su ciudad','select c.ident_client, count(t.ident_tiend) \'NumeroTiendas\'\nfrom  cliente c left outer join\n      tienda t on c.ciud=t.ciud\ngroup by c.ident_client;','facil',4,1),(947,61,'Obtener el NSS y el salario del empleado que más cobra entre aquellos empleados que trabajan en los proyectos con número 20 ó 30.','select e.NSS, e.salario\nfrom empleado e join trabaja t on e.nss=t.empleado\nwhere (proyecto = 20 or proyecto = 30) and\nsalario >= all (select salario\n                from empleado e join trabaja t on e.nss=t.empleado\n                where proyecto = 20 or proyecto = 30);','media',7,1),(948,61,'Obtener el NSS, nombre y apellidos del empleado (o empleados) que trabaja en más proyectos diferentes','select e.NSS, e.nombre, e.apellidos\nfrom empleado e join trabaja t on e.nss=t.empleado\ngroup by e.NSS, e.nombre, e.apellidos\nhaving count(*) >= all (select count(*)\n                        from empleado e join trabaja t on e.nss=t.empleado\n                        group by e.NSS, e.nombre, e.apellidos);','media',7,1),(949,61,'Nombre y apellidos de los empleados que dedican 5 o más horas a todos los proyectos de los departamentos con 3 empleados. Nota: Se propone utilizar una solución que incluya un not in.','select e.Nombre, e.Apellidos\nfrom empleado e\nwhere not exists\n  (select p.numero\n   from proyecto p\n   where p.Depto in (select e1.Depto\n                    from  empleado e1\n                    group by e1.Depto\n                    having count(e1.NSS)=3)\n   and p.numero not in(\n   select t.Proyecto\n   from  trabaja t\n   where  t.Empleado=e.NSS\n   and t.horas>=5));','dificil',8,1),(950,61,'Obtener el nombre y apellidos de los empleados que más ganan en su departamento','select nombre, apellidos\nfrom empleado e\nwhere salario >= all (select salario\n						from empleado e1\n						where e1.depto=e.depto);','media',8,1),(951,61,'Obtener NSS, nombre y apellido de los jefes (tienen algún empleado\na su cargo).\n','select distinct e.jefe, j.nombre, j.apellidos\nfrom empleado e join \nempleado j on e.jefe=j.NSS;','facil',2,1),(952,61,'Obtener NSS, nombre y apellido de los jefes que sean mayores que todos los empleados que tienen a su cargo.','select distinct e.jefe, j.nombre, j.apellidos\nfrom empleado e join empleado j on e.jefe=j.NSS\nwhere j.fechaNcto <= all (select e.fechaNcto\n						from empleado e1\n						where e1.jefe=j.NSS); -- correlación','dificil',8,1),(953,61,'Obtener NSS, nombre y apellidos de los directores de departamento que trabajan menos horas que otro empleado en los proyectos asignados a su departamento.','-- Obtener NSS, nombre y apellidos de los directores de departamento \n-- que NO son los que más horas trabajan en ninguno de los proyectos asignados a su departamento.\n\nselect distinct e.NSS, e.nombre, e.apellidos\nfrom empleado e join\n     departamento d on e.NSS=d.director join\n     trabaja t on e.NSS=t.empleado join\n     proyecto p on p.numero=t.proyecto and p.depto=d.numero\nwhere t.horas < any (select t1.horas\n						from trabaja t1\n						where t1.proyecto=p.numero\n				     );','dificil',8,1),(954,61,'Obtener NSS, nombre y apellidos de los directores de departamento que trabajan menos horas que otro empleado de su departamento en los proyectos asignados a su departamento.','-- Obtener NSS, nombre y apellido de los directores de departamento \n-- que NO son los que más horas trabajan de entre los empleados de su departamento, \n-- en ninguno de los proyectos asignados a su departamento.\nselect distinct e.NSS, e.nombre, e.apellidos\nfrom empleado e join\n     departamento d on e.NSS=d.director join\n     trabaja t on e.NSS=t.empleado join\n     proyecto p on p.numero=t.proyecto and p.depto=d.numero\nwhere t.horas < any (select t1.horas\n					 from trabaja t1 join \n					      empleado e1 on t1.empleado=e1.NSS\n					 where t1.proyecto=p.numero and #correlacion\n						   e1.depto=d.numero #correlacion\n					);','dificil',8,1),(955,62,'Por cada año igual o posterior a 1990, mostrar el año junto con el número de editoriales\nque han publicado libro ese año, el número total de páginas y el precio medio de los libros. \nIncluir también el número de libros con primer solicitante y el número de libros sin primer solicitante.','select año, count(distinct editorial) as NUMEDITORIALES, sum(paginas) as NUMPAGINAS,  avg(precio) as PRECIOMEDIO, \ncount(primer_solicitante) as CONSOLICITANTE, count(*)-count(primer_solicitante) as SINSOLICITANTE\nfrom libro\nwhere año >= 1990\ngroup by año;','media',3,1),(956,62,'Para todas las editoriales, mostrar el nombre de la editorial junto con el número de libros \nque ha publicado y el número de autores que tienen publicado\nal menos un libro con dicha editorial. Nota: Pueden existir libros anónimos.','-- Existen libros sin autores\n\nselect e.nombre, count(distinct l.id) as NUMLIBROS, \ncount(distinct a.autor) as NUMAUTORES\nfrom editorial e left join \nlibro l on e.nombre=l.editorial left join \nautorlibro a on l.id=a.libro\ngroup by  e.nombre;\n\n\n\n','media',4,1),(957,62,'Para todas las editoriales, mostrar el nombre de la editorial \njunto con el número de libros que ha publicado desde el 2005, y el precio y el peso \nde un lote con un ejemplar de cada uno de sus libros. \n','select e.nombre, count(l.id) as NUMLIBROS, coalesce(sum(precio),0) as PRECIOLOTE, \n coalesce(sum(peso),0) as PESOLOTE \nfrom editorial e left join libro l on e.nombre=l.editorial and año >=2005\ngroup by  e.nombre;','media',4,1),(958,76,'Obtener el identificador y el título de los libros que hayan sido prestados dos o más veces y tengan dos o más autores.','select l.id, l.titulo\nfrom libro l join prestamo p on l.id=p.libro\ngroup by  l.id, l.titulo\nhaving count(*)>=2\nintersect\nselect l.id, l.titulo\nfrom libro l join autorlibro a on l.id=a.libro\ngroup by  l.id, l.titulo\nhaving count(*)>=2','media',4,1),(959,76,'Obtener el nombre de las editoriales con más de 3000 páginas entre el total de sus libros editados\ny menos de 20 ejemplares solicitados a partir del 2004.','select editorial\nfrom libro l \ngroup by  editorial\nhaving sum(paginas)>3000\nintersect\nselect l.editorial\nfrom libro l join ejemplar e on l.id=e.libro\nwhere year(fecha_compra)>=2004\ngroup by  l.editorial\nhaving count(*)<20','media',4,1),(960,61,'Obtener la diferencia entre el salario medio de los hombres y las mujeres y la diferencia entre el número de jefes y de jefas en la empresa.','select avg(SALARIO)- (select avg(salario) from empleado eM where sexo = \'M\' ) as \'Salario medio hombres - salario medio mujeres\'\n  , (select count(distinct j.nss) from empleado e join empleado j on e.jefe=j.nss where j.sexo=\'V\') -\n    (select count(distinct j.nss) from empleado e join empleado j on e.jefe=j.nss where j.sexo=\'M\') as \'Jefes hombres - jefes mujeres\'\nfrom empleado eH\nwhere sexo = \'V\';','media',7,1),(961,62,'Obtener todos los datos de los ejemplares que no se hayan prestado nunca (utiliza una subconsulta).','select *\nfrom ejemplar\nwhere (libro, ejemplar) not in\n     (select libro, ejemplar\n       from prestamo);','facil',7,1),(962,62,'Obtener todos los datos de los ejemplares que no se hayan prestado nunca (no utilices subconsultas).','select e.*\nfrom ejemplar e left join prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar\nwhere p.libro is null;','facil',7,1),(963,76,'Obtener el nombre de las editoriales con 4 o más libros publicados en la década de los 80 pero que no tengan 5 o más libros publicados en la década de los 90.\n','select editorial\nfrom libro l \nwhere año between 1980 and 1989\ngroup by  editorial\nhaving count(*)>=4\nexcept\nselect editorial\nfrom libro l \nwhere año between 1990 and 1999\ngroup by  editorial\nhaving count(*)>=5','media',4,1),(964,61,'Si denominamos nivel 1 aquel nivel jerárquico al que pertenece el director de la empresa, obtener el número de empleados del nivel 2, los de nivel 3 e indicar si hay más niveles a partir del nivel 3. \nTener en cuenta que un empleado que pertenece a un nivel donde hay jefes podría no ser jefe de ningún empleado.','select count(distinct e2.nss)  as \'Empleados nivel 2\', \n       count(distinct e3.nss)  as \'Empleados nivel 3\', \n       case \n	       when count(e4.nss)=0 then \'No hay más niveles\' \n		   else \'Hay más niveles\' \n	    end as \'Niveles>3\'\nfrom empleado e1 left join \n     empleado e2 on e2.jefe = e1.nss left join \n	 empleado e3 on e3.jefe = e2.nss left join \n	 empleado e4 on e4.jefe = e3.nss\nwhere e1.jefe is null\n;','dificil',4,1),(965,61,'Nombre y apellidos de los empleados cuyos jefes son directores del departamento de los proyectos en los que trabajan','select distinct e.nombre, e.apellidos\nfrom trabaja t\njoin proyecto p on t.proyecto=p.numero\njoin departamento d on p.depto=d.numero\njoin empleado e on t.empleado=e.nss and d.director=e.jefe','media',2,1),(966,79,'Nombre y apellidos de los empleados que dedican 5 o más horas a todos los proyectos de los departamentos con 3 empleados. Nota: Se propone utilizar una respuesta que incluya un except.\n','select e.Nombre, e.Apellidos\nfrom empleado e\nwhere not exists\n  (select p.numero\n   from proyecto p\n   where p.Depto in (select e1.Depto\n                    from  empleado e1\n                    group by e1.Depto\n                    having count(e1.NSS)=3)\n   except\n   select t.Proyecto\n   from  trabaja t\n   where  t.Empleado=e.NSS\n   and t.horas>=5);','dificil',8,1),(967,61,'Nombre y apellidos de los jefes que tienen a su cargo tanto hombres como mujeres de modo que los empleados a su cargo han trabajado entre todos más de 30 horas en el proyecto 1.','select j.nombre, j.apellidos\nfrom empleado e\n     join empleado j on j.nss=e.jefe\ngroup by e.jefe\nhaving count(distinct e.sexo)=2 and\n  exists (\n      select t.empleado\n      from trabaja t\n      join empleado e1 on t.empleado=e1.nss\n      group by t.empleado, t.proyecto, e1.jefe\n      having sum(horas)>30 and t.proyecto=1 and e1.jefe=e.jefe\n  );','dificil',8,1),(968,62,'Mostrar el código, el nombre y apellidos de los lectores (separados por un blanco) y el código y nombre de las bibliotecas cercanas considerando que un lector está cercano a una biblioteca si los dos primeros dígitos de su número de teléfono coinciden con los dos primeros dígitos del teléfono de la biblioteca. \nNota: Usar la función concat.','select Le.id as \'CodigoLector\', concat(Le.nombre,\' \',Le.apellidos) as \'Lector\',\nB.id as \'CodigoBiblioteca\', B.nombre as \'Biblioteca\'\nfrom lector Le join biblioteca B on  left(Le.tfno,2)= left(B.tfno,2)\norder by Le.id, B.id','facil',2,1),(969,61,'Seleccionar el nombre y los apellidos de los empleados que tengan entre sus apellidos las palabras García o Gomez y sean varones (\'V\'), o las palabras Suárez o Santos y sean mujeres (\'M\').','select nombre, apellidos, direccion, sexo\nfrom empleado\nwhere (apellidos like \'%García%\' or apellidos like \'%Gómez%\') and sexo =\'V\'\nor (apellidos like \'%Suárez%\' or apellidos like \'%Santos%\') and sexo =\'M\'','facil',1,1),(970,64,'Identificadores de alumno que tengan alguna asignatura en primera matricula ordenados por su identificador de alumno.','select distinct idalumno\nfrom alumnoasignatura\nwhere numeromatricula=1\norder by 1','facil',1,1),(971,64,'Coste básico y cuatro primeras letras del nombre de las asignaturas de primer curso y  primer cuatrimestre correspondientes a alguna titulación cuyo código acabe en 00.\nAyuda: puedes utilizar la función substr','select substr(nombre,1,4) as \'nombre-4\', costebasico\nfrom asignatura\nwhere curso=1 and cuatrimestre=1 and idtitulacion like \'%00\'','facil',1,0),(972,64,'Inicial del nombre más apellido y dirección de las mujeres de Logroño nacidas antes del 75.\nNota: Utiliza la función concat.','select concat(substring(nombre,1,1), \'. \', apellido) as \'nombre y apellido\',\n       concat(direccioncalle, \' \',direccionnum) as dirección\nfrom persona\nwhere ciudad=\'Logroño\' and not varon and year(fechaNacimiento)<1975','facil',1,1),(973,64,'Identificadores de titulación con alguna asignatura de con coste básico por crédito inferior a 7€ en segundo curso o inferior a 12 y de primer curso ','select distinct idtitulacion\n\nfrom asignatura\n\nwhere (costebasico/creditos <7 and curso=2) or\n      (costebasico/creditos <12 and curso=1)','facil',1,1),(974,64,'Código de las asignaturas cuyo nombre coincide con el nombre de la titulación a la que dicha asignatura pertenece (propuesto por Ángela Casado).','select A.idAsignatura\nfrom asignatura A join titulacion T\non A.idTitulacion = T.idTitulacion\nand A.nombre = T.nombre;','facil',2,1),(975,64,'Nombre, apellido y ciudad de los alumnos ordenados de forma descendente por apellidos y aquellos que tengan el mismo apellido de forma también descendente por nombre, y los que tengan mismo nombre y apellidos de forma ascendente por ciudad.\n(Sugerido por Paula, Nerea y Ruth).','select nombre, apellido, ciudad\nfrom persona P join alumno a on P.dni = a.DNI\norder by apellido desc, nombre desc, ciudad;','facil',2,1),(976,61,'Obtener el nombre, apellidos y salario de los empleados cuyos jefes cobran más de mil euros que ellos.\nMostrar también el salario de sus jefes.','select e.nombre, e.apellidos, e.salario , j.salario as \'salario jefe\'\nfrom empleado e \njoin empleado j on e.jefe=j.nss and e.salario + 1000 < j.salario','facil',2,1),(977,62,'Nombre y apellidos de los lectores que hayan solicitado algún libro (primer solicitante) y que hayan tomado en préstamo uno de sus ejemplares más de 3 años después de comprarlo (haciendo resta de años). Añadir a la solución la fecha de compra del ejemplar en cuestión y la fecha en la que lo tomó en préstamo el lector.','select distinct le.nombre, le.apellidos, e.fecha_compra, p.fecha_prestado\nfrom lector as le join\n     libro as lb on le.id=lb.primer_solicitante join\n	 ejemplar as e on lb.id=e.libro join\n	 prestamo as p on e.libro=p.libro and e.ejemplar=p.ejemplar and p.lector=le.id\nwhere year(p.fecha_prestado)-year(e.fecha_compra)>3','media',2,1),(978,62,'Nombre y apellido de los autores que han escrito algún libro con otro autor junto al nombre de las bibliotecas con alguno de estos ejemplares de autoría compartida','select distinct a.nombre, a.apellidos, b.nombre\nfrom autorlibro as al join\n     autorlibro as al2 on al.autor<>al2.autor and al.libro=al2.libro join\n	 autor as a on a.id=al.autor join\n	 ejemplar as e on e.libro=al.libro join\n	 biblioteca as b on e.biblioteca=b.id','media',2,1),(980,62,'Nombres de bibliotecas que hayan tenido prestado algún ejemplar durante más de 20 días junto al nombre y apellido de los lectores que los tuvieron. Sólo se considerarán en el resultado ejemplares ya devueltos.','select distinct b.nombre, l.nombre, l.apellidos\nfrom prestamo p join\n     ejemplar e on p.libro=e.libro and p.ejemplar=e.ejemplar join\n	 biblioteca b on e.biblioteca=b.id join\n	 lector l on p.lector=l.id\nwhere datediff(p.fecha_devuelto,p.fecha_prestado) > 20\n','media',2,1),(981,58,'Identificador de proveedores que tengan alguna venta en Pamplona de más de 5 euros y más de 20 euros en el total de ventas de esa misma ciudad. Añadir a las columnas del resultado el número de artículos diferentes vendidos en Pamplona.','select  a.ident_prov, count(distinct v.ident_artic) as \'Total articulos\'\nfrom venta v join\n     articulo a on v.ident_artic=a.ident_artic join\n	 tienda t on v.ident_tiend=t.ident_tiend\nwhere t.ciud=\'Pamplona\'\ngroup by a.ident_prov\nhaving max(prec_total)>5 and sum(prec_total)>20\n','media',3,1),(982,64,'DNI, nombre y apellido de los alumnos que pertenezcan a la titulación de matemáticas \ncuyo día y mes de nacimiento coincida con el día y mes de nacimiento de alguno de sus profesores. (Sugerido por Iván Cagide.)','select P1.dni as \'dni\', P1.apellido as\n\'apellido\', P1.nombre as \'nombre\'\nfrom alumnoasignatura as AA join\nasignatura as A on\nAA.idAsignatura=A.idAsignatura join\ntitulacion as T on\nA.idTitulacion=T.idTitulacion join\nalumno as AL on AA.idalumno=AL.idalumno\njoin profesor as PR on A.idProfesor=PR.idprofesor join\npersona as P1 on AL.dni=P1.dni join\npersona as P2 on PR.dni=P2.dni AND month(P1.fechaNacimiento)=month(P2.fechaNacimiento)\nAND day(P1.fechaNacimiento)=day(P2.fechaNacimiento)\nwhere T.nombre=\'Matematicas\' ','media',2,1),(983,61,'Nombre de los empleados que están trabajando en un departamento de Zaragoza \ny cuyo director (de departamento) es más viejo que ellos. (Sugerido por Iván Cagide.)','select  E2.nombre as \'nombre\'\nfrom localidadesdepto as LD join\ndepartamento as D on LD.depto=D.numero join\nempleado as E1 on D.director=E1.NSS join\nempleado as E2 on D.numero=E2.depto AND E1.fechaNcto<E2.fechaNcto\nwhere LD.localidad=\'Zaragoza\'','facil',2,1),(984,61,'Mostrar el nombre, apellidos y edad de los empleados que tengan algún hijo o hija que se lleven entre ellos 25 o más años, y entre el empleado y su esposa o esposo se lleven entre ellos 2 o más años. (Sugerido por Nerea Miguel.) Ayuda: Para calcular la edad el ejercicio usa truncate(datediff(current_date(),E.fechaNcto)/365,0)','Select E.nombre, E.apellidos,truncate(datediff(current_date(),E.fechaNcto)/365,0) as edad\nfrom empleado as E join\n           familiar as F on E.NSS=F.empleado  join\n           familiar as F1 on E.NSS=F1.empleado \nWhere (F.parentesco=\'hijo\' OR F.parentesco=\'hija\')\nand(F1.parentesco=\'esposa\' OR F1.parentesco=\'esposo\') AND  \n           truncate(datediff(current_date(),E.fechaNcto)/365,0)-25>=\n           truncate(datediff(current_date(),F.fechaNcto)/365,0) AND      \n           truncate(datediff(current_date(),E.fechaNcto)/365,0)-2>=\n                   truncate(datediff(current_date(),F1.fechaNcto)/365,0)\n\n','media',2,1),(985,62,'Identificador y título de los libros de la editorial \'Galera\' que tienen ejemplares en todas las bibliotecas de Logroño','select l.id, l.titulo\nfrom libro l\nwhere l.editorial=\'Galera\' and\n      NOT EXISTS\n      (select b.id\n	   from biblioteca as b\n	   where b.direccion like \'%Logroño\' and\n	         b.id NOT IN\n	         (select e.biblioteca\n			  from ejemplar e\n			  where e.libro=l.id -- CORRELACIÓN\n			 )\n	   )','dificil',8,1),(986,62,'Identificador, nombre y apellidos de los lectores de Lardero que han tomado ejemplares en préstamo de todas las bibliotecas de Logroño','select l.id, l.nombre, l.apellidos\nfrom lector l\nwhere l.direccion like \'%Lardero\' and\n      NOT EXISTS\n      (select b.id\n	   from biblioteca b\n	   where b.direccion like \'%Logroño\' and\n	         b.id NOT IN \n	         (select e.biblioteca\n			  from ejemplar e join\n			       prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar\n			  where p.lector=l.id -- CORRELACIÓN\n			 )\n	  )','dificil',8,1),(987,58,'Para cada color de artículo con ventas, mostrar el color, el  código de tienda  y las unidades vendidas (cant_artics) correspondientes a la venta con mayor cantidad de unidades vendidas de artículos de ese color (o ventas si tienen la misma cantidad máxima más de una venta). Ordena el resultado por color.','select a.color, v.ident_tiend, v.cant_artics\nfrom venta v join \n     articulo a on v.ident_artic = a.ident_artic\nwhere v.cant_artics >= all \n      ( select v1.cant_artics \n	    from venta v1 join \n	         articulo a1 on v1.ident_artic = a1.ident_artic\n	    where a1.color=a.color #Correlación\n       )\norder by a.color\n','media',8,1),(988,62,'Identificador y título de los libros que se hayan prestado 10 o más veces  y que tienen ejemplares en todas las bibliotecas de Logroño.','select l.id, l.titulo\nfrom libro l join prestamo p on l.id = p.libro\nwhere     NOT EXISTS\n      (select b.id\n	   from biblioteca as b\n	   where b.direccion like \'%Logroño\' and\n	         b.id NOT IN\n	         (select e.biblioteca\n			  from ejemplar e\n			  where e.libro=l.id -- CORRELACIÓN\n			 )\n	   )\ngroup by l.id, l.titulo\nhaving count(*)>=10','dificil',8,1),(989,79,'Nombre y apellidos de los jefes que tienen a su cargo tanto hombre como mujeres, de modo que esos hombres y mujeres han trabajado más de 2 horas en el proyecto 2.','/* select distinct j.nombre, j.apellidos\nfrom empleado e join \n	 empleado j on j.nss=e.jefe join\n	 trabaja t on e.nss=t.empleado\n	 where e.sexo=\'V\' and t.horas>2 and t.proyecto=2\n	 and j.nss in (select j.nss\n				from empleado e join \n			         empleado j on j.nss=e.jefe  join\n	 				trabaja t on e.nss=t.empleado\n				where e.sexo=\'M\' \n				and t.horas>2 and t.proyecto=2)\n;*/\n\n(select  j.nombre, j.apellidos\nfrom empleado e join \n	 empleado j on j.nss=e.jefe join\n	 trabaja t on e.nss=t.empleado\n	 where e.sexo=\'V\' and t.horas>2 and t.proyecto=2)\nintersect\n(select  j.nombre, j.apellidos\nfrom empleado e join \n	 empleado j on j.nss=e.jefe join\n	 trabaja t on e.nss=t.empleado\n	 where e.sexo=\'M\' and t.horas>2 and t.proyecto=2);','media',4,1),(990,61,'Nombre y apellidos de los jefes que tienen a su cargo tanto hombres como mujeres de modo que esos jefes han trabajado más de 10 horas en el proyecto 20. Nota: MySQL no admite INTERSECT.','select e.nombre, e.apellidos\nfrom empleado e join trabaja t on t.empleado=e.NSS\nwhere  t.proyecto=20 and t.horas>10  and  e.NSS in\n	(select e1.jefe\n	from empleado e1 join empleado e2 on e1.jefe=e2.jefe\n	 where e1.sexo=\'V\' and e2.sexo=\'M\')\n\n	\n/* select E.nombre, E.apellidos\nfrom empleado as E join\nempleado as E1 on E.NSS=E1.jefe join\nempleado as E2 on E.NSS=E2.jefe join\ntrabaja as T on T.empleado=E.NSS\nwhere T.proyecto=20 and E1.sexo=\'V\' and E2.sexo=\'M\' and T.horas>10 */','media',7,1),(991,79,'Nombre y apellidos de los jefes que tienen a su cargo tanto hombres como mujeres de modo que esos jefes han trabajado más de 10 horas en el proyecto 20. ','(select e.nombre, e.apellidos\nfrom empleado as e join\nempleado as e2 on e.NSS=e2.jefe\nwhere e2.sexo=\'V\')\nINTERSECT\n(select e.nombre, e.apellidos\nfrom empleado as e join\nempleado as e2 on e.NSS=e2.jefe\nwhere e2.sexo=\'M\')\nINTERSECT\n(select e.nombre, e.apellidos\nfrom empleado as e join\ntrabaja as t on e.NSS=t.empleado\nwhere t.proyecto=20 AND horas>10)','media',4,1),(992,76,'Título, editorial, fecha de compra e identificador de libro de los libros para los que se compró un ejemplar el mismo día que un ejemplar de otro libro distinto. Incluir también en el resultado el identificador de este segundo libro. Evitar la repetición de parejas de libro con idéntica fecha de compra, incluida la de un libro consigo mismo, ordenando por los identificadores de libro y por la fecha de compra.','select l1.titulo, l1.editorial, e1.fecha_compra, l1.id, e2.libro\nfrom libro as l1 join\n     ejemplar as e1 on l1.id=e1.libro join\n	 ejemplar as e2 on e1.fecha_compra=e2.fecha_compra and e1.libro < e2.libro\norder by l1.id, e2.libro, e1.fecha_compra','media',2,0),(993,62,'Para todas las editoriales, mostrar el nombre de la editorial junto con el número de autores que tienen publicado al menos un libro en esa editorial y el número de libros en dicha editorial de esos autores. Nota: Obtener también las editoriales con cero autores.','select e.nombre, count(distinct a.autor) as NUMAUTORES,\ncount(distinct l.id) as NUMLIBROS\nfrom editorial e left join \n(libro l join autorlibro a on l.id=a.libro) on e.nombre=l.editorial\ngroup by  e.nombre;\n','media',4,1),(994,64,'Dni de los alumnos que viven en Madrid que se hayan matriculado en más créditos de entre los alumnos que también bien en Madrid.\n','select P.dni\nfrom persona P join \n    alumno A on P.dni=A.dni join \n    alumnoasignatura AA on A.idalumno = AA.idAlumno join\n    asignatura Asig on AA.idasignatura = Asig.idasignatura \nwhere ciudad=\'Madrid\'\ngroup by P.dni\nhaving sum(creditos) >= all (select sum(creditos)	\n	                        From persona P join \n		alumno A on P.dni=A.dni join \n		alumnoasignatura AA on A.idalumno =AA.idAlumno join\n		asignatura Asig on AA.idasignatura = Asig.idasignatura \n		where ciudad=\'Madrid\'\n		group by P.dni)\n\n','dificil',7,1),(995,64,'Dni de los alumnos que se hayan matriculado en más créditos de entre los alumnos que viven en su ciudad. Mostrar también la ciudad.','select P.dni, ciudad\nfrom persona P join \n    alumno A on P.dni=A.dni join \n    alumnoasignatura AA on A.idalumno = AA.idAlumno join\n    asignatura Asig on AA.idasignatura = Asig.idasignatura \ngroup by P.dni,ciudad\nhaving sum(creditos) >= all (select sum(creditos)	\n	                        From persona P1 join \n							alumno A on P1.dni=A.dni join \n							alumnoasignatura AA on A.idalumno =AA.idAlumno join\n							asignatura Asig on AA.idasignatura = Asig.idasignatura \n							where P.ciudad=P1.ciudad\n							group by P1.dni)\n','dificil',8,1),(996,61,'For each employee, obtain his/her social security number (SSN), salary, the total salary of his/her subordinates  and the number of subordinates of the employee.','select  je.nss \'SSN\', je.salario \'Salary\', coalesce(sum(e.salario),0) as \'Salary of subordinates\',\n        count(e.nss) as \'Number of subordinates\'\nfrom empleado je left outer join empleado e on je.nss= e.jefe\ngroup by je.nss, je.salario;','media',2,0),(997,58,'Nombre y apellido de los clientes que han comprado todos los artículos que contenga la palabra bolígrafo en su nombre y sea de color azul.','select c.nombr_client, c.apell1\nfrom cliente c\nwhere NOT EXISTS \n	 (  select a.ident_artic\n		from articulo a\n	    where a.nombr_artic like \'%bolígrafo%\' and a.color=\'azul\' and\n	          a.ident_artic NOT IN\n	          ( select v.ident_artic\n	            from venta v\n	            where v.ident_client=c.ident_client -- correlación\n		      )\n	  )','dificil',8,1),(998,58,'Nombre e identificador de los proveedores a los que se ha aplicado en las ventas de sus productos un descuento medio por unidad superior en las tiendas de Barcelona (en todas las tiendas de Barcelona en conjunto) que en alguna de las ciudades con una sola tienda. (Descuento por unidad: prec_vent  - prec_total / cant_artics). ','select P.nombr_prov, P.ident_prov\nfrom proveedor P join\n     articulo A on P.ident_prov=A.ident_prov join\n	 venta V on A.ident_artic=V.ident_artic join\n	 tienda T on V.ident_tiend=T.ident_tiend\nwhere T.ciud=\'Barcelona\'\ngroup by P.nombr_prov, P.ident_prov\nhaving AVG(A.prec_vent-V.prec_total/V.cant_artics)>any\n       (select AVG(a.prec_vent-v.prec_total/v.cant_artics)\n        from venta v join\n             tienda t on v.ident_tiend=t.ident_tiend join\n	         articulo a on v.ident_artic=a.ident_artic\n        group by t.ciud\n        having count(distinct v.ident_tiend)=1\n       )\n','dificil',8,1),(999,58,'Identificador, nombre y apellidos de los clientes que han comprado en todas las tiendas con gerente Domínguez','select c.ident_client, c.nombr_client, c.apell1\nfrom cliente c\nwhere NOT EXISTS\n      ( select t.ident_tiend\n	    from tienda t\n	    where t.nombr_gerent like \'Domínguez%\' and \n	          t.ident_tiend NOT IN\n	          (select v.ident_tiend\n			   from venta v\n			   where v.ident_client=c.ident_client #correlación\n		       )\n	  )','dificil',8,1),(1000,58,'Identificador y ciudad de las tiendas que hayan vendido artículos a clientes procedentes de más ciudades diferentes','select t.ident_tiend, t.ciud, count(distinct c.ciud)\nfrom tienda t join\n     venta v on t.ident_tiend=v.ident_tiend join\n	 cliente c on v.ident_client=c.ident_client\ngroup by t.ident_tiend, t.ciud\nhaving count(distinct c.ciud)>=all\n       ( select count(distinct c1.ciud)\n		 from venta v1 join\n		      cliente c1 on v1.ident_client=c1.ident_client\n         group by v1.ident_tiend\n	   )','dificil',7,1),(1001,58,'Nombre e identificador de artículos vendidos en alguna tienda de Lyon para los que se obtiene un ganancia por unidad vendida (prec_vent-prec_compr) superior al precio de compra algún artículo del mismo color vendido en la ciudad de Madrid','select distinct a.nombr_artic, a.ident_artic \nfrom articulo a join\n     venta v on a.ident_artic=v.ident_artic join\n	 tienda t on v.ident_tiend=t.ident_tiend\nwhere t.ciud=\'Lyon\' and a.prec_vent-a.prec_compr >any\n      (select a2.prec_compr\n	   from articulo a2 join\n	        venta v2 on a2.ident_artic=v2.ident_artic join\n	        tienda t2 on v2.ident_tiend=t2.ident_tiend\n	   where t2.ciud=\'Madrid\' and a2.color=a.color #correlación\n	   )','dificil',8,1),(1002,62,'Para cada libro  de los años ochenta (80-89) con precio no nulo de editoriales de Barcelona (la ciudad está al final de la dirección) obtener el nombre y dirección de la editorial, el año y precio del libro y el nombre y apellidos (en una columna) del primer solicitante de compra.','select	l.editorial, e.direccion, l.titulo as titulo, l.año, l.precio, le.nombre || \' \' || le.apellidos as \'primer solicitante\'\nfrom	libro l join\n        editorial e on l.editorial=e.nombre join\n		lector le on l.primer_solicitante=le.id\nwhere l.año between 1980 and 1989 and e.direccion like \'%Barcelona\' and l.precio is not null\norder by año','facil',2,0),(1003,62,'Para cada ejemplar tomado en préstamo (sin fecha_devuelto)  por lectores de Anguiano  obtener el identificador del libro y ejemplar, el nombre y apellidos del lector que lo tiene y la fecha en la que debería devolver el libro (quince días después de tomarlo prestado) . \nNota: puedes usar la función adddate(fecha, nº días).','select e.libro, e.ejemplar, l.nombre, l.apellidos, \n	   adddate(p.fecha_prestado,15) as \'fecha devolución\'\nfrom ejemplar e join\n     prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar join\n	 lector l on p.lector=l.id\nwhere p.fecha_devuelto is null and l.direccion like \'%Anguiano\';','facil',2,0),(1004,62,'Nombre y apellidos de los lectores que hayan solicitado comprar algún libro (primer_solicitante) de una editorial y que también hayan tomado en préstamo algún ejemplar de libro de esa misma editorial durante el año 2006 (fecha_prestado). Añadir al resultado la editorial en cuestión.','select distinct lc.nombre || \' \' || lc.apellidos as lector, l.editorial\nfrom libro l_ps join\n     libro l on l_ps.editorial=l.editorial join\n     prestamo p on l.id=p.libro and l_ps.primer_solicitante=p.lector join\n     lector lc on p.lector=lc.id\nwhere year(p.fecha_prestado)=2006','media',2,0),(1005,62,'Todos los posibles emparejamientos entre nombre de editorial y localidad en la que haya alguna editorial (la localidad está al final de la dirección tras una coma y un espacio).\nRestringir el resultado a editoriales cuyo nombre empiece por la letra p.\nOrdena el resultado por editorial y localidad.\nAyuda: puedes usar estas funciones:  locate(\', \', \'abc, d\') da 4 y substring(\'abc, d\' from 6) da \'d\'.\nLas puedes probar como una instrucción SQL con select por delante:  select substring(\'abc, d\' from 6) \n','select distinct e1.nombre as editorial,\n       substring(e2.direccion from locate(\', \', e2.direccion)+2) as localidad\nfrom  editorial e1 cross join\n      editorial e2\nwhere e1.nombre like \'p%\'\norder by 1,2;','media',2,0),(1006,62,'Precio total de todos los ejemplares prestados y sin devolver (sin fecha_devuelto) comprados el año 2007','select sum(l.precio) as \'precio total\'\nfrom libro l join\n     prestamo p on l.id=p.libro join\n	 ejemplar e on p.libro=e.libro and p.ejemplar=e.ejemplar\nwhere p.fecha_devuelto is null and year(e.fecha_compra)=2007','facil',2,0),(1007,62,'Identificador de libro y título de aquellos libros con algún ejemplar en la biblioteca 1 cuyo primer solicitante coincida con el primer solicitante de otro libro distinto con algún ejemplar en otra biblioteca distinta a la 1. Incluye en el resultado el identificador del segundo libro y su título. Evita que la misma pareja de libros aparezca repetida.\n','select distinct e1.libro, l1.titulo, e2.libro, l2.titulo\nfrom libro as l1 join\n     ejemplar as e1 on l1.id=e1.libro join\n	 ejemplar as e2 on e1.libro <> e2.libro join\n	 libro as l2 on e2.libro=l2.id and l1.primer_solicitante=l2.primer_solicitante \nwhere e1.biblioteca=1 and e2.biblioteca<>1','media',2,0),(1008,62,'Identificador y título de libro junto al nombre y localidad de la biblioteca donde encontrarlo, para los libros que sean del mismo autor que el del titulado \'misterio de Damocles\' del año 2007. Ordena el resultado por identificador de libro.\nAyuda: puedes usar estas funciones:  locate(\', \', \'abc, d\') da 4 y substring(\'abc, d\' from 6) da \'d\'.\nLas puedes probar como una instrucción SQL con select por delante:  select substring(\'abc, d\' from 6) ','select distinct al2.libro, l2.titulo, b2.nombre as biblioteca, \n       substring(b2.direccion from locate(\',\', b2.direccion)+2) as localidad\nfrom autorlibro al join\n     libro l1 on al.libro=l1.id join\n	 autorlibro al2 on al.autor=al2.autor join\n	 libro l2 on al2.libro=l2.id join\n	 ejemplar e2 on l2.id=e2.libro join\n	 biblioteca b2 on e2.biblioteca=b2.id\nwhere l1.titulo=\'Misterio de Damocles\' and l1.año=2007\norder by 1;','media',2,0),(1011,76,'sqlserver\nApellidos y nombre de los autores (en una columna llamada \"nombre completo\" separados por , y espacio) junto al título y precio de cada uno de sus libros con precio editados desde el año 2002 (libro.año) ordenados por apellidos y nombre de autor.\nAyuda: puedes usar rtrim para eliminar espacios al final de un string ','select rtrim(a.apellidos) + \', \' + rtrim(a.nombre)  as \'nombre completo\',\n       l.titulo as titulo,\n       l.precio\nfrom  libro l join\n      autorlibro al on l.id=al.libro join\n      autor a on al.autor=a.id\nwhere l.precio is not null and l.año>=2002\norder by 1;\n','media',2,1),(1012,76,'sqlserver\nPara cada ejemplar con más de 870 páginas de la biblioteca con identificador 4, obtener el título y la fecha de compra junto al identificador de cada uno de sus autores (o sea que si el ejemplar tiene 3 autores se obtendrán 3 filas).','select l.titulo as titulo,\n       e.fecha_compra as \'fecha de compra\',\n       al.autor as autor\nfrom  libro l join\n      autorlibro al on l.id=al.libro join\n      ejemplar e on l.id=e.libro\nwhere e.biblioteca=4 and l.paginas>870 ;','facil',2,0),(1013,76,'sqlserver\nPara cada ejemplar actualmente en préstamo (sin fecha_devuelto) mostrar el título del libro, los apellidos del primer solicitante de compra (primer_solicitante) de ese libro, la fecha en la que se sacó de la biblioteca (fecha_prestado), el número de ejemplar de ese volúmen del libro y el telefono del lector que lo tiene.\nMostrar las filas ordenadas por fecha de préstamo.','\nselect lb.titulo as titulo,\n       l2.apellidos as \"primer solicitante\",\n       p.fecha_prestado as \"fecha préstamo\",\n       p.ejemplar as ejem,\n       l1.tfno as \"tfno\"\nfrom lector l1 join\n     prestamo p on l1.id=p.lector join\n     libro lb on p.libro=lb.id join\n     lector l2 on lb.primer_solicitante=l2.id\nwhere p.fecha_devuelto is null\norder by p.fecha_prestado;','facil',2,0),(1014,76,'sqlserver\nCalcular el número de libros diferentes asignados a bibliotecas de Villamediana.\nLa localidad es la última palabra de la dirección tras coma y  espacio.','select	count(distinct libro) as \"Ejemplares de Villamediana\"\nfrom 	biblioteca b join\n        ejemplar e on b.id=e.biblioteca\nwhere b.direccion like \'%, Villamediana\';\n','facil',2,0),(1015,76,'sqlserver\nIdentificador de los lectores que tengan o hayan tenido en préstamo varias veces el mismo libro, junto a cada año de edición correspondiente a estos libros (sin repetición), para libros con precio superior a 70€.\n','select distinct p1.lector, l.año\nfrom  libro l join\n      prestamo p1 on l.id=p1.libro join\n      prestamo p2 on l.id=p2.libro and p1.lector=p2.lector and\n                      (p1.ejemplar<>p2.ejemplar or\n                       p1.fecha_prestado<>p2.fecha_prestado)\nwhere l.precio>70;','media',2,0),(1016,76,'sqlserver\nIdentificador de los lectores que tengan actualmente en préstamo (sin fecha_devuelto) varios ejemplares tomados en préstamo el mismo día (fecha_prestado), junto a la fecha de préstamo. Ordena el resultado por el identificador del lector.','select distinct p1.lector, p1.fecha_prestado as fecha_prestado\nfrom prestamo p1 join\n     prestamo p2 on p1.lector=p2.lector and p1.fecha_prestado=p2.fecha_prestado and\n                    (p1.ejemplar<>p2.ejemplar or p1.libro<>p2.libro)\nwhere p1.fecha_devuelto is null and p2.fecha_devuelto is null\norder by 1;','media',2,0),(1017,76,'sqlserver\nTitulo de los libros con ejemplares comprados el mismo día que alguno de los ejemplares de \"Mañana de las amapolas\", junto al número de libro y de ejemplar de este último libro (de \"Mañana de las amapolas\") y la fecha de compra. Descartar de la solución la compra de ejemplares con el título mencionado salvo si se compraron varios ejemplares el mismo día.','select l.titulo, ema.libro, ema.ejemplar, ema.fecha_compra\nfrom libro l join\n     ejemplar e on l.id=e.libro join\n     ejemplar ema on e.fecha_compra=ema.fecha_compra and\n                     (e.libro<>ema.libro or e.ejemplar<>ema.ejemplar) join\n     libro ma on ema.libro=ma.id\nwhere ma.titulo=\'Mañana de las amapolas\';','media',2,0),(1018,61,'Calcular el número de empleados distintos que trabajan en los proyectos 10, 2 y 3 (en los tres proyectos a la vez), junto al máximo y el valor medio de las horas trabajadas en dichos proyectos. (Sugerido por Rubén Escobedo.)','SELECT count(distinct t1.empleado) \'Empleados\',max(t1.horas) \'Máximo horas\', \navg(t1.horas) \'Media de horas\'\nFROM trabaja t1 join \ntrabaja t2 on t1.empleado=t2.empleado join \ntrabaja t3 on t2.empleado=t3.empleado\nwhere t1.proyecto=2 and t2.proyecto=3 and t3.proyecto=10\n;','facil',2,1),(1019,61,'Calcular el NSS, nombre y apellidos de los empleados que trabajan en los proyectos \'ProductoY\', \'Informatización\' y \'Reorganización\' (en los tres proyectos a la vez).','SELECT e.NSS, e.nombre, e.apellidos\nFROM empleado e join\ntrabaja t1 on e.NSS = t1.empleado join\nproyecto p1 on t1.proyecto=p1.numero join\ntrabaja t2 on t1.empleado=t2.empleado join \nproyecto p2 on t2.proyecto=p2.numero join\ntrabaja t3 on t2.empleado=t3.empleado join\nproyecto p3 on t3.proyecto=p3.numero \nWHERE p1.nombre=\'ProductoY\' and p2.nombre=\'Informatización\'\nand p3.nombre=\'Reorganización\'','media',2,1),(1020,64,'Nombre de asignaturas de titulaciones que no sean Matemáticas con menos créditos que alguna de las asignaturas de Matemáticas.','select distinct a.nombre\nfrom titulacion tm join\n       asignatura m on tm.idTitulacion=m.idTitulacion join\n       asignatura a on a.creditos< m.creditos join\n	   titulacion ta on ta.idTitulacion=a.idTitulacion\nwhere tm.nombre=\'Matemáticas\' and ta.nombre<>\'Matemáticas\';\n\n\n','media',2,1),(1021,64,'Nombre de asignaturas de titulaciones de código diferente a \'150000\'  con menos créditos que todas de las asignaturas de la titulación con código \'150000\'. No usar subconsultas. (Sugerida por Iñaki Zuazola.)','select a.nombre\nfrom   asignatura a cross join\n       asignatura m \nwhere a.idtitulacion<>\'150000\' and m.idtitulacion=\'150000\'\ngroup by a.nombre, a.creditos\nhaving a.creditos< min(m.creditos);\n\n','dificil',3,1),(1022,64,'Nombre de asignaturas (y de la titulación a la que pertenece) de titulaciones de diferentes a Derecho con menos créditos que todas de las asignaturas de la titulación  de Derecho. No usar subconsultas.','select a.nombre, t.nombre\nfrom   titulacion t join \n       asignatura a on t.idtitulacion = a.idtitulacion\n	   cross join\n       asignatura d join\n	   titulacion td on d.idtitulacion = td.idtitulacion\nwhere t.nombre<>\'Derecho\' and td.nombre=\'Derecho\'\ngroup by a.nombre, t.nombre, a.creditos\nhaving a.creditos< min(d.creditos);','dificil',3,1),(1023,58,'Número de ventas realizadas para cada mes entre Enero y Junio. La columna que corresponde al mes se debe llamar \'mes\' y la columna correspondiente al número de ventas se debe llamar \'número de ventas\'.  Puedes usar la función month.','select month(fech_vent) as mes, count(*) as \'número de ventas\'\nfrom venta\nwhere month(fech_vent) between 1 and 6\ngroup by month(fech_vent)','facil',3,1),(1024,58,'Mostrar el código de cliente y el número de tiendas en las que ha realizado una compra. ','select ident_client, count(distinct ident_tiend) as \'Número tiendas\'\nfrom venta v \ngroup by ident_client\n','facil',3,1),(1025,58,'Cuántas compras ha realizado por mes cada cliente.  Devolver el identificador del cliente, el mes y el total.','select ident_client, month(fech_vent) as mes, count(*) as \'Total compras\'\nfrom venta\ngroup by ident_client, month(fech_vent)','facil',3,1),(1026,58,'Para cada nombre de pila de cliente y gerente  calcular el número de personas con ese nombre de pila, entendiendo que los clientes y los gerentes son personas diferentes. Hay que tener presente que los nombres de pila de los clientes están en el campo nombr_client y los de los gerentes de tienda están detrás de la coma y un blanco en el campo nombr_gerent. Para extraer el nombre de pila de un gerente puedes utilizar substring(nombr_gerent, locate(\', \',nombr_gerent)+2). Recuerda que en mysql no hay full join.','select coalesce(substring(nombr_gerent, locate(\', \',nombr_gerent)+2), c.nombr_client),\n       count(distinct substring(nombr_gerent, locate(\', \',nombr_gerent)+2) ) +\n	   count(distinct c.nombr_client)\nfrom tienda t left join\n     cliente c on substring(t.nombr_gerent, locate(\', \',t.nombr_gerent)+2)=c.nombr_client\ngroup by coalesce(substring(nombr_gerent, locate(\', \',nombr_gerent)+2), c.nombr_client)\nunion\nselect coalesce(substring(nombr_gerent, locate(\', \',nombr_gerent)+2), c.nombr_client),\n       count(distinct substring(nombr_gerent, locate(\', \',nombr_gerent)+2) ) +\n	   count(distinct c.nombr_client)\nfrom tienda t right join\n     cliente c on substring(t.nombr_gerent, locate(\', \',t.nombr_gerent)+2)=c.nombr_client\nwhere t.nombr_gerent is null\ngroup by coalesce(substring(nombr_gerent, locate(\', \',nombr_gerent)+2), c.nombr_client)','dificil',4,0),(1027,62,'Para todas las editoriales que hayan publicado libros en 2005 o posteriormente, mostrar el nombre de la editorial \njunto con el número de libros que ha publicado, y el precio y el peso \nde un lote con un ejemplar de cada uno de sus libros.  (Inspirado por Sergio Leiva.)','select e.nombre, count(l.id) as NUMLIBROS, coalesce(sum(precio),0) as PRECIOLOTE, \n coalesce(sum(peso),0) as PESOLOTE \nfrom editorial e left join libro l on e.nombre=l.editorial\nwhere año >=2005\ngroup by  e.nombre;','facil',4,1),(1028,77,'Listado de ciudades en las que vive algún profesor pero ningún alumno.','SELECT ciudad\nFROM persona p join profesor pr on pr.dni=p.dni\nEXCEPT\nSELECT ciudad\nFROM persona p join alumno a on a.dni=p.dni                                         \n-- Propuesto por Carlos como adaptación del ejercico de la sesión 7','facil',4,1),(1029,77,'Identificadores de los profesores de Logroño  sin asignaturas en el primer cuatrimestre.','\nselect pr.idprofesor\nfrom profesor pr join persona p on p.dni = pr.dni\nwhere p.ciudad = \'Logroño\'\nEXCEPT\nselect pr.idprofesor\nfrom asignatura a join profesor pr on a.idprofesor=pr.idprofesor \n					join persona p on pr.dni = p.dni\nwhere a.cuatrimestre=1\n\n/*\nSe puede hacer más facil sin EXCEPT\n\nselect pr.idprofesor\nfrom asignatura a join profesor pr on a.idprofesor=pr.idprofesor \n					join persona p on pr.dni = p.dni\nwhere a.cuatrimestre<>1 and p.ciudad =\'Logroño\'\n\nFrancisco (2020/08/15)\nCreo que la solución anterior no es correcta. Podría incluir profes con alguna \ntupla correspondiente a asig de 2º cuatrim, pero que tenga alguna otra tupla de\nasig de 1er cuatrim (lo que debería invalidar a ese profesor)\n\nYo lo plantearía en términos de exists. Para nada creo que esta consulta \nsea \"Fácil\"\n\nselect idprofesor\nfrom (profesor P join persona on P.dni = persona.dni)\nwhere ciudad like \'Logroño\'\n      and not exists (select *\n					  from asignatura\n					  where cuatrimestre = 1 and idProfesor = P.idProfesor)\n*/','facil',4,1),(1030,61,'Número y nombre de proyecto de aquellos proyectos en los que han trabajado todos los empleados del departamento al que está asignado el proyecto.','select p.numero, p.nombre\nfrom proyecto p\nwhere not exists\n  (select e.nss\n   from empleado e\n   where e.depto = p.Depto -- correlacion\n    and e.nss not in(\n    select t.empleado\n    from  trabaja t\n    where  t.proyecto=p.numero)); -- correlacion','dificil',9,1),(1031,61,'Número de seguridad social y nombre de empleadas de aquellas empleadas que han trabajado en todos los proyectos asignados al departamento en el que trabaja la empleada.','select e.NSS, e.nombre\nfrom empleado e\nwhere Sexo=\'M\' \nand not exists\n  (select p.numero\n   from proyecto p\n   where e.depto = p.Depto -- correlacion\n    and p.numero not in(\n    select t.proyecto\n    from  trabaja t\n    where  t.empleado =e.NSS)); -- correlacion\n','dificil',9,1),(1032,58,'Identificador de cada tienda en cuya ciudad vivan clientes junto al id del cliente (o clientes, si son varios) al que se le haya aplicado un descuento MAYOR en el conjunto de sus ventas en esa tienda respecto al resto de clientes de esa tienda residentes en la misma ciudad que él.\n(Descuento en una venta = prec_vent * cant_artics - prec_total)','select distinct t1.ident_tiend, c1.ident_client\nfrom  tienda t1 join\n	  cliente c1 on t1.ciud=c1.ciud join\n      venta v1 on c1.ident_client = v1.ident_client and t1.ident_tiend=v1.ident_tiend join\n      articulo a1 on v1.ident_artic=a1.ident_artic\ngroup by t1.ident_tiend, c1.ident_client, c1.ciud\nhaving sum(a1.prec_vent * v1.cant_artics - v1.prec_total) >= all\n      ( select sum(a2.prec_vent * v2.cant_artics - v2.prec_total)\n        from  venta v2 join\n              articulo a2 on v2.ident_artic=a2.ident_artic join\n	          cliente c2 on v2.ident_client=c2.ident_client\n        where v2.ident_tiend=t1.ident_tiend -- CORRELACIÓN\n	   		  and c2.ciud=c1.ciud -- CORRELACIÓN\n	    group by v2.ident_client\n      );','dificil',8,0),(1033,58,'Identificador, ciudad y nombre de gerente de las tiendas junto a la fecha (o fechas) en la que recaudaron más dinero con sus ventas junto al número de artículos diferentes que vendieron ese día','select t.ident_tiend, t.ciud, t.nombr_gerent, v.fech_vent, count(distinct v.ident_artic) as \"artículos_diferentes\"\nfrom tienda t join\n     venta v on t.ident_tiend=v.ident_tiend\ngroup by t.ident_tiend, t.ciud, t.nombr_gerent, v.fech_vent\nhaving sum(v.prec_total) >= all\n         ( select sum(v2.prec_total)\n           from venta v2\n           where v2.ident_tiend=t.ident_tiend -- CORRELACIÓN\n           group by v2.fech_vent\n         );','dificil',8,0),(1034,58,'Identificador de los proveedores que suministran bolígrafos (de cualquier tipo) de todos los colores','select p.ident_prov\nfrom proveedor p\nwhere not exists (select a1.ident_artic\n				  from articulo a1\n				  where a1.nombr_artic like \'%bolígrafo%\' and\n				        a1.color not in (select a2.color\n										 from articulo a2 \n										 where  a2.nombr_artic like \'%bolígrafo%\' and\n										        p.ident_prov = a2.ident_prov));','dificil',8,0),(1035,76,'Para cada biblioteca obtener el título del libro o libros en los que todos los préstamos devueltos de sus ejemplares se han tenido en préstamo durante 15 o más días. Obtener también el mínimo de días que un ejemplar de ese libro ha sido prestado en esa biblioteca. Para calcular el número de días entre dos fechas se puede utilizar la función datediff(day, fecha_inicial, fecha_final)','select b.nombre, l.titulo, min(datediff(day,p.fecha_prestado,p.fecha_devuelto))\nfrom biblioteca b join\n     ejemplar e on b.id=e.biblioteca join\n	 prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar join\n	 libro l on p.libro =l.id\nwhere  p.fecha_devuelto is not null	 \ngroup by b.nombre, l.titulo, b.id, l.id\nhaving \n    not exists\n	(select p1.libro, p1.ejemplar, p1.fecha_prestado\n	 from prestamo p1 join\n	      ejemplar e1 on p1.ejemplar=e1.ejemplar and p1.libro=e1.libro\n	 where p1.fecha_devuelto is not null and\n	       p1.libro=l.id and e1.biblioteca=b.id -- 2 correlaciones\n	 except\n	 select p1.libro, p1.ejemplar, p1.fecha_prestado\n	 from prestamo p1 join\n	      ejemplar e1 on p1.ejemplar=e1.ejemplar and p1.libro=e1.libro\n	 where datediff(day,p1.fecha_prestado,p1.fecha_devuelto)>=15 and\n	 	   p1.fecha_devuelto is not null and\n	       p1.libro=l.id and e1.biblioteca=b.id  -- 2 correlaciones\n	 )','dificil',9,1),(1036,76,'Para cada biblioteca obtener su nombre, el identificador y título de libro que más lectores de la biblioteca lo haya tenido o lo tenga en préstamo (algún ejemplar de esa biblioteca) y el número de ejemplares distintos que se han prestado de ese libro en la biblioteca.','select b.nombre, lb.id, lb.titulo, count(distinct e.ejemplar)\nfrom biblioteca b join\n     ejemplar e on b.id=e.biblioteca join\n	 prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar join\n	 libro lb on lb.id=e.libro\ngroup by b.id, b.nombre, lb.id, lb.titulo\nhaving count(distinct p.lector) >=all\n       ( select count(distinct p1.lector)\n	     from ejemplar e1 join\n              prestamo p1 on e1.libro=p1.libro and e1.ejemplar=p1.ejemplar\n         where e1.biblioteca=b.id -- correlación\n         group by e1.libro\n	   )','dificil',9,1),(1037,76,'Nombre y apellidos de los lectores que han tenido en préstamo todos los libros del autor Zacarías Zapata cada uno de ellos por un periodo global de 7 o más días (entre todos los préstamos del mismo libro) y todos los ejemplares tomados en préstamo de ese autor son de la misma biblioteca.','select l.nombre, l.apellidos\nfrom lector l cross join\n     biblioteca b\nwhere not exists(\n	select lb.id\n	from libro lb join\n	     autorlibro al on lb.id=al.libro join\n		 autor a on a.id=al.autor\n	where a.nombre=\'Zacarías\' and a.apellidos like \'Zapata%\'\n	except\n	select p.libro\n	from prestamo p join\n	     ejemplar e on p.libro=e.libro and p.ejemplar=e.ejemplar\n	where p.lector=l.id -- correlación\n	      and e.biblioteca=b.id -- correlación\n    group by p.libro\n	having sum(datediff(day, fecha_prestado, fecha_devuelto))>=7\n	)','dificil',9,1),(1038,76,'Nombre y apellidos de los lectores que tienen para todos los libros de los que es primer solicitante algún préstamo de más de 15 días (para cada uno de estos libros debe tener un préstamo mayor de 15 días). Por simplicidad no se consideran los préstamos no devueltos en el cálculo de la solución. En la solución sólo queremos que aparezcan lectores que sean primer solicitante de algún libro. Se puede utilizar la función datediff(day, fecha_inicial, fecha_final).','select distinct l.id, l.nombre, l.apellidos\nfrom lector l join\n	   libro lb on l.id=lb.primer_solicitante\nwhere not exists\n	(select lb1.id\n	 from libro lb1\n	 where lb1.primer_solicitante=l.id -- correlación\n	 except\n	 select p1.libro\n	 from prestamo p1\n	 where datediff(day, p1.fecha_prestado, p1.fecha_devuelto)>15 and\n	 	   p1.lector=l.id -- correlación\n	 )\n','dificil',9,1),(1039,61,'Apellidos, nombre, año de nacimiento y localidad de todos los empleados que nacieron en junio y que no viven en Logroño (o no consta). \n\nAyudas: utiliza las funciones month y year para extraer el mes o el año. Si no te funcionase || puedes usar concat.\n','-- Arturo 2019 para sql01_4\nselect concat(apellidos, \', \', nombre) as nombre , \n       year(fechaNcto) as año, \n	   localidad\nfrom empleado \nwhere month(fechaNcto)=6 and \n      (localidad<>\'Logroño\' or localidad is null);\n','facil',1,0),(1040,61,'Calcular la suma de los salarios de los empleados del departamento 5 y contar cuántos de esos empleados son de Logroño o tienen un salario superior a 2000 €. \n\nAyuda: usa la sentencia case dentro de count.','-- Arturo 2019 para sql01_4\nselect sum(salario) as \'salario depto 5\',\n       count(case \n             when salario>2000 or localidad=\'Logroño\' then \'ok\' \n             else null \n             end) as \'logroñeses/+2000\' \nfrom empleado\nwhere depto=5;\n\n/* Emilio 2019. Creo que una alternativa es:\nselect sum(salario) as suma,\n	sum(case when salario>2000 or localidad=\'Logroño\' then 1\n		else 0\n	end ) as salario_logroño\nfrom empleado e\nwhere e.depto=5\n*/','media',1,0),(1041,61,'Obtener toda la información de proyecto, para aquellos proyectos en los que figure en su descripción bi o dm y al mismo tiempo estén asignados a los departamentos 5 o 4 y su descripción comience con un año posterior a 2015. \n\nAyuda: Puedes utilizar substring o left para extraer el año.\n','-- Arturo 2019 para sql01_4\nselect *\nfrom proyecto as p\nwhere (descr like \'%bi%\' or descr like \'%dm%\') and\n    depto in (5,4) and substring(descr,1,4)>2015;','facil',1,0),(1042,61,'Número de proyectos de los departamentos 4 y 5 sin ningún empleado asignado. \nAyuda: usa la sentencia case dentro de count. La tabla trabaja_completo(nss, deptoProy,...) que contiene todos los nss y todos los deptoProy. Un nulo en nss significa que deptoProy no tiene empleados y viceversa. (La tabla trabaja_completo tiene más columnas).','select count(case deptoProy when 5 then 1 end) as proyDP5,\n       count(case deptoProy when 4 then 1 end) as proyDP4\nfrom trabaja_completo\nwhere nss is null;','media',1,1),(1043,61,'Cuántos proyectos del departamento 5 no tienen ningún empleado (de ningún departamento) y cuántos empleados del departamento 5 no tienen ningún proyecto (de ningún departamento). \n\nAyudas: utiliza case en count. Utiliza la tabla trabaja_completo(nss, depto, numeroProy, deptoProy...) que contiene las parejas empleado-proyecto, cuando el empleado trabaja en el proyecto. Si el empleado no trabaja en proyectos numeroProy, deptoProy contienen nulos y si el proyecto no tiene empleados nss, depto tienen nulos.','-- Arturo 2019 para sql01_4\nselect count(case when nss is null then 1 end) as proyDp5SinEmp,\n       count(case when numeroProy is null then 1 end) as EmpDp5SinProy\nfrom trabaja_completo\nwhere deptoProy=5 or depto=5;','media',1,0),(1044,61,'Calcular cuántos empleados del departamento 5 trabajan en proyectos asignados al departamento 5 cuyo nombre empieza por \'Producto\' y le sigue una sola letra (ejemplo: ProductoX). Calcular al mismo tiempo cuál es el número promedio de empleados de ese departamento que hay en esos proyectos (un empleado concreto se contará tantas veces como proyectos participe).\n\nAyudas: utiliza la función right para obtener el último carácter del nombre de proyecto. Utiliza la tabla trabaja_completo(nss, depto, numeroProy, nombreProy, deptoProy...) que contiene las parejas empleado-proyecto, cuando el empleado trabaja en el proyecto. Si el empleado no trabaja en proyectos numeroProy contiene nulo y si el proyecto no tiene empleados nss tiene nulo.','-- Arturo 2019 para sql01_4\n\nselect count(distinct nss) empDep5,\n       count(*)/count(distinct numeroProy) as medEmpdep5\nfrom trabaja_completo\nwhere depto=5 and DeptoProy=5 and \n      nombreProy like \'Producto_\' and right(nombreProy,1) between \'A\' and \'Z\';','media',1,0),(1045,61,'Calcular el número de horas semanales que dedican entre todos los empleados de todos los departamentos, excepto del 5, a proyectos cuyo nombre no empiece por la palabra \'producto\'. Calcular también la media por persona (considerando las personas físicas que están participando) de horas semanales dedicadas a esos proyectos.  Calcular, por último, la media por proyecto de horas invertidas por esos empleados a esos productos (considerando los proyectos que hay).\n\nAyudas: utiliza la tabla trabaja_completo(nss, depto, numeroProy, horasSem...) que contiene las parejas empleado-proyecto, cuando el empleado trabaja en el proyecto. Si el empleado no trabaja en proyectos numeroProy, numhoras contienen nulos y si el proyecto no tiene empleados nss, depto tienen nulos.','-- Arturo 2019 para sql01_4\nselect sum(horasSem) as numHoras,\n       sum(horasSem)/count(distinct nss) as medHorasEmp,\n	   sum(horasSem)/count(distinct numeroProy) as medHorasPry\nfrom trabaja_completo\nwhere depto<>5 and nombreProy not like \'producto%\'','media',1,0),(1046,61,'Para los empleados que trabajan en proyectos asignados a otro departamento, incluyendo a los que no trabajan en ningún proyecto, calcular cuántos empleados son, cuál es la diferencia de salarios entre el que más y menos cobra y cuántos de ellos sí que trabajan en alguno de esos proyectos.\n\nAyudas: utiliza case en count. Utiliza la tabla trabaja_completo(nss, salario, depto, numeroProy, deptoProy...) que contiene las parejas empleado-proyecto, cuando el empleado trabaja en el proyecto. Si el empleado no trabaja en proyectos numeroProy, deptoProy contienen nulos y si el proyecto no tiene empleados nss, salario, depto tienen nulos.','-- Arturo 2019 para sql01_4\n\nselect count(distinct nss) as numEmp,\n       max(salario)-min(salario) as difSalarios,\n	   count(distinct case when numeroProy is not null then nss end) as numEmpConProy\nfrom trabaja_completo\nwhere depto<>deptoProy or numeroProy is null','dificil',1,0),(1047,61,'Para los empleados que NO tengan salario mayor que 3000, calcular cuántos son, a cuántos departamentos pertenecen y cuántos jefes tienen.\nAyuda: algunos empleados tienen salario nulo (es decir, que no tienen salario)','-- Arturo 2019 para sql01_4\nselect count(*) as numEmpleados, count(distinct Depto) as numDeptos, \n       count(distinct jefe) as numJefes\nfrom empleado \nwhere coalesce(salario,0) <=3000','facil',1,0),(1048,61,'Obtener para cada departamento su nombre, nss de su director y calcula el número de trienios (número de grupos de tres años, completos o no) que lleva cada director en el departamento desde el año que comenzó a ser director del departamento.\nAyudas: la división entera se calcula con div; year permite obtener el año de una fecha y current_date() permite obtener la fecha del día actual.','-- problema con el mes\n\n-- Arturo 2019 para sql01_4\n\nselect nombre, \n       director, (year(current_date())-year(fechaIniDir)) div 3 as trienios\nfrom departamento\n\n/* Así se resuelve pero se pone complicado (2020):\nselect nombre, \n       director,  fechaIniDir, (year(current_date())-year(fechaIniDir)) div 3,\n	   case \n	   		when month(fechainidir)<month(current_date()) or \n			    (month(fechainidir)=month(current_date()) and \n				 day(fechainidir)<=day(current_date()) )\n			then (year(current_date())-year(fechaIniDir)) div 3\n			else (year(current_date())-year(fechaIniDir)-1) div 3\n	   end as trienios\nfrom departamento\n*/','facil',1,0),(1049,61,'Para aquellos empleados que no trabajan en ningún proyecto contar cuántos son, cuántos viven en Logroño y cuántos fuera de Logroño. Además etiquetar con \'Logroñeses\' si estos son mayoría y si no etiquetar con \'Foráneos\'.\n\nAyudas: utiliza case en count y case con counts. Utiliza la tabla trabaja_completo(nss, localidad, numeroProy...) que contiene las parejas empleado-proyecto, cuando el empleado trabaja en el proyecto. Si el empleado no trabaja en proyectos numeroProy contiene nulo y si el proyecto no tiene empleados nss y localidad tienen nulos.','-- Arturo 2019 para sql01_4\n\nselect count(*) as numSinProy,\n       count(case when localidad=\'Logroño\' then 1 end) as numLogroño, \n       count(case when localidad<>\'Logroño\' then 1 end) as numForáneos,\n	   case when count(case when localidad=\'Logroño\' then 1 end) >\n			     count(case when localidad<>\'Logroño\' then 1 end)\n				 then \'Logroñeses\' else \'Foráneos\' end as etiqueta\nfrom trabaja_completo\nwhere numeroProy is null','dificil',1,0),(1050,61,'Calcular el número de subordinados de los empleados con NSS 888665555, 999999991 y 222999444.\nAyudas: utiliza case en count.','-- Arturo 2019: para utilizar en clase de teoría \n\nselect count(case when jefe=\'888665555\' then \'888665555\' end) as \'888665555\', \n       count(case when jefe=\'999999991\' then \'999999991\' end) as \'999999991\',\n	   count(case when jefe=\'222999444\' then \'222999444\' end) as \'222999444\'\nfrom empleado\nwhere jefe in (\'888665555\',\'999999991\', \'222999444\')','media',1,1),(1051,61,'Calcular el salario promedio asociado a los jefes de los departamentos 4 y 9 considerando el salario de todos los empleados de dichos departamentos. ','select sum(salario)/count(distinct jefe)\nfrom empleado\nwhere depto in(4,9)','facil',1,1),(1052,61,'Calcular el número de jefes  (empleados con jefe nulo) repetidos en los departamentos, es decir cuántos son segundos, terceros, cuartos... jefes en el mismo departamento.','select count(*) - count(distinct depto) jefesRepetidos\nfrom empleado\nwhere jefe is null','facil',1,1),(1053,61,'Quién invierte más horas en proyectos con códigos entre 10 y 500 ¿el empleado 555555555 o el 999887777?\nAyudas: utiliza case en sum y sum en case.','-- Arturo 2019 para usar en clase\nselect case\n          when sum(case when empleado=\'555555555\' then horas end) >\n		       sum(case when empleado=\'999887777\' then horas end) \n		  then \'555555555\'\n		  else \'999887777\'\n	   end as másHorasEn10_500\nfrom trabaja\nwhere proyecto between 10 and 500','dificil',1,1),(1054,61,'Calcular el total de familiares que son descendientes (hija o hijo) y el total de conyuges (esposo o esposa) de los empleados cuyo NSS contiene un 2. Ayuda: puedes usar case dentro de un count o un sum.','-- Cesar 2019 para práctica 1\n\nselect count(case \n             when Parentesco=\'hija\' or Parentesco=\'hijo\' then 1\n			 end) as descendientes,\n	   count(case \n             when Parentesco=\'esposo\' or Parentesco=\'esposa\' then 1\n			 end) as conyuges \nfrom familiar\nwhere Empleado like \'%2%\';','media',1,0),(1055,61,'Calcular el  total de proyectos distintos en los que se está trabajando, así como la media de horas trabajadas por proyecto, de aquellos empleados cuyo NSS comience por un 3 o termine en un 5 o hayan dedicado más de 12 horas a un proyecto, pero solo para aquellos proyectos cuyo código sea mayor o igual que 2. ','-- Cesar 2019 para práctica 1\n\nselect count(distinct proyecto) as TotalProyectos,\n       sum(horas)/count(distinct proyecto) as MediaHorasPorProyecto\nfrom trabaja\nwhere (empleado like \'3%\' or empleado like \'%5\' or horas>=12) and proyecto >=2;','media',1,0),(1056,76,'sqlserver\nObtener el título de los libros con algún ejemplar devuelto un día por un lector y tomado en préstamo (el mismo ejemplar) por un lector diferente en cuatro días o menos. Además del título del libro, añadir al resultado los códigos de los lectores implicados y las fechas de devolución y préstamo mencionadas antes. Pon como primera columna el nombre de la biblioteca a la que pertenece el ejemplar. \nNota: queremos las fechas sin hora. Para convertirlas utiliza convert(varchar(10), el_atributo_fecha, 103).','-- Arturo 2019 para sql02_4\nselect b.nombre as biblioteca, l.titulo as libro, \n       p1.lector as lector1, p2.lector as lector2,\n	   convert(varchar(10), p1.fecha_devuelto, 103) as fecha_devuelto, \n	   convert(varchar(10), p2.fecha_prestado, 103) as fecha_prestado\nfrom prestamo p1 join \n     prestamo p2 on p1.libro=p2.libro and p1.ejemplar=p2.ejemplar and\n	                p1.fecha_devuelto < p2.fecha_prestado and\n                    p1.fecha_devuelto+4 >= p2.fecha_prestado and\n			        p1.lector<>p2.lector join\n     libro l on p1.libro=l.id join\n	 ejemplar e on p1.libro=e.libro and p1.ejemplar=e.ejemplar join\n	 biblioteca b on b.id=e.biblioteca\norder by 1, 5;','media',2,0),(1057,76,'sqlserver\nNúmero de ejemplares y número de libros de la editorial \"La ruleta\" de las bibliotecas de Villamediana y Arnedo y cuánto han costado entre todos esos ejemplares.','-- Arturo 2019 para sql02_4\nselect count(*) as \'Núm ejemplares\',\n       count(distinct l.id) as \'Núm títulos\',\n       sum(l.precio) as \'Coste total\'\nfrom libro l join\n     ejemplar e on l.id=e.libro join\n	 biblioteca b on e.biblioteca=b.id\nwhere l.editorial=\'La ruleta\'  and \n      (b.direccion like \'%Villamediana\' or\n	   b.direccion like \'%Arnedo\')','facil',2,0),(1058,76,'sqlserver\nCuántos ejemplares de la biblioteca \'Baroja\' tienen algún préstamo con \"fecha_prestado\" anterior a su \"fecha_compra\".\nAyuda 1:  como la clave de ejemplar es compuesta, puedes concatenar los dos números de la clave con algún símbolo especial en medio que los separe, formando así un valor simple diferente para cada fila.\nAyuda 2:  para concatenar cadenas de caracteres utiliza + (a partir de sql server 2012 ya existe concat).\nAyuda 3:  para concatenar números con caracteres, antes hay que transformar los números a cadenas de caracteres, por ejemplo con cast(el_número as varchar(10)).','-- Arturo 2019 para sql02_4\nselect count(distinct cast(e.libro as varchar(30)) + \'$\' +  \n			          cast(e.ejemplar as varchar(30))) as \'núm ejemplares\'\nfrom biblioteca b join\n     ejemplar e on b.id=e.biblioteca join\n     prestamo p on e.libro=p.libro and\n	               e.ejemplar=p.ejemplar and\n				   e.fecha_compra > p.fecha_prestado\nwhere b.nombre=\'Baroja\'','facil',2,0),(1059,76,'sqlserver\nObtener el identificador y título de los libros que tengan algún ejemplar con fecha de solicitud comprendida en el periodo de 365 días desde que se inscribiera el primer solicitante de ese libro, junto a los apellidos, nombre y fecha de inscripción del primer solicitante y la fecha de solicitud del ejemplar.','-- Arturo 2019 para sql02_4\nselect lb.id, lb.titulo, lc.apellidos, lc.nombre, \n       lc.fecha_inscripcion, e.fecha_solicitud\nfrom lector lc join\n     libro lb on lb.primer_solicitante=lc.id join\n	 ejemplar e on e.libro=lb.id and \n	 e.fecha_solicitud>=lc.fecha_inscripcion and\n	 e.fecha_solicitud<=lc.fecha_inscripcion+365','facil',2,0),(1060,76,'sqlserver \nDe los lectores que viven en la misma dirección que otro lector inscrito (este segundo lector) en una fecha posterior, y que (el primer lector) fue primer solicitante de algún libro con ejemplares en la biblioteca \'Quevedo\', queremos saber (del primer lector) su nombre, apellidos, dirección y el identificador y título del libro o libros en cuestión.','-- Arturo 2019 para sql02_4\nselect distinct l1.nombre, l1.apellidos, l1.direccion, l.id as libro, l.titulo\nfrom lector l1 join\n     lector l2 on l1.direccion=l2.direccion and \n	              l1.fecha_inscripcion<l2.fecha_inscripcion join\n	 libro l on l1.id=l.primer_solicitante join\n	 ejemplar e on l.id=e.libro join\n	 biblioteca b on e.biblioteca=b.id\nwhere b.nombre=\'Quevedo\'\n','media',2,0),(1061,61,'Contar el número de hombres y mujeres en la empresa','-- Carlos S. 2019 para práctica 1 ---\n\nselect count(case when sexo=\'V\' then \'V\' end) as \'Hombres\',\n		count(case when sexo=\'M\' then \'M\' end) as \'Mujeres\'\nfrom empleado;','media',1,1),(1062,61,'¿Qué empleado tiene más familiares? El empleado con código 333445555 o el empleado con código 987654321','select case \n		when count(case when empleado=\'333445555\' then \'333445555\' end) >\n			count(case when empleado=\'987654321\' then \'987654321\' end)\n		then \'333445555\'\n		else \'987654321\'\n	   end as \'masFamiliares\'\nfrom familiar;','media',1,0),(1063,61,'De todas las horas que trabaja el empleado con código 987654321, muestra el tanto por ciento que ha invertido en el proyecto 20  y el tanto por ciento que ha invertido en el proyecto 30.','-- Carlos S. 2019 para práctica 1 ---\n\nselect	sum(case when proyecto=\'20\' then horas end)/sum(horas) as \'proyecto 20\',\n		sum(case when proyecto=\'30\' then horas end)/sum(horas) as \'proyecto 30\'\nfrom trabaja\nwhere empleado = 987654321\n','media',1,0),(1064,61,'Para los proyectos de las capitales provinciales de la Comunidad autónoma de Aragón, cuál es el valor medio de las horas semanales trabajadas en el el departamento 5 del proyecto y cuántos trabajadores (que trabajen en cualquier proyecto de esa comunidad) son mayores de 40 años.\nAyudas: utiliza case en count. Utiliza la tabla trabaja_completo(nss, depto, numeroProy, deptoProy, localidadproy...) que contiene las parejas  empleado-proyecto, cuando el empleado trabaja en el proyecto.\n','select avg(case when deptoproy=5 then horassem end) as mediahorasproy5\n	  ,count(case when year(current_date())-year(fechancto)>40 then 1 end) as mayor40\nfrom trabaja_completo\nwhere localidadproy in( \'Zaragoza\',\'Huesca\',\'Teruel\')\n/* Emilio para sql01_6)*/','media',1,0),(1065,61,'Número de la seguridad social y proyectos en los que trabajan aquellos trabajadores cuya dirección contiene su nombre.\nUtiliza la tabla trabaja_completo que tiene, entre otros, los siguientes campos: nss, numeropoy, direccion, nombre','select distinct nss, numeroproy\nfrom trabaja_completo\nwhere direccion like CONCAT(\'%\', nombre,\'%\')\n\n/*Emilio para sql01_6*/','facil',1,0),(1066,61,'Calcula el procentaje de trabajadores que tienen jefe, el salario medio de los que no tienen jefe y el promedio de edad de las mujeres que no tienen jefe\n\nNota. Para el obtener la edad utiliza la resta de años. ','select 100*count(case when jefe is not null then 1 end)/count(*) as PorcentajeconJefe\n	  ,avg(case when jefe is null then salario end) as mediosinjefe\n	  ,avg(case when sexo=\'M\' and jefe is null then year(current_date())-year(fechancto) end) as mediaEdadMujer\nfrom empleado\n/*Emilio para sql01_6*/','media',1,1),(1067,76,'sqlserver\nPara los lectores de Alfaro y Cervera que hayan tomado en préstamo algún ejemplar de libro del que sean primeros solicitantes, y cuyo precio sea mayor que 20 euros, queremos obtener el nombre y apellidos de los lectores, junto al título, editorial y precio del libro, además de las fechas de préstamo y devolución del ejemplar.\nNota: las fechas las queremos sin la hora, para ello utiliza convert(varchar(10), el_atributo_fecha , 103)','-- Arturo 2019 para la práctica sql02_4\nselect l.nombre, l.apellidos, lb.titulo, lb.editorial, lb.precio, \n       convert(varchar(10), p.fecha_prestado, 103) as fecha_prestado,\n	   convert(varchar(10), p.fecha_devuelto , 103) as fecha_devuelto\nfrom prestamo p join\n     libro lb on p.libro=lb.id and p.lector=lb.primer_solicitante join\n	 lector l on p.lector=l.id\nwhere (l.direccion like \'%Alfaro\' or l.direccion like \'%Cervera\') and lb.precio>20','media',2,0),(1068,76,'(SQLSERVER) Haz este SIN SUBCONSULTAS.\n---\nLas bibliotecas de Logroño nos piden que les hagamos una consulta que obtenga los libros tomados en préstamo de sus bibliotecas (las de Logroño) por lectores que residen fuera de logroño pero que tienen en su localidad de residencia otra biblioteca que tiene algún ejemplar del libro que han tomado en préstamo en la biblioteca de Logroño.\nPara cada uno de estos libros prestados quieren que obtengamos los apellidos y nombre del lector, el código del libro, la fecha en la que lo cogió en préstamo, el nombre de la biblioteca de Logroño de donde lo tomó en préstamo y la biblioteca de la localidad del lector donde hay un ejemplar de ese mismo libro.\n---\nAyuda 1: para obtener la localidad de una dirección disponemos de la función  dbo.get_localidad(la_direccion)\nAyuda 2: se desea obtener sólo la fecha sin la hora, para ello usa convert(varchar(10), el_atributo_fecha,103)','-- Arturo 2019 para sql08_4 / autojoin sin subconsultas\n\nselect l.apellidos, l.nombre, e.libro, \n       convert(varchar(10),p.fecha_prestado,103) as fecha_prestado, \n	   b.nombre as bib_prestamo, b2.nombre as bib_local\nfrom biblioteca b join\n     ejemplar e on b.id=e.biblioteca join\n	 prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar join\n	 lector l on p.lector=l.id and dbo.get_localidad(b.direccion)<>dbo.get_localidad(l.direccion) join\n	 biblioteca b2 on dbo.get_localidad(b2.direccion)=dbo.get_localidad(l.direccion) join\n	 ejemplar e2 on e2.biblioteca=b2.id and e2.libro=e.libro\nwhere dbo.get_localidad(b.direccion)=\'Logroño\'','dificil',2,0),(1069,76,'sqlserver\nPara los lectores residentes en Logroño que hayan tomado ejemplares en préstamo en bibliotecas de Villamediana y los hayan devuelto ya, queremos contar cuántos lectores son, cuántos préstamos han realizado entre todos ellos, cuántos libros diferentes han tomado en préstamo y cuántos días de media han durado los préstamos.\nAyuda: para obtener el número de días entre dos fechas usar datediff(day, fecha_anterior, fecha_posterior)','-- Arturo 2019 para sql02_4\nselect count(distinct l.id) as \'Núm lectores\', count(*) as \'Núm préstamos\', \n       count(distinct p.libro) as \'Núm libros\', \n	   avg(datediff(day,p.fecha_prestado,p.fecha_devuelto)) as \'Núm días medio\'\nfrom lector l join\n     prestamo p on l.id=p.lector join\n	 ejemplar e on p.libro=e.libro and p.ejemplar=e.ejemplar join\n	 biblioteca b on e.biblioteca=b.id\nwhere l.direccion like \'%Logroño\' and b.direccion like \'%Villamediana\' and\n      p.fecha_devuelto is not null','facil',2,0),(1070,62,'Nombre de biblioteca, nº de libros distintos prestados, nº de ejemplares distintos prestados, y nº de prestamos hechos (de las bibliotecas que hayan hecho algún préstamo). ','select b.nombre, count(distinct e.libro) as \'Total libros\',\ncount(distinct concat(e.libro,e.ejemplar)) as \'Total ejemplares\', count(*) as \'Total prestamos\' \nfrom biblioteca b join \n        ejemplar e on  b.id=e.biblioteca join\n        prestamo p on e.libro = p.libro and e.ejemplar = p.ejemplar\ngroup by b.id, b.nombre','media',3,1),(1071,58,'Considera sólo los artículos cuyo precio de venta es igual o superior a su precio de compra más un 20%. Queremos obtener los nombres de proveedores cuyo peso medio de tales artículos es superior a 100.000. Además queremos obtener la ganancia (precio de venta menos el de compra) media que proporciona el conjunto de sus artículos redondeada a dos decimales.\nAyuda: round(número, 2) devuelve el número redondeado a dos decimales.','-- Arturo 2019 para slq03_4\nselect p.nombr_prov as proveedor, \n       round(avg(a.prec_vent-a.prec_compr),2) as \"% ganancia\"\nfrom proveedor p join\n     articulo a on p.ident_prov=a.ident_prov\nwhere a.prec_compr*1.2 <= a.prec_vent\ngroup by p.nombr_prov, p.ident_prov\nhaving avg(a.peso)>100.000','facil',3,0),(1072,58,'Considera los bolígrafos de los proveedores de nombre \'Electrolamp\'.  Suponte que para alguno de esos bolígrafos encontramos otro bolígrafo del mismo color, pero de precio inferior y de proveedor diferente al del bolígrafo Electrolamp. Lo que queremos obtener es para estos bolígrafos más baratos su identificador y nombre de artículo, color, precio de venta e identificador de su proveedor. Además incluye el identificador y precio de venta del bolígrafo \'Electrolamp\' que es más caro y tiene el mismo color.','-- Arturo 2019 para sql03_4\nselect b.ident_artic, b.nombr_artic, b.color, b.prec_vent, b.ident_prov, \n       a.ident_artic as \'boli electrolamp\', a.prec_vent as \'prec_vent electrolamp\'\n from proveedor p join\n      articulo a on a.ident_prov=p.ident_prov join\n      articulo b on  a.color=b.color and \n	                 a.ident_prov <> b.ident_prov and \n					 a.prec_vent>b.prec_vent \n where p.nombr_prov=\'Electrolamp\' and \n       a.nombr_artic like \'%bolígrafo%\' and \n       b.nombr_artic like \'%bolígrafo%\'\n       ','media',2,0),(1073,58,'Cuántas unidades (cantidad de artículos de todas las ventas) de cuántos artículos ha vendido cada tienda con gerente apellidado Domínguez a clientes franceses  (\'F\' en nación) y a cuántos clientes franceses. Incluir también como primeras columnas el identificador, la ciudad de la tienda y el gerente de la tienda.','-- Arturo 2019 para sql03_4\nselect t.ident_tiend, t.ciud, t.nombr_gerent as gerente,\n       sum(v.cant_artics) as \'unidades\',\n       count(distinct v.ident_artic) as \'artículos\',\n       count(distinct c.ident_client) as \'clientes\'\n from venta v join\n     tienda t on v.ident_tiend=t.ident_tiend join\n	 cliente c on v.ident_client=c.ident_client\n where t.nombr_gerent like \'Domínguez%\' and c.nacion=\'F\'\n group by t.ident_tiend, t.ciud, t.nombr_gerent\n\n','facil',3,0),(1074,58,'Para cada tipo de peso de la tabla clasif_peso obtener el número de ventas (filas de ventas), las unidades vendidas, el peso medio por unidad vendida y la recaudación total. Nos interesan sólo las ventas del año 2002. Si para algún tipo de peso no hay ventas no debería aparecer fila para el mismo.\n\nAyuda: empieza escribiendo select * from clasif_peso para ver cómo es la tabla clasif_peso (luego lo borras)','-- Arturo 2019 para sql03_4\n\nSELECT   cp.tipo_peso, count(*) as \'núm ventas\', sum(v.cant_artics) as unidades,\n         sum(a.peso*v.cant_artics)/sum(v.cant_artics) as \'peso medio/unidad\',\n         sum(a.prec_vent) as recaudado\nFROM     articulo a join \n         clasif_peso cp on a.peso BETWEEN cp.peso_minim AND cp.peso_maxim join\n		 venta v on a.ident_artic=v.ident_artic\nwhere v.fech_vent like \'2002%\'\nGROUP BY cp.tipo_peso\norder by 1','media',3,0),(1075,58,'Para aquellos artículos que se hayan vendido más de 5 unidades (atributo cant_actics de venta) durante un mismo año queremos obtener el año en el que se produjeron las ventas, el nombre del artículo, el nombre del proveedor, el número de ventas individuales (filas de ventas), el número de unidades del artículo vendidas (cant_artics de venta), el número de tiendas que hicieron esas ventas y el número de ciudades desde donde se vendió. ','-- Arturo 2019 para sql03_4\nselect year(v.fech_vent) as \'Año\',\n       a.nombr_artic as \'Artículo\', \n	   p.nombr_prov as \'Proveedor\', \n       count(*) as \'Núm ventas\', \n       sum(v.cant_artics) as \'Núm unidades\', \n	   count(distinct v.ident_tiend) as \'Núm tiendas\',\n	   count(distinct t.ciud) as \'Núm ciudades\'\nfrom venta v join\n     articulo a on v.ident_artic=a.ident_artic join\n	 proveedor p on a.ident_prov=p.ident_prov join\n	 tienda t on v.ident_tiend=t.ident_tiend\ngroup by v.ident_artic, year(v.fech_vent), a.nombr_artic, p.nombr_prov\nhaving sum(cant_artics)>5','media',3,0),(1076,58,'Nombre y proveedor de los artículos que se vendieron varios años diferentes junto al número de unidades vendidas en los años 2002, 2003 y 2004 (atributo cant_artics de venta).','-- Arturo 2019 para sql03_4\nselect a.nombr_artic as \'Artículo\', \n       p.nombr_prov as \'Proveedor\', \n       sum(case year(v.fech_vent) when 2002 then v.cant_artics else 0 end) as \'Ventas 02\',\n	   sum(case year(v.fech_vent) when 2003 then v.cant_artics else 0 end) as \'Ventas 03\',\n	   sum(case year(v.fech_vent) when 2004 then v.cant_artics else 0 end) as \'Ventas 04\'\nfrom venta v join\n     articulo a on v.ident_artic=a.ident_artic join\n	 proveedor p on a.ident_prov=p.ident_prov\ngroup by v.ident_artic, a.nombr_artic, p.nombr_prov\nhaving count(distinct year(v.fech_vent))>1','dificil',3,0),(1077,58,'Identificador, nombre y apellido de los clientes que compraron algún bolígrafo en 2002, junto al número de artículos diferentes comprados por esos clientes en las tiendas 2 y 3 en cualquier año. No nos interesa que salgan los clientes que no compraron nada en estas dos tiendas.','-- Arturo 2019 para sql03_4\n\nselect c.ident_client, c.nombr_client, c.apell1, \n        count(distinct v.ident_artic) as \'Núm artículos\'\nfrom cliente c join\n     venta v on c.ident_client=v.ident_client join\n     venta vboli on v.ident_client=vboli.ident_client join\n	 articulo aboli on vboli.ident_artic=aboli.ident_artic\nwhere aboli.nombr_artic like \'%bolígrafo%\' and year(vboli.fech_vent)=2002 and\n      v.ident_tiend in (2,3)\ngroup by c.ident_client, c.nombr_client, c.apell1','media',3,0),(1078,76,'Identificadores de libro y ejemplar, título de libro y última fecha de devolución de aquellos ejemplares de la editorial \'Lorca\' asignados a bibliotecas de \'Villamediana\' cuya última fecha de devolución sea anterior a \'2007/01/01\'.\n','-- Arturo 2019 para slq04_4\n-- Este pertenece a la sesión 3 y es de repaso\n\n-- Enunciado 2019: \n-- que tengan todos sus préstamos con fecha de devolución no nula (es decir, que están en la biblioteca y no están prestados).\n\nselect e.libro, e.ejemplar, l.titulo, max(p.fecha_devuelto) as \'Última devolución\'\nfrom ejemplar e join\n     biblioteca b on e.biblioteca=b.id join\n	 libro l on e.libro=l.id join\n	 prestamo p on p.libro=e.libro and p.ejemplar=e.ejemplar\nwhere b.direccion like \'%Villamediana\' and l.editorial=\'Lorca\'\ngroup by e.libro, e.ejemplar, l.titulo\nhaving max(p.fecha_devuelto) < \'2007/01/01\'\n\n-- Para el enunciado 2019 \n-- having count(case when p.fecha_devuelto is null then 1 else null end)<=0\n-- Esta condición no criba resultados','media',4,0),(1079,76,'Identificador y título de aquellos libros de la editorial \'Pergamino\' con ejemplares en la biblioteca \'Quevedo\' pero que todavía no se haya prestado ninguno de ellos (ninguno de los ejemplares del libro pertenecientes a la biblioteca \'Quevedo\').','select l.id, l.titulo\nfrom libro l join\n     ejemplar e on l.id=e.libro join\n	 biblioteca b on b.id=e.biblioteca\nwhere b.nombre=\'Quevedo\' and l.editorial=\'Pergamino\'\nexcept\nselect l.id, l.titulo\nfrom libro l join\n     prestamo p on l.id=p.libro join\n	 ejemplar e on p.libro=e.libro and p.ejemplar=e.ejemplar join\n	 biblioteca b on b.id=e.biblioteca\nwhere b.nombre=\'Quevedo\' and l.editorial=\'Pergamino\'\n','facil',4,0),(1080,76,'Apellidos y nombre de cada uno de los lectores de Logroño inscritos a partir del año 2000 junto al número de libros diferentes que tomó en préstamo de la biblioteca \'Unamuno\'.\nNota: Existen lectores de Logroño inscritos a partir del año 2000 que no tienen préstamos en la biblioteca \'Unamuno\'.','select le.apellidos, le.nombre, \n      count(distinct e.libro) as libros \nfrom (prestamo p  join\n	 ejemplar e on e.libro=p.libro and e.ejemplar=p.ejemplar join\n	 biblioteca b on e.biblioteca=b.id) RIGHT JOIN -- queremos todos los lectores de Logroño \n	 lector le on le.id=p.lector and b.nombre=\'Unamuno\' -- si lo ponemos en where no salen los lectores sin préstamos\nwhere le.direccion like \'%Logroño\' and year(le.fecha_inscripcion) >= 2000\ngroup by le.nombre, le.apellidos, le.id\n\n----\n-- Apellidos y nombre de cada uno de los lectores de Logroño inscritos a partir del año 2000 junto al número de diferentes ejemplares de libro que tomó en préstamo de la biblioteca \'Unamuno\'.\n-- Ayuda: para concatenar números y textos primero convierte los números a texto con cast(numero as varchar(10)) y luego concatena con +\n\n-- select le.apellidos, le.nombre, \n--      count(distinct cast(e.libro as varchar(10))+\'$\'+cast(e.ejemplar as varchar(10))) as ejemplares \n-- from (prestamo p  join\n--     ejemplar e on e.libro=p.libro and e.ejemplar=p.ejemplar join\n--     biblioteca b on e.biblioteca=b.id) RIGHT JOIN -- queremos todos los lectores de Logroño\n--     lector le on le.id=p.lector and b.nombre=\'Unamuno\' -- si lo ponemos en where no salen los lectores sin préstamos\n-- where le.direccion like \'%Logroño\' and year(le.fecha_inscripcion) >= 2000\n-- group by le.nombre, le.apellidos, le.id','dificil',4,0),(1081,76,'Identificador y título de aquellos libros que tienen ejemplares en la biblioteca 1 y en la biblioteca 4 y que hayan tenido menos de 5 préstamos en el conjunto de todas las bibliotecas ','select lb.id, lb.titulo\nfrom libro lb join\n     ejemplar e1 on lb.id=e1.libro\nwhere e1.biblioteca=1\nintersect \nselect lb.id, lb.titulo\nfrom libro lb join\n	 ejemplar e4 on lb.id=e4.libro\nwhere e4.biblioteca=4\nintersect \nselect lb.id, lb.titulo\nfrom libro lb LEFT JOIN -- hay un ejemplar sin prestar: el 50 que está en las dos bibliotecas\n     prestamo p on lb.id=p.libro\ngroup by lb.id, lb.titulo\nhaving count(*)<5 \n','media',4,0),(1082,76,'Nombre de las editoriales sin ejemplares en la base de datos junto al número de libros diferentes que tienen y al número de ellos con solicitante (primer solicitante).\nNota: Puede haber editoriales sin libros (y por lo tanto sin ejemplares).','select ed.nombre, count(distinct lb.id) libros, count(lb.primer_solicitante) \'libros con solicitante\'\nfrom editorial ed LEFT JOIN -- hay editoriales sin libros\n     libro lb on ed.nombre=lb.editorial LEFT JOIN -- buscamos libros sin ejemplares\n	 ejemplar ej on ej.libro=lb.id\nwhere ej.libro is null\ngroup by ed.nombre','facil',4,0),(1083,76,'Obtener toda la información de las editoriales con ejemplares en al menos 4 bibliotecas distintas y que tengan 2 o más libros de la autora Nora Kaufman Urrutia','select ed.nombre, ed.direccion, ed.tfno\nfrom editorial ed join\n     libro lb on ed.nombre=lb.editorial join\n	 ejemplar ej on lb.id=ej.libro\ngroup by ed.nombre, ed.direccion, ed.tfno\nhaving count(distinct ej.biblioteca)>=4\nintersect\nselect ed.*\nfrom editorial ed join\n      libro lb on ed.nombre=lb.editorial join\n	  autorlibro al on lb.id=al.libro join\n	  autor a on al.autor=a.id\nwhere a.nombre=\'Nora\' and a.apellidos=\'Kaufman Urrutia\'\ngroup by ed.nombre, ed.direccion, ed.tfno\nhaving count(distinct lb.id)>=2\n','facil',4,0),(1084,58,'Todas las columnas de la tabla cliente para los clientes que hayan comprado alguno de los artículos vendidos a Jean Dupont (excepto el propio Jean Dupont) después de la última venta hecha a Jean Dupont.','-- Arturo para sql07_4\n\nselect c.*\nfrom cliente c join\n     venta vc on vc.ident_client=c.ident_client join\n	 venta vjd on vc.ident_artic=vjd.ident_artic join\n	 cliente jd on vjd.ident_client=jd.ident_client\nwhere jd.nombr_client=\'Jean\' and jd.apell1=\'Dupont\' and \n      c.ident_client<>jd.ident_client and\n	  vc.fech_vent >\n	    ( select max(v1.fech_vent) \n		  from venta v1 join cliente c1 on v1.ident_client=c1.ident_client\n		  where c1.nombr_client=\'Jean\' and c1.apell1=\'Dupont\'\n		)\n		  ','media',7,0),(1085,58,'Todas las columnas de las tiendas que hayan recaudado en el conjunto de sus ventas del año 2002 la mayor cantidad de dinero, junto al número de clientes distintos a los que vendió la tienda en ese año.\nAyuda: usa el atributo prec_total de venta para calcular lo que recauda cada tienda.','-- Arturo para sql07_4\n\nselect t.*, count(distinct v.ident_client) as \'num clientes\'\nfrom tienda t join\n     venta v on t.ident_tiend=v.ident_tiend\nwhere year(v.fech_vent)=2002\ngroup by t.ident_tiend\nhaving sum(v.prec_total) >=all\n       (select sum(prec_total)\n		from venta\n		where year(fech_vent)=2002\n		group by ident_tiend);','media',7,0),(1086,58,'Nombre de los gerentes que lleven una tienda que no haya vendido nada a clientes de Pamplona.','-- Cesar\n-- Mas abajo propuesta de Arturo para SQL07\n\nselect nombr_gerent\nfrom tienda\nwhere ident_tiend not in\n      ( select ident_tiend \n        from venta as v join\n	    cliente as c on v.ident_client = c.ident_client\n        where ciud=\'Pamplona\'\n      );\n\n\n-- Arturo para sql07_4\n\n-- Obtener toda la información de la tienda junto a su número total de ventas (número de filas de la tabla venta) para las tiendas con más y menos clientes de la BD (es decir con ventas a más y a menos clientes). Añade también el texto \'Menos clientes\' o \'Más clientes\' dependiendo del tipo de tienda.\n-- Ayuda: Ten en cuenta que puede haber varias tiendas con el número máximo de clientes y también puede haber varias con el número mínimo de clientes. \n-- Se puede escribir más fácil pensando que las de más clientes y las de\n-- menos clientes no podrán aparecer en ambos conjuntos. Entonces valdría con\n-- un union all sin usar subconsultas en el from (pero sí en los having)\n\n-- SELECT t.*, count(*) as \'Núm ventas\', tt.Etiqueta\n-- FROM tienda t join\n--     (select v0.ident_tiend, \'Más clientes\' as Etiqueta\n--     from venta v0\n--     group by v0.ident_tiend\n--     having count(distinct v0.ident_client) >=all\n--            (select count(distinct v1.ident_client)\n--             from venta v1\n--             group by v1.ident_tiend)\n--  union all\n--  select v0.ident_tiend, \'Menos clientes\'\n--      from venta v0\n--     group by v0.ident_tiend\n--     having count(distinct v0.ident_client) <=all\n--           (select count(distinct v1.ident_client)\n--      from venta v1\n--      group by v1.ident_tiend\n--      )\n--  ) as tt on t.ident_tiend=tt.ident_tiend join\n--  venta v on t.ident_tiend=v.ident_tiend\n-- GROUP BY t.ident_tiend','media',7,0),(1087,58,'En qué ciudad, de entre las que tienen tiendas que sea diferente de Madrid, viven más clientes de la BD','-- César\n-- Mas abajo esta otra consulta propuesta por Arturo para sql07_4\n\nselect ciud\nfrom cliente\nwhere ciud in (select ciud from tienda) and ciud <>\'Madrid\'\ngroup by ciud\nhaving count(*)>=all\n       (select count(*)\n        from cliente\n        where ciud in (select ciud from tienda) and ciud <>\'Madrid\'\n        group by ciud\n       );\n\n-- Arturo para sql07_4\n\n-- De entre las ciudades SIN tiendas donde viven clientes, ¿cuál acumula mayor número de ventas \n-- (filas de la tabla venta) durante el año 2002 en la tienda 3 ?\n-- select c.ciud as ciudad\n-- from (cliente c join\n--     venta v on c.ident_client=v.ident_client) LEFT JOIN -- OJO RESTA\n--     tienda t on c.ciud=t.ciud -- OJO, JOIN POR CIUD\n-- where year(v.fech_vent)=2002 and v.ident_tiend=3 and t.ciud is null\n-- group by c.ciud\n-- having count(*) >= all\n--       (select count(*)\n--        from (cliente c1 join\n--             venta v1 on c1.ident_client=v1.ident_client) LEFT JOIN -- OJO RESTA\n--        tienda t1 on c1.ciud=t1.ciud\n-- where year(v1.fech_vent)=2002 and v1.ident_tiend=3 and t1.ciud is null\n-- group by c1.ciud)','dificil',7,0),(1088,76,'Identificador y nombre de las bibliotecas que cumplen una de las dos condiciones siguientes y las bibliotecas que cumplen ambas condiciones queremos que aparezcan dos veces:\n1. La biblioteca tiene más libros (cualquiera de sus ejemplares) prestados alguna vez que libros sin prestar nunca.\n2.  hay 5 o más lectores que viven en la misma ciudad que la biblioteca inscritos después de 1995.\n----\nAyuda 1: la cuenta de libros sin prestar se puede conseguir haciendo la cuenta de todos los libros y restándole la cuenta de los libros prestados.\nAyuda 2: para facilitar la extracción de la localidad de los campos dirección tienes  la función dbo.get_localidad(el_campo_dirección).','select b.id, b.nombre\nfrom (biblioteca b join\n      ejemplar e on e.biblioteca=b.id) LEFT JOIN\n	 prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar\ngroup by b.id, b.nombre\nhaving count(distinct e.libro)-count(distinct p.libro)<count(distinct p.libro) \nunion all\nselect b.id, b.nombre\nfrom  biblioteca b join\n	  lector lc on dbo.get_localidad(b.direccion)=dbo.get_localidad(lc.direccion)\nwhere year(lc.fecha_inscripcion)>1995\ngroup by b.id, b.nombre\nhaving count(*)>=5 \n','dificil',4,0),(1089,58,'Identificador y nombre de proveedor, año con ventas y número de artículos vendidos ese año, para aquellos proveedores sin ventas de ninguno de sus artículos durante el año 2003 pero con alguna venta el resto de años.','-- Arturo para sql07_4\n-- creo que se puede hacer con left join\n\nselect p.ident_prov, p.nombr_prov, year(v.fech_vent) as año, \n       count(distinct v.ident_artic) as \'num articulos\'\nfrom venta v join\n     articulo a on v.ident_artic=a.ident_artic join\n	 proveedor p on a.ident_prov=p.ident_prov\ngroup by p.ident_prov, p.nombr_prov, year(v.fech_vent)\nhaving p.ident_prov not in\n       (select distinct a1.ident_prov\n		from articulo a1 join\n		     venta v1 on a1.ident_artic=v1.ident_artic\n		where year(v1.fech_vent)=2003)\n','media',7,0),(1090,76,'Nombres y apellidos de los autores, junto con el titulo de sus libros de los cuales hay más de 3 ejemplares, y que además dichos ejemplares se han tomado en prestamo alguna vez. ','select a.nombre, a.apellidos, li.titulo\nfrom autor a join autorlibro al on a.id = al.autor\n				join libro li on li.id =al.libro\n				join prestamo p on p.libro=li.id\ngroup by al.autor, al.libro, a.nombre, a.apellidos, li.titulo\nhaving count(distinct p.ejemplar)>3','media',3,0),(1091,76,'Obtener las filas de la tabla autorLibro pero con las columnas ordenadas al revés (primero libro y después autor).','select libro, autor\nfrom autorlibro','facil',1,0),(1092,76,'Hace 7 días se realizó la solicitud de un ejemplar más de cada uno de los libros que ya tienen ejemplares en alguna biblioteca. Hoy se procede a la compra de dichos libros. El nuevo ejemplar de cada libro se inscribirá en la biblioteca cuyo código de biblioteca es el menor entre todas las bibliotecas que ya tienen ejemplares de ese libro. Obtén las nuevas filas que se deberían insertar a la tabla ejemplar para representar esta compra masiva.\nAyuda: getdate() obtiene la fecha de hoy.\nNota: las fechas las queremos sin la hora, para ello utiliza convert(varchar(10), el_atributo_fecha , 103)','select libro, max(ejemplar)+1 as ejemplar, min(biblioteca) as biblioteca, \n       convert(varchar(10), getdate()-7 , 103) as fecha_solicitud, convert(varchar(10), getdate() , 103) as fecha_compra\nfrom ejemplar\ngroup by libro;\n','facil',3,0),(1093,76,'(SQLSERVER)\nIdentificador y título de libro e identificador de su autor, de todos aquellos libros publicados por algún autor llamado Jesús Navaridas Ansa que tengan ejemplares en todas las bibliotecas de Logroño.','-- Arturo 2019 para sql08_4 / división\n\nselect lb.id as libro, lb.titulo, a.id as autor\nfrom libro lb join\n     autorlibro al on lb.id=al.libro join\n	 autor a on al.autor=a.id\nwhere  a.nombre=\'Jesús\' and a.apellidos=\'Navaridas Ansa\' and\n   not exists (\n	select b.id\n	from biblioteca b\n	where b.direccion like \'%Logroño\'\n	except\n	select e.biblioteca\n	from ejemplar e\n	where e.libro=lb.id -- correlación\n	)','dificil',8,0),(1094,76,'(SQLSERVER) Identificador, nombre y apellidos de los lectores a quienes se les haya prestado varios ejemplares (el mismo día) en al menos un tercio de los días en los que tomó ejemplares en préstamo.','-- Arturo 2019 para sql08_4 / con correlación\n\nselect lc.id, lc. nombre, lc.apellidos \nfrom lector lc join\n     prestamo p on lc.id=p.lector\ngroup by lc.id, lc. nombre, lc.apellidos\nhaving count(distinct p.fecha_prestado)/3 <=  \n       (select count(*)\n        from (select p2.fecha_prestado\n		      from prestamo p2\n		      where p2.lector=lc.id -- correlación\n		      group by p2.fecha_prestado\n		      having count(*)>1\n			 ) as fechas\n	   )\n\n      ','dificil',8,0),(1095,76,'(SQLSERVER)\nObtener el identificador y nombre de las bibliotecas de Logroño que han prestado a un número menor de lectores que alguna de las bibliotecas de fuera de Logroño de entre las que han prestado mayor número de libros distintos de todas las bibliotecas de fuera de Logroño.','-- Arturo 2019 para sql08_4 / sin correlación\n\nselect b.id, b.nombre\nfrom biblioteca b join\n     ejemplar e on b.id=e.biblioteca join\n	 prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar\nwhere b.direccion like \'%Logroño\'\ngroup by b.id, b.nombre\nhaving count(distinct p.lector) <any\n       (select count(distinct pr.lector)\n		from biblioteca br join\n		     ejemplar er on br.id=er.biblioteca join\n		     prestamo pr on er.libro=pr.libro and er.ejemplar=pr.ejemplar\n		where br.direccion not like \'%Logroño\'\n        group by br.id\n		having count(distinct pr.libro) >=all\n		       (select count(distinct pr1.libro)\n				from biblioteca br1 left join (\n				     ejemplar er1 join\n	                 prestamo pr1 on er1.libro=pr1.libro and er1.ejemplar=pr1.ejemplar)\n				     on br1.id=er1.biblioteca \n                where br1.direccion not like \'%Logroño\'\n                group by br1.id\n			   )\n		);','dificil',8,0),(1096,76,'Obtener el identificador, nombre, apellidos y número de libros de los autores que tengan al menos un ejemplar de alguno de sus libros en cada biblioteca, pero considerando solo las bibliotecas que tengan ejemplares (de cualquier autor).\nNota: en la BD hay alguna biblioteca sin ejemplares y la queremos descartar.','-- Arturo 2019 para sql09_4\n\nselect a.id, a.nombre, a.apellidos, count (*) as numlibros\nfrom autor a join\n     autorlibro al on a.id=al.autor join\n	 libro l on al.libro=l.id\ngroup by  a.id, a.nombre, a.apellidos\nhaving not exists (\n		select e2.biblioteca \n		from ejemplar e2\n	    except\n        select e1.biblioteca\n		from ejemplar e1 join\n		     autorlibro al1 on e1.libro=al1.libro\n		where al1.autor=a.id -- correlación\n		)','dificil',9,0),(1097,76,'Considera en esta consulta únicamente los libros de un solo autor. Queremos obtener el identificador, nombre y apellidos de los autores que tienen más ejemplares que la media de ejemplares por autor y que sin embargo el precio de sus ejemplares es inferior al precio medio de los ejemplares por autor. ','-- Arturo 2019 para simulacro2\n\nselect a.id, a.nombre, a.apellidos\nfrom autor a join\n     autorlibro alA on a.id=alA.autor join\n	 ejemplar e on alA.libro=e.libro join\n	 libro l on e.libro=l.id LEFT join -- resta\n	 autorlibro alB on alB.libro=l.id and alA.autor<>alB.autor\nwhere alB.autor is null -- solo ejemplares de libro con un solo autor\ngroup by a.id, a.nombre, a.apellidos\nhaving count(*) > -- contamos ejemplares del autor\n       (select count(*)/count(distinct alA1.autor)\n		from autorlibro alA1 join\n	         ejemplar e1 on alA1.libro=e1.libro LEFT join\n	         autorlibro alB1 on e1.libro=alB1.libro and alB1.autor<>alA1.autor\n	    where alB1.autor is null)\n		and\n		sum(l.precio) <\n	   (select sum(l2.precio)/count(distinct alA2.autor)\n		from autorlibro alA2 join\n	         ejemplar e2 on alA2.libro=e2.libro join\n		     libro l2 on e2.libro=l2.id LEFT join\n	         autorlibro alB2 on e2.libro=alB2.libro and alB2.autor<>alA2.autor\n	    where alB2.autor is null)\n			 ','dificil',7,0),(1098,76,'Nombre de los lectores que tengan como apellido \'Lumbreras\' (1.º ó 2.º apellido) junto con el título del libro (o libros) que hayan tenido menos tiempo en prestamo (alguno de sus ejemplares). \n\nNota: en caso de que el libro no se haya devuelto, considerar el día de hoy (GETDATE())','/*propuesta Carlos examen repaso*/\nselect l.nombre, li.titulo\nfrom lector l join prestamo p on l.id=p.lector \n			join libro li on li.id=p.libro\nwhere apellidos like \'%Lumbreras%\'\ngroup by p.lector, p.ejemplar, p.fecha_prestado, p.fecha_devuelto, l.nombre, li.titulo\nhaving COALESCE(p.fecha_devuelto, GETDATE())-p.fecha_prestado <= all(\n		select COALESCE(p1.fecha_devuelto, GETDATE())-p1.fecha_prestado\n		from  prestamo p1\n		where p1.lector=p.lector /*correlacion*/\n		group by p1.lector, p1.ejemplar,p1.fecha_prestado,p1.fecha_devuelto\n	)\n','dificil',9,0),(1100,76,'Mostrar el código y el título de los libros de la editorial El Feriante con dos o más autores que tengan ejemplares (que hayan sido tomados en préstamo) en todas las bibliotecas de Arnedo y Logroño.','-- Propuesta de César para simulacro 2\n-- También se puede poner el not exists en el having!!\n\nselect l.id, l.titulo \nfrom libro l join\nautorlibro al on l.id=al.libro\nwhere editorial =\'El Feriante\' and\n    not exists (\n	  select id \n	  from biblioteca \n	  where direccion like \'%Arnedo\' or direccion like \'%Logroño\'\n      except\n      select biblioteca \n      from ejemplar e join\n           prestamo p on e.libro = p.libro and e.ejemplar = p.ejemplar\n      where e.libro = l.id -- correlacion\n     ) \ngroup by l.id, l.titulo\nhaving count(autor)>1','dificil',9,0),(1101,76,'Nombre de los lectores que tengan como apellido \'Lumbreras\' (1.º ó 2.º apellido) junto con \n(1) el título del libro (o libros) que hayan tenido menos tiempo en prestamo (alguno de sus ejemplares). \n(2) el título del libro (o libros) que hayan tenido MAS tiempo en prestamo (alguno de sus ejemplares). \n\nNota: en caso de que el libro no se haya devuelto, considera la fecha actual','/*propuesta Carlos examen repaso*/\nselect lec.nombre, (\n					select li1.titulo\n					from lector l1 join prestamo p1 on l1.id=p1.lector \n									join libro li1 on li1.id=p1.libro\n					where l1.id= lec.id and (COALESCE(p1.fecha_devuelto, GETDATE())-p1.fecha_prestado) <= all(\n												select (COALESCE(p11.fecha_devuelto, GETDATE())- p11.fecha_prestado)\n												from  prestamo p11\n												where p11.lector=p1.lector)\n					) as \'menos tiempo prestado\', (\n					select li1.titulo\n					from lector l1 join prestamo p1 on l1.id=p1.lector \n									join libro li1 on li1.id=p1.libro\n					where l1.id= lec.id and (COALESCE(p1.fecha_devuelto, GETDATE())-p1.fecha_prestado) >= all(\n												select (COALESCE(p11.fecha_devuelto, GETDATE())- p11.fecha_prestado)\n												from  prestamo p11\n												where p11.lector=p1.lector)\n					) as \'mas tiempo prestado\'\nfrom lector lec\nwhere lec.apellidos like \'%Lumbreras%\'','dificil',9,0),(1102,76,'Lectores que cumplan que un tercio o más de los libros que ha tomado en préstamo (devueltos o no) son de autores de algún libro donde el lector figura como primer solicitante (atributo libro.primer_solicitante).\nSe desea obtener en el resultado el identificador, nombre y apellido de esos lectores, el número de autores de libros de los que es primer solicitante, el número de libros de esos autores que tomó en préstamo y el número de autores en total de los que tiene préstamos.','select lc.id, lc.nombre, lc.apellidos, \n       count(distinct al.autor) as autores_prim,\n       count(distinct p.libro) as libros_aut_prim, \n	    ( select count(distinct alal.autor)\n          from prestamo pp join\n		       autorlibro as alal on pp.libro=alal.libro\n		  where pp.lector=lc.id -- correlación\n		) as autores_total\nfrom lector lc join\n     libro lb on lc.id=lb.primer_solicitante join\n	 autorlibro al on lb.id=al.libro left join\n	 ( prestamo p join\n	   autorlibro al2 on p.libro=al2.libro )\n	   on p.lector=lc.id and al.autor=al2.autor\ngroup by lc.id, lc.nombre, lc.apellidos\nhaving count(distinct p.libro) >= -- libros préstamo de autores de libros 1º solicitante\n        ( select count(distinct p2.libro)/3 -- 1/3 de libros tomados en préstamo\n          from prestamo p2\n		  where p2.lector=lc.id -- correlación\n		) \n','dificil',9,0),(1103,76,'Obtener todas las columnas de la tabla ejemplar para los libros de id>100, poniendo en la columna biblioteca de los ejemplares sin préstamos:\n- El id de la biblioteca sin ejemplares de ese libro con menor id entre las que su id<5.\n- Si todas las bibliotecas de id<5 tienen ejemplares del libro, mantener la biblioteca inicial.','-- Arturo 2019 para sql09\n\nselect e.libro, e.ejemplar, \n       case \n		 when count(p.libro)=0 then\n		     ( select coalesce(min(b.id), e.biblioteca)\n		       from biblioteca b left join\n			        ejemplar e2 on e2.biblioteca=b.id and\n			                       e2.libro=e.libro -- correlación\n			   where b.id<5 and e2.libro is null \n			 )\n		 else e.biblioteca\n	   end as biblioteca,\n       e.fecha_solicitud, e.fecha_compra\nfrom ejemplar e left join\n     prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar\nwhere e.libro >100\ngroup by e.libro, e.ejemplar, e.biblioteca, e.fecha_solicitud, e.fecha_compra\n','dificil',9,0),(1105,61,'-- Sin terminar\nTodos los empleados','-- Prueba de Javier Rojas 2020:\nselect *\nfrom empleado','facil',1,0),(1106,61,'Halla la suma de los salarios de los empleados, salario máximo, salario mínimo y salario medio. Las columnas del resultado deben llamarse igual a como se indica: salario total, salario máximo, salario mínimo y salario medio. En los cálculos no debe tenerse en cuenta el salario de los empleados que no tengan jefe.','-- Javier 2020 para sql01_1\nselect sum(salario) as \'salario total\', max(salario) as \'salario máximo\',\n       min(salario) as \'salario mínimo\',   avg(salario) as \'salario medio\'\nfrom empleado\nwhere jefe is not null;','facil',1,0),(1107,61,'Desde el departamento de igualdad nos piden que elaboremos un informe para los proyectos que correspondan con productos.\nNo piden para cada proyecto de este tipo, saber si trabaja una \'Mayoría hombres\', una \'Mayoría mujeres\' o si es \'Igualitario\'. \nEn el informe deben aparecer dos columnas: Producto e Informe donde aparecerám el NombreProy y el resultado del imforme de igualdad respectivamente.\n\nAyudas: utiliza case en count. Utiliza la tabla trabaja_completo(nss, salario, depto, numeroProy, deptoProy...) que contiene las parejas empleado-proyecto, cuando el empleado trabaja en el proyecto. Si el empleado no trabaja en proyectos numeroProy, deptoProy contienen nulos y si el proyecto no tiene empleados nss, salario, depto tienen nulos.','-- Javier 2020 para sql01_1\nselect NombreProy as Producto,\ncase when count(case when sexo=\'V\' then 1 end) > \n		  count(case when sexo=\'M\' then 1 end)\n		  then \'Mayoría hombres\'  \n	 when count(case when sexo=\'V\' then 1 end) < \n		  count(case when sexo=\'M\' then 1 end)\n		  then \'Mayoría mujeres\' \n	 else \'Igualitario\' end as Informe\nfrom trabaja_completo\nwhere NombreProy like \'Producto%\'\ngroup by NombreProy;','dificil',1,0),(1108,61,'Queremos saber qué empleados no están implicados en ningún proyecto. Para cada uno de ellos queremos mostrar un informe con tres columnas: NSS, Nombre comlpeto (concatenación de Nombre y Apellidos con un espacio en medio), y Datos.\nEn la columna datos debe aparecersu dirección, si no consta, mostrará su localidad. Si no tenemos ninguno de estos dados aparecerá la palabra \'deconocido\'\n\n\nAyudas: Utiliza la tabla trabaja_completo(nss, localidad, numeroProy...) que contiene las parejas empleado-proyecto, cuando el empleado trabaja en el proyecto. Si el empleado no trabaja en proyectos numeroProy contiene nulo y si el proyecto no tiene empleados nss y localidad tienen nulos.','-- Javier 2020 para sql01_1\nselect nss as NSS, CONCAT(nombre, \' \', apellidos) as \'Nombre completo\', coalesce(direccion, Localidad, \'desconocido\') as \'Datos\'\nfrom trabaja_completo\nwhere numeroProy is null','media',1,0),(1109,58,'1.	Crea una consulta con tres columnas: \na.	Número de artículo diferentes presentes en la BD.\nb.	Beneficio medio: mostrará el beneficio previsto medio de todos los artículos. Consideramos beneficio previsto a la diferencia entre precio de compra y precio de venta.\nc.	Beneficio mayor 3:  el número de artículos cuyo beneficio previsto es mayor o igual que 3.\n','-- Javier Rojas 2020\n-- 1º pregunta de la 1º prueba escrita de 2020\n\nselect  count(IDENT_ARTIC)as \'Número productos\',\n		avg (PREC_VENT - PREC_COMPR) as \'Beneficio medio\',\n		count(case \n             when PREC_VENT - PREC_COMPR >=3 then \'rentable\' \n             else null \n             end) as \'Beneficio mayor 3\'		 	 \nfrom articulo','media',1,0),(1110,58,'2.	Nombre, apellido, año de la venta y ciudad de los clientes que hayan realizado compras en alguna tienda de la localidad en la que ellos mismos residen y cuyo gerente tenga el apellido ‘Martínez’ o ‘Domínguez’.\n\nNotas: \na.	El formato de la fecha de venta es ‘yyyy-mm-dd’. Cuando no haya fecha, la consulta mostrará la expresión literal \'sin año\'.\nb.	El formato del campo nombr_gerent es del tipo: ‘Domínguez, Julián’, o ‘Martínez, Juan’.\n','-- Javier Rojas 2020\n-- 2º pregunta de la 1º prueba escrita de 2020\nselect distinct nombr_client, apell1, \ncoalesce(year(fech_vent), \'sin año\')as \'año\',\nc.CIUD as \'Ciudad\'\nfrom cliente c join\n         venta v on c.ident_client = v.ident_client join\n         tienda t on  t.ident_tiend = v.ident_tiend and\n                   c.ciud = t.ciud\nwhere t.nombr_gerent like \'%Martínez%\'\nor t.nombr_gerent like \'%Domínguez%\';\n				   ','media',1,0),(1111,76,'sqlserver\nObtener el nombre y apellidos de los lectores que hayan sido primer solicitante de algún libro, y que algún ejemplar de ese libro haya sido solicitado para su compra (fecha_solicitud) durante el periodo comprendido entre la inscripción del lector y los 365 días posteriores. En el resultado deberá figurar también el nombre de la biblioteca a la que corresponde el ejemplar, el título y editorial del libro y los códigos de libro y ejemplar.','-- Arturo 2020 para sql02_4\n \nselect lc.nombre, lc.apellidos, b.nombre as biblioteca, lb.titulo, lb.editorial, e.libro, e.ejemplar\nfrom lector lc join\n     libro lb on lb.primer_solicitante=lc.id join\n	 ejemplar e on e.libro=lb.id and\n	 			   e.fecha_solicitud between lc.fecha_inscripcion and \n				                             lc.fecha_inscripcion+365 join\n	 biblioteca b on e.biblioteca=b.id \n\n','facil',2,0),(1112,76,'sqlserver\nPrecio total de todos los ejemplares de la biblioteca \'Quevedo\' junto al número de libros (no confundir con ejemplares) diferentes disponibles en esa biblioteca y junto al número de ejemplares de la editorial \"El feriante\" en la misma biblioteca.','-- Arturo 2020 para sql02_4\n\nselect sum(l.precio) as \'precio total\',\n       count(distinct l.id) as libros,\n	   count( case\n			    when l.editorial=\'El feriante\' then \'contar\'\n		      end\n		   ) as \'ejemplares \"El feriante\"\'\nfrom libro l join\n     ejemplar e on l.id=e.libro join\n	 biblioteca b on e.biblioteca=b.id\nwhere b.nombre = \'Quevedo\' \n','media',2,0),(1113,76,'sqlserver\nPara los lectores que, en las bibliotecas Baroja y Unamuno, hayan tomado en préstamo a partir del año 2005 algún ejemplar de libro del que sean primeros solicitantes, queremos obtener el nombre y apellidos de los lectores, junto al título, editorial y precio del libro, además de las fechas de préstamo y devolución del ejemplar.\n\nNota: las fechas las queremos sin la hora, para ello utiliza convert(varchar(10), el_atributo_fecha , 103)','-- Arturo 2020 para la práctica sql02_4\n\nselect l.nombre, l.apellidos, lb.titulo, lb.editorial, lb.precio, \n       convert(varchar(10), p.fecha_prestado, 103) as fecha_prestado,\n	   convert(varchar(10), p.fecha_devuelto , 103) as fecha_devuelto\nfrom prestamo p join\n     libro lb on p.libro=lb.id and p.lector=lb.primer_solicitante join\n	 lector l on p.lector=l.id join\n	 ejemplar e on e.libro=p.libro and e.ejemplar=p.ejemplar join\n	 biblioteca b on e.biblioteca=b.id\nwhere b.nombre in (\'Baroja\', \'Unamuno\') and p.fecha_prestado>\'31-12-2004\'','media',2,0),(1114,76,'sqlserver\nCuántos lectores han tomado algún ejemplar en préstamo con \"fecha_prestado\" anterior a su \"fecha_compra\", cuántos ejemplares y cuántos libros  se han visto implicados en estos préstamos y cuántos préstamos son.\n\nAyuda 1:  la clave de ejemplar es compuesta, puedes concatenar sus dos parte con concat(libro, símbolo-especial, ejemplar) para contar las diferentes. Símbolo especial puede ser un &, $, - o cualquier otro.\nAyuda 3:  A veces, al concatenar números y caracteres obliga a transformarlos antes a texto. Para ello puedes usar, por ejemplo, cast(el_número as varchar(10))','-- Arturo 2020 para sql02_4\nselect count(distinct p.lector) as lectores,\n	 count(distinct concat(e.libro, \'$\', e.ejemplar)) as ejemplares,\n	 count(distinct e.libro) as libros, count(*) prestamos\nfrom biblioteca b join\n     ejemplar e on b.id=e.biblioteca join\n     prestamo p on e.libro=p.libro and e.ejemplar=p.ejemplar and\n				   e.fecha_compra > p.fecha_prestado','facil',2,0),(1115,76,'sqlserver \nPara todos aquellos títulos de libro que aparezcan en libros diferentes y de diferente editorial, queremos saber el título, apellidos y nombre del autor, nombre de la editorial y su precio. Si en algún caso no figurase el precio en la base de datos, poner el literal \'precio sin introducir\'. Si algún libro tuviera más de un autor obtener una fila con el mismo título-editorial-precio por cada autor. Ordenar las filas de la solución por título de libro y apellidos y nombre del autor.\n\nAyuda: en SQLServer se traduce a string con cast(valor-numérico as varchar(100))','-- Arturo 2020 para sql02_4\nselect distinct l1.titulo, a.apellidos, a.nombre, l1.editorial, \n       coalesce(cast(l1.precio as varchar(100)), \'precio sin introducir\') as precio\nfrom libro l1 join \n     libro l2 on l1.titulo=l2.titulo and \n	             l1.id<>l2.id and l1.editorial<>l2.editorial join\n	 autorlibro al on l1.id=al.libro join\n	 autor a on al.autor=a.id\norder by 1, 3, 2','media',2,0),(1116,76,'sqlserver\nPara las bibliotecas de fuera de Logroño, contar el número de préstamos sin devolver (sin fecha_devuelto), el número de ejemplares distintos en esos préstamos, el número de lectores que han hecho esos préstamos y cuántos de esos préstamos se hicieron antes del año 2005.\n\nAyuda: parece que en la BD puede haber más de un préstamo sin fecha de devolución que corresponde al mismo ejemplar.\nAyuda: para distinguir diferentes ejemplares se pueden concatenar las dos partes de su clave con concat(libro, símbolo, ejemplar). El símbolo puede ser cualquier carácter especial como @, #, $...','-- Arturo 2020 para sql02_4\nselect count(*) as prestamos, \n       count(distinct concat(e.libro, \'$\', e.ejemplar) ) as ejemplares, \n       count(distinct p.lector) as lectores, \n	   count(case when year(fecha_prestado)<2005 then \'contarlo\' end) as anteriores_2005\nfrom biblioteca b join\n	 ejemplar e on e.biblioteca=b.id join\n	 prestamo p on p.libro=e.libro and p.ejemplar=e.ejemplar\nwhere b.direccion not like \'%Logroño\' and p.fecha_devuelto is null\n','facil',2,0),(1117,76,'sqlserver\nbibliotecas que hayan prestado el mismo libro (cualquiera de sus ejemplares) al mismo lector varias veces, junto al título y editorial de estos libros y el identificador del lector','-- Arturo 2020 para sql02_4\nselect distinct b.nombre as biblioteca, l.titulo as libro, l.editorial, p1.lector as lector\nfrom biblioteca b join\n	 ejemplar e1 on b.id=e1.biblioteca join\n	 ejemplar e2 on b.id=e2.biblioteca and e1.libro=e2.libro join\n	 prestamo p1 on e1.libro=p1.libro and e1.ejemplar=p1.ejemplar join \n     prestamo p2 on e2.libro=p2.libro and e2.ejemplar=p2.ejemplar and\n	                p1.fecha_devuelto < p2.fecha_prestado and\n			        p1.lector=p2.lector join\n     libro l on e1.libro=l.id \norder by 1, 2;','media',2,0),(1118,58,'Cuántos artículos diferentes y cuántas unidades de todos ellos ha vendido cada proveedor en cada ciudad (entre todas las tiendas de la ciudad) a clientes españoles (\'E\' en nación) y en cuántas tiendas. Mostrar también, en las dos primeras columnas del resultado, el nombre de proveedor y  la ciudad de las tiendas y como últimas columnas los años de la primera y la última venta.','-- Arturo 2020 para sql03_4\nselect p.nombr_prov as proveedor, t.ciud as ciudad, \n       count(distinct v.ident_artic) as artículos,\n       sum(v.cant_artics) as unidades,\n       count(distinct v.ident_tiend) as tiendas,\n       min(year(v.fech_vent)) as primera_venta,\n	   max(year(v.fech_vent)) as última_venta\n from proveedor p join\n      articulo a on p.ident_prov=a.ident_prov join\n      venta v on v.ident_artic=a.ident_artic join\n      tienda t on v.ident_tiend=t.ident_tiend join\n	  cliente c on v.ident_client=c.ident_client\n where c.nacion=\'E\'\n group by p.ident_prov, t.ciud, p.nombr_prov\n','facil',3,0),(1119,58,'Queremos saber en qué ciudades se venden los artículos con pesos comprendidos entre 20 y 200. Además queremos obtener el número de ventas de tales artículos, el beneficio total previsto (a partir de los precios de compra y venta de los artículos, teniendo en cuenta las unidades vendidas en cada venta -cant_artics-). Además queremos obtener el beneficio real (calculado a partir del precio total de la venta, el precio de compra de los artículos y las unidades vendidas). \nSolo queremos que salgan las ciudades, que venden los artículos mencionados, con un beneficio previsto superior a 5.','select t.ciud as ciudad,\n	   count(*) as ventas,\n       sum((a.prec_vent-a.prec_compr)*v.cant_artics) as beneficio_previsto,\n       sum(v.prec_total-(v.cant_artics*a.prec_compr)) as beneficio_real\nfrom articulo a join\n     venta v on a.ident_artic=v.ident_artic join\n	 tienda t on v.ident_tiend=t.ident_tiend\nwhere a.peso between 20 and 200\ngroup by t.ciud\nhaving sum((a.prec_vent-a.prec_compr)*v.cant_artics) > 5','facil',3,0),(1120,58,'Mostrar el identificador, nombre y color de los artículos bolígrafo (que contengan la palabra \'bolígrafo\' en su nombre) para los que exista otro bolígrafo de menor peso y mayor beneficio previsto (diferencia entre sus precios de venta y de compra). Mostrar junto a la información del bolígrafo el identificador, color y nombre de proveedor de cada bolígrafo más ligero (y de mayor beneficio), la diferencia entre los pesos de los dos bolígrafos y la diferencia entre sus beneficios.','-- Arturo 2020 para sql03_4\nselect a1.ident_artic as id, a1.nombr_artic as nombre, a1.color, \n       a2.ident_artic as id_ligero, a2.color as color_ligero,\n	   p.nombr_prov as proveedor_ligero,\n	   a1.peso - a2.peso as diferencia_peso,\n	   a2.prec_vent-a2.prec_compr-(a1.prec_vent-a1.prec_compr) as ganancia\nfrom articulo a1 join\n     articulo a2 on a1.peso>a2.peso and\n	                a1.prec_vent-a1.prec_compr<a2.prec_vent-a2.prec_compr join\n	 proveedor p on a2.ident_prov=p.ident_prov\nwhere a1.nombr_artic like \'%bolígrafo%\' and a2.nombr_artic like \'%bolígrafo%\' ','media',3,0),(1121,58,'Obtener para los bolígrafos de peso leve (de cualquier tipo), para cada uno de los colores: el color, el número de unidades vendidas (a partir de cant_artics), el número medio de unidades vendidas por venta individual y la cantidad media pagada por cada bolígrafo (a partir de prec_total).\nNOTA: ejecuta primero select * from clasif_peso para ver cómo es esta tabla, que no aparece en el esquema de la BD comercio. ','-- Arturo 2020 para sql03_4\n\nSELECT a.color, sum(v.cant_artics) as unidades_vendidas, \n       sum(v.cant_artics)/count(*) as media_unidades_por_venta,\n	   sum(v.prec_total)/sum(v.cant_artics) as media_precio_boligrafo\nFROM articulo a join \n         clasif_peso cp on a.peso BETWEEN cp.peso_minim AND cp.peso_maxim  join\n		  venta v on a.ident_artic=v.ident_artic\nWHERE  cp.tipo_peso=\'leve\' and a.nombr_artic like \'bolígrafo%\'\nGROUP BY a.color\n\n-- select * from clasif_peso','media',3,0),(1122,58,'Identificador de tienda, ciudad y nombres de los artículos con precio de venta superior a 25, que se vendieron en la tienda a algún cliente de la misma ciudad, junto al número de clientes a los que se vendió el artículo en la tienda que sean de la misma ciudad de la tienda y el número de clientes de otras ciudades.','-- Arturo 2020 para sql03_4\nselect t.ident_tiend as Tienda, \n       t.ciud as Ciudad,\n       a.nombr_artic as Articulo,\n       count(distinct case when c.ciud=t.ciud then v.ident_client end) as Clientes_ciudad,\n	   count(distinct case when c.ciud<>t.ciud then v.ident_client end) as Resto_clientes\nfrom venta v join\n     articulo a on v.ident_artic=a.ident_artic join\n	 tienda t on v.ident_tiend=v.ident_tiend join\n	 cliente c on v.ident_client=c.ident_client\nwhere a.prec_vent>25\ngroup by t.ident_tiend, t.ciud, a.ident_artic, a.nombr_artic\nhaving count(distinct case when c.ciud=t.ciud then v.ident_client end)>0\n','dificil',3,0),(1123,58,'Queremos obtener, para los artículos con ventas en más de 2 tiendas durante el mismo año, el nombre del artículo, el año en el que se produjeron las ventas, el número de tiendas que los vendieron, el precio medio de venta por unidad, y el número de ciudades de donde procedían los clientes que hicieron las compras.','-- Arturo 2020 para sql03_4\nselect a.nombr_artic as Artículo,\n       year(v.fech_vent) as Año,\n       count(distinct v.ident_tiend) as Tiendas, \n       sum(v.prec_total)/sum(v.cant_artics) as Precio_venta_unidad, \n	   count(distinct c.ciud) as Ciudades_clientes\nfrom venta v join\n     articulo a on v.ident_artic=a.ident_artic join\n	 tienda t on v.ident_tiend=t.ident_tiend join\n	 cliente c on c.ident_client=v.ident_client\ngroup by v.ident_artic, year(v.fech_vent), a.nombr_artic\nhaving count(distinct v.ident_tiend)>2\n','media',3,0),(1124,58,'Identificador y ciudad de las tiendas que vendieron alguna calculadora en 2002, junto al número de clientes NO franceses (nacion<>\'F\') a los que se hicieron ventas posteriores a ese año. No nos interesa que salgan las tiendas que no vendieron nada a clientes NO franceses en el periodo mencionado.','-- Arturo 2020 para sql03_4\n\nselect t.ident_tiend tienda, t.ciud ciudad, \n       count(distinct v.ident_client) as clientes\nfrom tienda t join\n     venta v on t.ident_tiend=v.ident_tiend join\n     venta vcalc on v.ident_tiend=vcalc.ident_tiend join\n	 articulo acalc on vcalc.ident_artic=acalc.ident_artic join\n	 cliente c on c.ident_client=v.ident_client\nwhere acalc.nombr_artic like \'%calculadora%\' and year(vcalc.fech_vent)=2002 and\n      year(v.fech_vent)>2002 and c.nacion <> \'F\'\ngroup by t.ident_tiend, t.ciud','media',3,0),(1127,62,'Título y editorial de los libros que cuestan menos de 30 euros y fueron publicados a partir del año 2000','SELECT titulo, editorial\nFROM LIBRO\nWHERE precio < 30 AND año >=2000 ','facil',100,1),(1128,62,'Nombre y apellidos de los autores que han publicado más de 2 libros que se vendan a más de 50 euros, mostrando dicho número de libros y ordenando de mayor a menor por el número de libros.','SELECT nombre, apellidos, count(*) as \"nº libros\"\nFROM autorlibro INNER JOIN autor ON (id = autor)\nWHERE libro IN (SELECT id\n                FROM libro\n                WHERE precio >50)\nGROUP BY autor, nombre, apellidos\nHAVING count(*) > 2\nORDER BY \"nº libros\" DESC               ','media',100,1),(1129,61,'Calcular el número de empleados que trabajan a la vez en los proyectos 1, 2 y 400. Resolver esta consulta sin utilizar GROUP BY.','SELECT count(*) \nFROM trabaja t1 join\ntrabaja t2 on t1.empleado=t2.empleado join\ntrabaja t400 on t2.empleado=t400.empleado \nwhere t1.proyecto=1 and t2.proyecto=2 and t400.proyecto=400\n','media',2,1),(1130,61,'Mostrar el código de los empleados que trabajan a la vez en los proyectos 1 y 2 junto con las horas que dedica al proyecto (entre el 1 o el 2) al que dedica más horas y el valor medio de las horas trabajadas en dichos proyectos. Resolver esta consulta sin utilizar GROUP BY.','SELECT t1.empleado \'Empleado\',\n(case when (t1.horas>=t2.horas) then t1.horas\nelse t2.horas end) \'Máximo horas\', (t1.horas+t2.horas)/2 \'Media horas\'\nFROM trabaja t1 join\ntrabaja t2 on t1.empleado=t2.empleado\nwhere t1.proyecto=1 and t2.proyecto=2\n','media',2,1),(1131,61,'Mostrar el código de los empleados que trabajan a la vez en los proyectos 1 y 2 junto con las horas que dedica al proyecto (entre el 1 o el 2) al que dedica más horas y el valor medio de las horas trabajadas en dichos proyectos.','SELECT t1.empleado \'Empleado\', max(horas), avg(horas)\nFROM trabaja t1\nwhere t1.proyecto=1 or t1.proyecto=2\ngroup by t1.empleado\nhaving count(*)=2;','facil',3,1),(1132,61,'Mostrar el código de empleado de aquellos empleados que estén trabajando a la vez en los proyectos 1, 2 y 400. Mostrar también el máximo y la media de horas dedicadas a esos proyectos.','SELECT t1.empleado \'Empleado\', max(horas) \'Máximo horas\', avg(horas) \'Media horas\'\nFROM trabaja t1\nwhere t1.proyecto IN (1,2,400)\ngroup by t1.empleado\nhaving count(*)=3;\n','facil',3,1),(1133,82,'Obtener el dni y nombre de los guías que hablen euskera','SELECT guia.Dni, guia.Nombre\nFROM guia JOIN idioma ON guia.Dni = idioma.Dni\nWHERE idioma.Idioma = \'Euskera\'','facil',2,1),(1134,82,'Obtener el código de los viajes que utilizan para hospedarse hoteles de Donostia','SELECT DISTINCT hv.Destino, hv.FechaSalida\nfrom hotel_viaje as hv inner join hotel as h on hv.idhotel=h.idhotel\nWHERE h.localidad = \'Donostia\'','facil',2,1),(1135,82,'Obtener los viajes con destino a Barcelona que salen de Lasarte y que realizan alguna excursión a La Pedrera','SELECT V.Destino, V.FechaSalida\nFROM viaje AS V INNER JOIN excursion_opcional AS EO on V.destino=EO.Destino\nand V.FechaSalida=EO.FechaSalida\nWHERE V.CiudadSalida= \'Lasarte\' AND V.Destino = \'Barcelona\' AND EO.DestinoExcursion =\'La Pedrera\'','facil',2,1),(1136,82,'Obtener el dni y nombre de clientes que han realizado excursiones opcionales en algún viaje','SELECT DISTINCT c.Dni,c.Nombre\nFROM cliente as c  inner join  excursion_opcional_cliente as eoc on c.dni=eoc.dni','facil',2,1),(1137,82,'Por cada viaje en el que haya participado un cliente acompañado por un guía que tenga su mismo nombre de pila, obtener el identificador del viaje junto con el dni y nombre del cliente','SELECT DISTINCT V.destino, V.fechasalida, C.dni, C.nombre\nFROM (hotel_viaje_cliente HVC natural join cliente C) inner join\n	(viaje V inner join guia G on V.dni=G.dni) on HVC.Destino=V.Destino and HVC.FechaSalida=V.FechaSalida\nWHERE G.nombre=C.nombre\n# Se necesita DISTINCT: Debido a que un cliente puede alojarse en diferentes hoteles en el mismo viaje, un cliente puede aparecer con el mismo guía más de una vez\n# En el 2022 sale uno con nombre y apellido y dos con el nombre de pila','media',2,1),(1138,82,'Obtener Nombre y dirección de aquellos clientes que hayan participado en algún viaje en el que se hayan hospedado más noches en un mismo hotel que las noches que se hospedó en el hotel de código h09 el cliente con DNI \'72515655\' en el viaje que realizó a Namibia el \'2020-11-21\'','SELECT DISTINCT C.Nombre, C.Direccion\nFROM (hotel_viaje_cliente HVC1 natural join cliente AS C)\nINNER JOIN\nhotel_viaje_cliente HVC2\nON HVC1.Numnoches > HVC2.Numnoches WHERE HVC2.DNI=\'72515655\' AND HVC2.FechaSalida=\'2020-11-21\' AND HVC2.Destino=\'Namibia\' AND HVC2.IdHotel=\'h09\'','media',2,1),(1139,82,'Obtener el código de los viajes sin guía','SELECT Destino, FechaSalida\nFROM viaje\nWHERE Dni IS NULL','facil',1,1),(1140,82,'Obtener el código del viaje y nombre del hotel de aquellos viajes con hoteles asignados en Donostia o Rotorua','SELECT Destino, FechaSalida, Nombre\nFROM hotel_viaje inner JOIN hotel on hotel_viaje.idhotel=hotel.idhotel  \nWHERE Localidad IN (\'Donostia\', \'Rotorua\')','facil',2,1),(1141,82,'Obtener el nombre de los clientes de Haro que hayan realizado algún viaje','SELECT DISTINCT Nombre\nFROM cliente NATURAL JOIN hotel_viaje_cliente\nWHERE Direccion LIKE \'%Haro%\'','facil',2,1),(1142,82,'Obtener todos los viajes del año 2020 (fechas) que se hicieron de Donostia a Sahara','SELECT FechaSalida\nFROM viaje\nWHERE (FechaSalida BETWEEN \'2020-01-01\' AND \'2020-12-31\') AND CiudadSalida = \'Donostia\' AND \nDestino = \'Sahara\'','facil',1,1),(1143,82,'Obtener los nombres tanto de guías cómo de clientes','SELECT Nombre\nFROM guia\nUNION\nSELECT Nombre\nFROM cliente','facil',4,1),(1144,82,'Obtener los guías y clientes cuyos nombres y apellidos coinciden','SELECT g.Nombre\nFROM guia g inner join cliente c on g.Nombre=c.Nombre','facil',4,1),(1145,82,'Obtener los nombres y apellidos de guías que no coinciden con nombre y apellidos de clientes','SELECT g.Nombre\nFROM guia g\nWHERE g.nombre NOT IN (SELECT Nombre FROM cliente)','facil',4,1),(1146,82,'Obtener el precio promedio de los viajes que salen de Donostia','SELECT AVG( Dias*PrecioDia)\nFROM viaje\nWHERE CiudadSalida = \'Donostia\'','facil',1,1),(1147,82,'Obtener el número total de viajes realizados en 2020','SELECT COUNT(*)\nFROM viaje\nWHERE FechaSalida BETWEEN \'2020-01-01\' AND \'2020-12-31\'','facil',1,1),(1148,82,'Obtener el número total de guías distintos que han realizado viajes a Donostia','SELECT COUNT(DISTINCT Dni)\nFROM viaje\nWHERE Destino = \'Donostia\'','facil',1,1),(1149,82,'Obtener por cada guía el número de idiomas que habla','SELECT Dni,COUNT(*)\nFROM idioma\nGROUP By Dni','facil',3,1),(1150,82,'Obtener, para cada destino de viaje, el número de guías que hablen Italiano y que acompañan a un viaje, con posibilidad de alojarse en algún hotel de Donostia','SELECT V.Destino,COUNT(DISTINCT V.DNI)\nFROM (viaje AS V inner JOIN idioma AS I on V.dni=I.dni) inner JOIN \n             (hotel_viaje AS HV inner JOIN hotel AS H on HV.idhotel=H.idhotel)on V.destino=HV.destino and V.fechasalida=HV.fechasalida where\nI.Idioma = \'Italiano\' And H.Localidad=\'Donostia\'\nGROUP BY V.Destino','media',3,1),(1151,82,'Obtener la identificación de la excursión opcional más cara que se ofrece','SELECT Destino, FechaSalida, numero\nFROM excursion_opcional AS EO\nWHERE EO.Precio = (SELECT MAX(EO2.Precio) FROM excursion_opcional AS EO2)','facil',7,1),(1152,82,'Obtener el dni de los guías que no han intervenido en ningún viaje','SELECT G.Dni\nFROM guia AS G\nWHERE NOT EXISTS (SELECT * FROM viaje AS V WHERE G.Dni=V.Dni)','facil',8,1),(1153,82,'Obtener el nombre y Dni de los guías que hablen lengua de signos y que por lo menos han acompañado una vez a algún viaje que ha utilizado para hospedarse un hotel de Vigo','SELECT g.Dni, g.Nombre\nFROM  idioma as I natural join guia g\nWHERE I.Idioma = \'Lengua de signos\'\nAND EXISTS (SELECT *\n              FROM viaje AS V inner JOIN hotel_viaje as HV on V.destino= \nHV.destino and V.fechasalida=HV.fechasalida  inner JOIN hotel AS H\non H.idhotel=HV.idhotel \n              WHERE H.Localidad = \'Vigo\' and I.dni=V.dni)','media',8,1),(1154,82,'Obtener el Dni y nombre de los guías que no hablen euskera','SELECT Dni, Nombre\nFROM guia AS G \nWHERE NOT EXISTS (SELECT * FROM idioma As I WHERE G.Dni=I.Dni AND I.Idioma = \'Euskera\')','facil',8,1),(1155,82,'Obtener el Dni, Nombre y dirección de clientes que hayan realizado algún viaje hospedándose en el hotel ‘Corner Hotel’ de Windhoek (capital de Namibia)','SELECT C.dni, C.Nombre, C.Direccion\nFROM cliente AS C \nWHERE EXISTS (SELECT * FROM hotel_viaje_cliente AS HVC INNER JOIN hotel AS H\n ON HVC.idhotel=H.idhotel WHERE C.Dni=HVC.Dni AND H.Nombre = \'Corner Hotel\' AND H.Localidad = \'Windhoek\'\n )','media',8,1),(1156,82,'Obtener el dni, nombre y dirección de clientes que no hayan realizado ningún viaje hospedándose en el hotel ‘Corner Hotel’ de Windhoek (capital e Namibia)','SELECT C.Nombre, C.Direccion\nFROM cliente AS C \nWHERE NOT EXISTS (SELECT * FROM hotel_viaje_cliente AS HVC INNER JOIN hotel AS H\n ON HVC.idhotel=H.idhotel where C.Dni=HVC.Dni AND H.Nombre = \'Corner Hotel\' AND H.Localidad = \'Windhoek\')','media',8,1),(1157,82,'Obtener el Dni y nombre de guías que han acompañado a viajes cuyo precio por día ha superado los 500 euros','SELECT G.Dni,G.nombre\nFROM guia AS G \nWHERE G.Dni IN (SELECT V.Dni FROM viaje as V\n WHERE V.PrecioDia > 500)','facil',7,1),(1158,82,'Obtener el dni y nombre de los clientes que han realizado algún viaje hospedándose en un hotel localizado en Sahara','SELECT Dni,Nombre\nFROM cliente \nWHERE Dni IN (SELECT Dni FROM hotel_viaje_cliente WHERE IdHotel\nIN (SELECT  IdHotel  FROM hotel WHERE Localidad = \'Sahara\') )','facil',7,1),(1159,82,'Obtener el dni de los clientes que no están apuntados a ninguna excursión opcional','SELECT Dni\nFROM cliente  \nWHERE Dni NOT IN (SELECT Dni FROM excursion_opcional_cliente)','facil',7,1),(1160,82,'Obtener el código y nombre de los hoteles de Lima que tienen la misma capacidad que el hotel \"Hotel Callao\" de Lima. En el resultado no debe aparecer el hotel Callao pèro sí la capacidad','SELECT H.IdHotel, H.Nombre, H.Capacidad\nFROM hotel AS H WHERE H.Localidad = \'Lima\' and H.Nombre<>\'Hotel Callao\'\nAND H.Capacidad IN (SELECT Capacidad FROM hotel WHERE Nombre = \'Hotel Callao\' AND Localidad = \'Lima\' )','facil',7,1),(1161,82,'Obtener el destino y fecha de salida de viajes con el mismo destino y duración que el viaje desde Lasarte del día 1 de julio de 2020','Select destino,fechasalida \nfrom viaje\nwhere destino =  (SELECT destino from viaje where ciudadsalida=\'Lasarte\' and fechasalida=\'2020-01-01\') and\n                   dias in (SELECT dias from viaje where ciudadsalida=\'Lasarte\' and fechasalida=\'2020-01-01\')','media',7,1),(1162,82,'Obtener cuántos clientes no han contratado ninguna excursión opcional','SELECT Count(*)\nFROM cliente AS C \nWHERE Dni NOT IN (SELECT Dni FROM excursion_opcional_cliente)','facil',7,1),(1163,82,'Obtener los viajes cuyo precio por día sea superior al precio por día de todos los viajes con destino a Rotorua. El resultado también mostrará el precio por día del viaje','SELECT Destino, FechaSalida, PrecioDia\nFROM viaje \nWHERE PrecioDia > ALL(SELECT PrecioDia FROM viaje WHERE Destino = \'Rotorua\')','media',7,1),(1164,82,'Obtener los viajes cuyo precio por día sea superior al precio por día de algún viaje con destino a Rotorua. El resultado también mostrará el precio por día del viaje','SELECT Destino, FechaSalida, PrecioDia*dias\nFROM viaje \nWHERE PrecioDia > ANY(SELECT PrecioDia FROM viaje WHERE Destino = \'Rotorua\')','media',7,1),(1165,82,'Obtener el viaje más caro. El precio también aparecerá en el resultado','SELECT V1.Destino, V1.FechaSalida, PrecioDia*V1.Dias\nFROM viaje AS V1\nWHERE V1.PrecioDia*V1.Dias >=ALL(SELECT V2.PrecioDia*V2.Dias FROM viaje AS V2)','media',7,1),(1166,82,'Obtener los viajes donde el precio de cada una de sus excursiones iguala o supera al precio por día del viaje en cuestión','SELECT V1.Destino, V1.FechaSalida\nFROM viaje AS V1\nWHERE V1.PrecioDia <= ALL(SELECT EO.Precio FROM excursion_opcional AS EO WHERE V1.Destino= EO.Destino AND V1.FechaSalida= EO.FechaSalida)','media',8,1),(1167,82,'Obtener el dni de los clientes que no han participado en el viaje con destino a Sahara del día 2 de noviembre de 2020','SELECT Dni\nFROM cliente\nWHERE Dni <> ALL (SELECT Dni from hotel_viaje_cliente WHERE Destino = \'Sahara\' AND FechaSalida = \'2020-11-02\')','facil',7,1),(1168,82,'Obtener los guías que han acompañado cómo mucho a un viaje con destino a Barcelona','SELECT Dni\nFROM guia\nWHERE dni not in(SELECT dni\n                FROM viaje\n                WHERE Destino=\'Barcelona\'\n                GROUP BY dni\n                HAVING COUNT(*)>1)','media',7,1),(1169,82,'Obtener los guías que han realizado dos o más viajes con destino Barcelona','SELECT Dni\nFROM viaje\nWHERE destino=\'Barcelona\'\nGROUP BY DNI\nHAVING COUNT(*)>1','facil',3,1),(1170,82,'Obtener el dni y nombre de los clientes que han hecho algún viaje en el que se han alojado en Toledo y que han elegido excursiones opcionales en todos sus viajes en los que se han alojado en un hotel de Toledo.','SELECT C.Dni, C.Nombre\nFROM cliente AS C INNER JOIN \n		hotel_viaje_cliente AS HVC2 ON C.Dni=HVC2.Dni \n		INNER JOIN hotel ON HVC2.IdHotel=hotel.IdHotel\nWHERE hotel.Localidad = \'Toledo\' AND\n	  NOT EXISTS (SELECT *\n                  FROM hotel_viaje_cliente AS HVC INNER JOIN hotel ON HVC.IdHotel=hotel.IdHotel\n                  WHERE hotel.Localidad = \'Toledo\' AND C.Dni=HVC.Dni\n                 AND NOT EXISTS(SELECT *\n                            FROM excursion_opcional_cliente AS EOC\n                            WHERE C.Dni=EOC.Dni AND HVC.Destino=EOC.Destino AND      \n								HVC.FechaSalida=EOC.FechaSalida));','dificil',9,1),(1171,82,'Obtener el dni y nombre de los clientes que no han elegido ninguna excursión opcional en alguno de los viajes cuyo alojamiento esté ubicado en Toledo. Puede que en otro viaje con alojamiento en Toledo sí que haya elegido excursiones opcionales','SELECT C.Dni,C.Nombre \nFROM cliente AS C\nWHERE EXISTS (SELECT *\n                  FROM hotel_viaje_cliente AS HVC INNER JOIN hotel as H on HVC.idhotel=H.idhotel\n                 WHERE H.Localidad = \'Toledo\' AND C.Dni=HVC.Dni\n                 AND NOT EXISTS(SELECT *\n                                    FROM excursion_opcional_cliente AS EOC\n                                   WHERE EOC.Dni=HVC.Dni AND HVC.Destino=EOC.Destino AND HVC.FechaSalida=EOC.FechaSalida))','media',8,1),(1172,82,'Obtener las excursiones opcionales en las que se hayan apuntado más de 3 clientes','SELECT Destino, FechaSalida, numero\nFROM excursion_opcional_cliente\nGROUP BY Destino, FechaSalida, numero\nHAVING COUNT(*) > 3','facil',3,1),(1173,82,'Obtener los viajes en las que todas las excursiones opcionales programadas en ese viaje tienen el mismo lugar de salida','SELECT Destino, FechaSalida\nFROM excursion_opcional\nGROUP BY Destino, FechaSalida\nHAVING COUNT(DISTINCT LugarSalida) = 1','facil',3,1),(1174,82,'Obtener el dni de los clientes que, habiendo realizado viajes a Toledo, en esos viajes han conseguido alojarse en todos los hoteles de esa ciudad','SELECT Dni\nFROM hotel_viaje_cliente as hvc inner Join hotel as h\non hvc.idhotel=h.idhotel\nWHERE hvc.destino = \'Toledo\' and h.Localidad = \'Toledo\'\nGROUP BY Dni \nHAVING COUNT(DISTINCT h.IdHotel) =\n                                  (SELECT COUNT(*)\n                                                 FROM hotel WHERE Localidad = \'Toledo\')\n','media',8,1),(1175,82,'Obtener la identificación y el nombre del hotel más elegido por los clientes, indicando el número de veces que ha sido elegido','SELECT h.idhotel, Nombre,COUNT(*) AS Total\nFROM hotel_viaje_cliente AS HV1 NATURAL JOIN hotel as h \nGROUP BY h.IdHotel,h.Nombre\nHAVING COUNT(*)>=ALL(SELECT COUNT(*)\n		From hotel_viaje_cliente AS HV2\n                                  GROUP BY HV2.IdHotel)\n','media',7,1),(1176,82,'Obtener el dni y nombre del guía que acompaña al viaje, el código del viaje y el total del precio en cuanto a excursiones opcionales para el viaje más caro en cuanto al total del precio total entre todas sus excursiones opcionales.','SELECT g.Dni,g.Nombre, v.Destino,v.FechaSalida, SUM(precio) AS Total\nFROM (guia as g INNER JOIN viaje as v ON g.dni=v.dni) INNER JOIN excursion_opcional as eo on eo.destino=v.destino and v.fechasalida=eo.fechasalida\nGROUP BY v.Destino,v.FechaSalida,g.Dni,g.Nombre\nHAVING SUM(eo.Precio)>=ALL(SELECT SUM(eo1.precio)\n                           FROM excursion_opcional as eo1\n					     GROUP BY eo1.Destino,eo1.FechaSalida)\n','media',7,1),(1177,82,'Obtener todos los datos de los viajes. Si estos tienen excursiones opcionales, además los datos de cada excursión opcional. En el caso de no tener excursiones opcionales las cinco últimas columnas contendrán NULL','SELECT V.*, EO.numero, EO.DestinoExcursion, EO.HoraSalida, EO.LugarSalida, EO.Precio \nFROM viaje AS V LEFT JOIN excursion_opcional AS EO\nON V.Destino=EO.Destino AND V.FechaSalida=EO.FechaSalida  \n','facil',4,1),(1178,82,'Obtener todos los datos de las excursiones opcionales. Si éstas tienen clientes además el dni y nombre de los clientes. En el caso de no tener clientes las dos últimas columnas contendrán NULL.','SELECT EO.*, C.Dni, C.Nombre \nFROM excursion_opcional AS EO LEFT JOIN (excursion_opcional_cliente as EOC INNER JOIN cliente as C on EOC.dni=C.dni)\nON EOC.Destino=EO.Destino AND EOC.FechaSalida=EO.FechaSalida AND EOC.Numero=EO.Numero\n','media',4,1),(1179,82,'Obtener todos los datos de las excursiones opcionales y el número de clientes que las han ele-gido, si una excursión opcional no la ha elegido nadie deberá aparecer un 0','SELECT EO.Destino, EO.FechaSalida, EO.Numero, Count(EOC.Dni)\nFROM excursion_opcional_cliente AS EOC Right Join excursion_opcional as EO\nON EOC.Destino=EO.Destino AND EOC.FechaSalida=EO.FechaSalida AND EOC.Numero =EO.Numero\nGROUP BY EO.Destino, EO.FechaSalida, EO.Numero\n','media',4,1),(1180,82,'Por cada excursión opcional en la que participan menos de 5 clientes, obtener el número de ve-ces que ha sido elegida, junto con el identificador de la excursión opcional. Se deben incluir las excursiones opcionales que no han sido elegidas por nadie, en cuyo caso se devolverá el valor 0','SELECT EO.FechaSalida, EO.Destino,EO.Numero, COUNT(EOC.Dni) \nFROM excursion_opcional AS EO LEFT JOIN excursion_opcional_cliente AS EOC\nON EO.Destino=EOC.Destino AND EO.FechaSalida=EOC.FechaSalida AND EO.Numero=EOC.Numero\nGROUP BY FechaSalida, Destino, Numero\nHAVING COUNT(Dni)<5\n','media',4,1),(1181,82,'Obtener para cada guía su DNI, número de teléfono y su procedencia: Gipuzkoa (si su teléfono empieza por 943), Navarra (si su teléfono empieza por 948) o de otro sitio','SELECT dni, Ntelefono, CASE\n						WHEN Ntelefono LIKE \'943%\' THEN \'Gipuzkoa\'\n                        WHEN Ntelefono LIKE \'948%\' THEN \'Navarra\'\n                        ELSE \'Otro\'\n                        END AS Origen\nFROM guia\n','media',1,1),(1182,82,'Obtener el código del viaje más barato','SELECT Destino, FechaSalida\nFROM  viaje \nWHERE (PrecioDia * Dias)=\n				(SELECT MIN(PrecioDia * Dias)\n                                    FROM  viaje )\n','facil',7,1),(1183,82,'Obtener el destino, la fecha de salida y el nombre del guía que los acompaña, de los viajes en los que coincida el destino, la fecha de salida y el precio por día del viaje, con el destino, la fecha de salida y el precio por día de alguna excursión opcional, siempre y cuando esta excursión opcional haya sida elegida por algún cliente.','SELECT DISTINCT V.Destino, V.FechaSalida, G.Nombre\nFROM guia as G inner join \nviaje as V on G.dni=V.dni\nWHERE (V.Preciodia,V.destino,V.fechasalida) IN\n(SELECT EO.Precio,EO.destino,EO.fechasalida\n FROM excursion_opcional as EO inner join \n excursion_opcional_cliente as EOC on\n EO.destino=EOC.destino AND EO.fechasalida=EOC.fechasalida and EO.numero=EOC.numero)','media',7,1),(1184,82,'Obtener el identificador y nombre de los hoteles y el número de clientes que los han elegido en los viajes. Si un hotel no lo ha elegido nadie deberá aparecer un 0.','SELECT H.IdHotel, H.nombre, Count(HVC.Dni) as \'Total clientes\'\nFROM hotel_viaje_cliente AS HVC Right Join hotel AS H\nON HVC.IdHotel=H.IdHotel\nGROUP BY H.IdHotel, H.nombre\n','facil',4,1),(1185,82,'Obtener el identificador de los viajes y el DNI del guía, de aquellos viajes en los que todos los clientes han elegido el mismo hotel','SELECT v.destino, v.fechasalida, v.dni\nFROM hotel_viaje_cliente as hvc inner join \nviaje as v on v.destino=hvc.destino and v.fechasalida=hvc.fechasalida \nGROUP BY v.destino, v.fechasalida, v.dni\nHAVING COUNT(DISTINCT hvc.idhotel) =1\n','media',4,1),(1186,82,'Obtener el dni y nombre de guías que hablando alemán no hayan participado en viajes ni con destino a Berlín ni con destino a Donostia.','SELECT G.Dni, G.Nombre\nFROM guia as G INNER JOIN idioma as I on G.dni=I.dni\nWHERE I.Idioma = \'Alemán\'\nAND G.Dni NOT IN (SELECT DNI\n                 FROM viaje WHERE Destino = \'Berlín\' or Destino = \'Donostia\')\n','media',7,1),(1187,82,'Obtener el dni y nombre de los guías que hablando gallego no hayan acompañado nunca a un viaje con destino a Vigo.','SELECT G.dni, G.Nombre\nFROM  guia G natural join  idioma i\nWHERE Idioma = \'Gallego\'\nAND G.Dni NOT IN (Select Dni from viaje WHERE Destino =\'Vigo\')\n','facil',7,1),(1188,82,'Obtener por cada viaje con excursiones opcionales que hayan sido realizadas por clientes, el destino, la fecha de salida y el número de excursión de la excursión opcional que más clientes ha tenido en ese viaje','SELECT EOC1.Destino, EOC1.FechaSalida, EOC1.Numero\nFROM  excursion_opcional_cliente AS EOC1 \nGROUP BY EOC1.Destino, EOC1.FechaSalida, EOC1.Numero\n				HAVING COUNT(EOC1.Dni) \n                              >=ALL (SELECT COUNT(EOC2.Dni)\n                                    FROM  excursion_opcional_cliente AS EOC2 \n                                    WHERE EOC1.Destino= EOC2.Destino AND EOC1.FechaSalida= EOC2.FechaSalida\nGROUP BY EOC2.Numero)\n','media',8,1),(1189,82,'Obtener el dni y nombre de los clientes que siempre han elegido viajes que cuestan más de 200 euros al día','SELECT distinct c.Dni, c.Nombre\nFROM  cliente as c inner join hotel_viaje_cliente as hvc on c.dni=hvc.dni\nAND NOT EXISTS (SELECT *\n               FROM  hotel_viaje_cliente AS HVC2 INNER JOIN viaje as V ON   HVC2.Destino = V.Destino AND HVC2.FechaSalida = V.FechaSalida WHERE (PrecioDia) <=200 AND hvc.dni=HVC2.dni )\n','facil',8,1),(1190,82,'Obtener el dni y nombre del guía que ha acompañado en todos los viajes a Vigo; puede que además haya acompañado en otros viajes','Select g.dni,g.nombre from guia as g inner join viaje as v on g.dni=v.dni\nWhere v.destino =\'Vigo\'\nGroup by g.dni, g.nombre\nHaving count(*) =\n(Select count(*)\nFrom viaje where viaje.destino =\'Vigo\')\n','media',8,1),(1191,82,'Obtener el dni y nombre del guía que ha acompañado al viaje con destino a Donostia el 1 de enero del 2019 pero no al viaje con destino a Donostia el 1 de Enero del 2021','SELECT Dni,nombre\nFROM guia\nWHERE Dni IN (SELECT Dni FROM viaje \n               WHERE Destino = \'Donostia\' AND FechaSalida =\'2019-01-01\')\nAND Dni NOT IN (SELECT Dni FROM viaje\n               WHERE Destino = \'Donostia\' AND FechaSalida= \'2021-01-01\')\n','facil',7,1),(1192,82,'Obtener dni y nombre de los guías que sólo han acompañado a viajes con destino a Haro','SELECT distinct g.Dni, g.Nombre \nfrom guia as g inner Join viaje as v on v.dni=g.dni and Destino=\'Haro\'\nWHERE NOT EXISTS \n                 (Select *\n                  From viaje V\n                  WHERE V.Destino <> \'Haro\'\n                   AND g.Dni=V.Dni) \n\n','media',8,1),(1193,82,'La empresa quiere hacer ofertas en el precio por día de determinados viajes del año 2020 y 2021: 15 días o menos un 5% de descuento, entre 15 y 20 días un 10%, y el resto los mantiene con el mismo precio. Obtener para cada viaje que ha modificado el precio, su identificación, duración, precio por día antiguo y nuevo precio.','SELECT Destino, FechaSalida, Dias, PrecioDia AS Viejo,\n CASE WHEN Dias <=15 THEN PrecioDia-PrecioDia*5/100\n      WHEN Dias BETWEEN 15 AND 20 THEN\n      PrecioDia-PrecioDia*10/100\n         ELSE PrecioDia END AS Nuevo\nFROM viaje\nWHERE FechaSalida BETWEEN \'2021-01-01\' AND \'2022-12-31\' and dias<=20','facil',1,1),(1194,82,'Obtener para cada guía que ha acompañado viajes contratados por clientes, cuántos viajes diferentes ha hecho, a cuántos destinos diferentes, cuántos viajeros diferentes y la fecha de salida de su primer viaje.','SELECT V.dni as DNI_GUIA, COUNT(distinct(concat (V.destino, \' \' ,V.FechaSalida))) as VIAJES, \nCOUNT(distinct(V.destino)) AS DESTINOS, COUNT(distinct HVC.dni) AS CLIENTES, \nMin(V.FechaSalida)AS FECHA_PRIMER_VIAJE\nFROM viaje V join hotel_viaje_cliente HVC on V.destino=HVC.destino and V.FechaSalida=HVC.FechaSalida \ngroup BY V.dni\n','facil',2,1),(1195,82,'Seleccionar el  nombre y el dni de los clientes que han viajado a Donostia.','SELECT c.Nombre, c.dni\nFROM cliente c natural join hotel_viaje_cliente hvc\nWHERE hvc.destino=\'Donostia\'\n','facil',1,1),(1196,82,'Obtener los datos de los guías que han participado en algún viaje con destino a Sahara, pero no han participado en ningún viaje a Logroño.','SELECT *\nFROM guia\nWHERE Dni IN (SELECT V.Dni\n              FROM viaje AS V\n              WHERE V.Destino = \'Sahara\')\nAND Dni NOT IN (SELECT Dni\n              FROM viaje \n              WHERE Destino=\'Logroño\');\n','facil',7,1),(1197,82,'Obtener el nombre y dni de los guías que hayan acompañado a viajes a los que hayan ido al menos dos clientes.','SELECT DISTINCT g.Nombre, g.Dni\nFROM guia as g inner join viaje as v on g.Dni=v.Dni\nWHERE (v.Destino, v.Fechasalida) in (SELECT hvc.Destino, hvc.Fechasalida\n   FROM hotel_viaje_cliente as hvc\n   GROUP BY hvc.Destino, hvc.Fechasalida\n   HAVING count(DISTINCT hvc.dni) >= 2)\n','media',7,1),(1198,82,'Obtener la identificación de todos los hoteles en los que se haya alojado una misma persona al menos dos veces.\n\n','SELECT HVC.IdHotel\nFROM hotel_viaje_cliente HVC\nGROUP BY HVC.IdHotel, HVC.Dni\nHAVING(COUNT(HVC.Dni)>1)\n','media',3,1),(1199,82,'Mostrar el destino del viaje, fecha de salida, número de excursión opcional y destino de la excursión y cantidad de dinero recaudado en las excursiones opcionales en las que el guía del viaje solo haya participado en viajes en ese destino de viaje.','SELECT eo.Destino, eo.FechaSalida,eo.Numero, eo.DestinoExcursion,SUM(Precio)\nFROM viaje as v NATURAL JOIN \nexcursion_opcional eo inner JOIN \nexcursion_opcional_cliente eoc on \neo.destino=eoc.destino and eo.fechasalida=eoc.fechasalida and eo.Numero=eoc.Numero\nWHERE NOT EXISTS(SELECT *\nFROM viaje v2\nWHERE v.Dni = v2.Dni AND v.Destino != v2.Destino)\nGROUP BY eo.Destino, eo.FechaSalida,eo.Numero, eo.DestinoExcursion\n','dificil',8,1),(1200,82,'Obtener el dni de los clientes que han realizado viajes con excursiones opcionales con precio superior a 755, aunque dicho cliente no hay realizado la excursión. En el resultado de la consulta ha de aparecer también la identificación del viaje y numero de excursión donde el precio sea mayor a 755€','SELECT DISTINCT HVC.Dni, HVC.Destino, HVC.FechaSalida, EO.Numero\nFROM hotel_viaje_cliente HVC Natural JOIN excursion_opcional EO\nWHERE EO.Precio>755\n','facil',2,1),(1201,82,'Para cada cliente que haya hecho excursiones opcionales, obtener su dni y cuántas excursiones ha hecho por cada viaje, para aquellos clientes que hayan hecho más de una excursión opcional. En el resultado ha de aparecer también la identificación del viaje..','SELECT Dni, Destino, FechaSalida, COUNT(*) AS \'TotalExcursiones\'\nFROM excursion_opcional_cliente\nGROUP BY Dni, Destino, FechaSalida\nHAVING COUNT(*)>1\n','facil',3,1),(1202,82,'Obtener identificación y precio de los viajes más caros que la media.','SELECT Destino, FechaSalida, (Dias * PrecioDia) AS PrecioTotal\nFROM viaje\nWHERE (Dias * PrecioDia) > (SELECT AVG(Dias * PrecioDia) FROM viaje)\n','media',7,1),(1203,82,'Obtener la identificación de los viajes en los que el precio medio de las excursiones opcionales de ese viaje supere el precio medio de todas las excursiones opcionales recogidas en la base de datos. En la solución aparecerá además de la identificación de los viajes y el nombre de los guías que acompañan a los mismos.','SELECT v1.Destino, v1.FechaSalida, G.Nombre \nFROM (viaje as v1 INNER JOIN \n	  excursion_opcional as EO ON v1.destino= EO.destino and v1.fechasalida=EO.fechasalida)\n	  INNER JOIN guia as G on G.dni=v1.dni\nGROUP BY v1.Destino, v1.FechaSalida, G.Nombre\nHAVING AVG(EO.Precio)>(SELECT AVG(Precio)\n			FROM excursion_opcional)\n','media',7,1),(1204,82,'Obtener el dni y nombre de los guías que han participado en todos los viajes con destino a Kioto.','SELECT G.Dni, G.Nombre\nFROM guia AS G\nWHERE NOT EXISTS (SELECT *\n                  FROM viaje AS V \n                  WHERE V.Destino = \'Kioto\' and \n				  (V.Destino,V.FechaSalida) NOT IN \n				    (SELECT V.Destino,V.FechaSalida\n                      From viaje V\n                      WHERE G.Dni= V.Dni))\n','dificil',8,1),(1205,82,'Obtener el Dni y nombre de los clientes que han participado en algún viaje con destino a Namibia pero en ninguno a Rotorua.','SELECT C.Dni, C.Nombre\nFROM cliente AS C\nWHERE EXISTS(SELECT *\nFROM hotel_viaje_cliente AS HVC\nWHERE C.Dni=HVC.Dni AND HVC.Destino = \'Namibia\')\nAND NOT EXISTS	(SELECT *\nFROM hotel_viaje_cliente AS HVC1\nWHERE C.Dni=HVC1.Dni AND HVC1.Destino = \'Rotorua\')\n','dificil',8,1),(1206,82,'Obtener el dni, nombre e idioma de los guías que hablen el idioma que menos guías hablan. En el resultado deberá aparecer también ese idioma.','Select Distinct G.dni, G.Nombre, I.Idioma\nFrom guia AS G INNER JOIN idioma AS I ON G.dni=I.dni\nWhere I.Idioma IN  (Select idioma\n                                  From idioma\n                                   Group by Idioma\n                                   HAVING Count(*)<=ALL \n									(Select Count(*) From idioma\n                                   Group by idioma))\n','dificil',8,1),(1207,82,'Obtener los códigos de las excursiones opcionales en las que no hay clientes','SELECT Destino, FechaSalida, Numero \nFROM  excursion_opcional \nWHERE (Destino, FechaSalida, Numero ) NOT IN\n(SELECT  Destino, FechaSalida, Numero \nFROM  excursion_opcional_cliente )\n','facil',7,1),(1208,82,'Obtener el número de veces que ha sido elegido cada hotel de la base de datos siempre que su identificación empieze por la letra \'h\'. Ordena los resultados descendentemente por ese número','SELECT H.IdHotel, COUNT(Hvc.dni)\nFROM hotel H LEFT JOIN hotel_viaje_cliente Hvc ON H.IdHotel=Hvc.IdHotel\nWHERE H.IdHotel LIKE \'h%\'\nGROUP BY H.IdHotel\nORDER BY COUNT(Hvc.dni) DESC\n','media',4,1),(1209,82,'58.	Obtener el Dni y nombre de los clientes que han participado en algún viaje con destino a Pekin y en todos esos viajes han elegido solamente hoteles ubicados en esa ciudad','SELECT C.Dni, C.Nombre\nFROM cliente AS C\nWHERE EXISTS (SELECT *\n              FROM (hotel_viaje_cliente AS HVC1 INNER JOIN hotel h on HVC1.idhotel=h.idhotel)\n                    WHERE C.Dni=HVC1.Dni\n                    AND HVC1.Destino = \'Pekin\'\nAND NOT EXISTS (SELECT *\n                FROM (hotel_viaje_cliente AS HVC2 inner  JOIN hotel h2 on HVC2.idhotel=h2.idhotel)\n                WHERE C.Dni=HVC2.Dni AND HVC1.Destino= HVC2.Destino AND\n		HVC1.FechaSalida= HVC2.FechaSalida\n                AND h2.Localidad <> \'Pekin\'))\n','media',8,1),(1210,82,'Por cada viaje que tenga excursiones opcionales, obtener el identificador del viaje, el dni del cliente que más excursiones opcionales ha realizado en ese viaje y cuántas son esas excursiones opcionales','SELECT EOC.Destino, EOC.FechaSalida, EOC.Dni, COUNT(EOC.Dni)\nFROM excursion_opcional_cliente AS EOC\nGROUP BY EOC.Destino, EOC.FechaSalida, EOC.Dni\nHAVING COUNT(EOC.Dni)>=ALL (\n	SELECT COUNT(EOC2.Dni)\n    FROM excursion_opcional_cliente EOC2 \n	WHERE EOC.Destino=EOC2.Destino AND\n	      EOC.FechaSalida=EOC2.FechaSalida\n    GROUP BY EOC2.Destino,  EOC2.FechaSalida, EOC2.Dni)\n','media',7,1),(1211,82,'Obtener para cada guía cuantos idiomas hablan y cuantos destinos distintos ha visitado','SELECT G.dni, count(distinct HVC.Destino), count(distinct I.idioma)\nfrom guia G \n     left outer join viaje V on G.dni=V.dni \n	 left outer join idioma I on G.dni=I.dni \n	 left outer join hotel_viaje_cliente HVC on V.Destino=HVC.Destino \n	                                            and V.FechaSalida=HVC.FechaSalida\ngroup by G.dni\n','media',4,1),(1212,82,'Por cada guía, obtener el dni y número de viajes que ha acompañado, siempre y cuando este número sea menor que 3. Deben aparecer todos los guías, hayan acompañado o no a viajes, en éste último caso en el número de viajes deberá aparecer un 0','SELECT G.dni, Count(V.Destino) AS CuentaDeDestinoV\nFROM guia AS G LEFT JOIN viaje AS V ON G.Dni = V.Dni\nGROUP BY G.dni\nHaving Count(V.Destino) <3\n','media',4,1);
/*!40000 ALTER TABLE `ejercicio` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ejercicio_practica`
--

DROP TABLE IF EXISTS `ejercicio_practica`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `ejercicio_practica` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `practica` int unsigned NOT NULL,
  `numero` int unsigned NOT NULL,
  `ejercicio` int unsigned NOT NULL,
  PRIMARY KEY (`id`),
  KEY `FK_ejercicio_practica_2` (`ejercicio`),
  KEY `FK_ejercicio_practica_1` (`practica`) USING BTREE,
  CONSTRAINT `FK_ejercicio_practica_1` FOREIGN KEY (`practica`) REFERENCES `practica` (`id`),
  CONSTRAINT `FK_ejercicio_practica_2` FOREIGN KEY (`ejercicio`) REFERENCES `ejercicio` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=536 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin COMMENT='No tiene clave UNIQUE ya que en MySQL no existe DEFERRED';
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ejercicio_practica`
--

LOCK TABLES `ejercicio_practica` WRITE;
/*!40000 ALTER TABLE `ejercicio_practica` DISABLE KEYS */;
INSERT INTO `ejercicio_practica` VALUES (107,13,1,642),(108,13,2,643),(111,13,3,646),(112,13,4,647),(113,13,5,648),(174,25,3,681),(175,25,2,684),(176,25,5,687),(177,25,4,690),(178,25,6,693),(179,25,1,696),(180,17,1,697),(181,17,2,698),(182,17,3,699),(183,17,4,700),(184,28,1,701),(185,28,2,702),(186,28,3,703),(187,28,4,704),(188,29,1,705),(189,29,2,706),(192,18,1,707),(195,30,1,710),(201,19,1,715),(203,33,1,716),(204,33,2,719),(205,19,2,718),(206,34,1,717),(207,34,2,720),(209,14,1,766),(211,14,4,772),(212,14,2,774),(213,14,5,776),(214,14,3,777),(215,22,1,762),(216,22,2,765),(218,22,3,770),(219,22,4,773),(221,22,6,778),(222,23,1,763),(223,23,2,764),(224,23,3,769),(225,23,4,771),(226,23,5,775),(227,23,6,778),(228,23,7,776),(229,16,2,866),(230,16,6,867),(231,16,4,868),(232,16,1,869),(233,16,5,870),(234,16,3,871),(235,26,6,872),(236,26,4,873),(237,26,1,874),(238,26,5,875),(239,26,3,876),(240,26,2,877),(241,27,5,878),(242,27,4,879),(243,27,2,880),(244,27,3,881),(245,27,6,882),(246,27,1,883),(247,29,3,886),(248,29,4,887),(249,28,5,891),(250,29,5,888),(251,32,1,898),(252,32,2,895),(253,18,2,896),(254,30,2,897),(255,18,3,712),(256,30,3,894),(257,32,3,711),(258,19,3,899),(259,33,3,900),(260,34,3,901),(274,17,5,903),(295,22,5,992),(309,39,1,679),(310,39,4,682),(311,39,3,685),(312,39,2,688),(313,39,5,691),(314,39,6,694),(321,41,4,680),(322,41,1,683),(323,41,2,686),(324,41,5,689),(325,41,6,692),(326,41,3,695),(334,42,1,996),(335,42,2,951),(336,42,3,965),(344,44,1,1011),(345,44,2,1012),(346,44,3,1013),(347,44,4,1014),(348,44,5,1015),(349,44,6,1016),(350,44,7,1017),(371,49,1,1039),(372,49,2,1041),(373,49,3,1047),(374,49,10,1048),(375,49,4,1044),(376,49,5,1040),(377,49,6,1045),(378,49,7,1043),(379,49,8,1046),(380,49,9,1049),(422,55,5,1078),(423,55,3,1079),(424,55,6,1080),(425,55,4,1081),(426,55,2,1082),(427,55,1,1083),(428,54,3,1084),(429,54,1,1085),(430,54,2,1086),(431,54,4,1087),(432,54,5,1089),(433,47,4,1068),(438,57,4,1088),(439,57,3,1090),(440,57,1,1091),(441,57,2,1092),(442,47,2,1093),(443,47,1,1094),(444,47,3,1095),(445,58,2,1096),(446,59,1,1097),(447,59,2,1098),(448,59,3,1100),(449,59,4,1101),(450,58,3,1102),(451,58,1,1103),(455,20,1,639),(456,20,2,640),(457,20,3,641),(458,20,4,644),(459,20,5,645),(460,20,6,646),(461,20,7,647),(462,20,8,648),(463,20,9,1054),(465,21,1,640),(466,21,2,642),(467,21,3,645),(468,21,4,653),(469,21,5,655),(470,21,6,657),(471,21,7,1063),(472,21,8,1062),(473,21,9,1064),(475,20,10,1065),(476,21,10,1055),(477,13,6,1106),(479,13,7,1063),(481,13,8,1108),(482,61,6,1056),(483,61,2,1057),(484,61,4,1058),(485,61,1,1059),(486,61,7,1060),(487,61,3,1067),(488,61,5,1069),(489,51,4,1111),(490,51,3,1112),(491,51,6,1113),(492,51,1,1114),(493,51,7,1115),(494,51,2,1116),(495,51,5,1117),(496,62,2,1071),(497,62,3,1072),(498,62,1,1073),(499,62,4,1074),(500,62,5,1075),(501,62,6,1076),(502,62,7,1077),(503,53,1,1118),(504,53,2,1119),(505,63,1,1002),(506,63,2,1003),(507,63,3,1004),(508,63,4,1005),(509,63,5,1006),(510,63,6,1007),(511,63,7,1008),(512,53,3,1120),(513,53,4,1121),(515,14,7,1060),(516,14,6,1067),(517,53,5,1122),(518,53,6,1123),(519,53,7,1124),(521,65,1,1127),(522,65,2,1128),(523,13,9,640),(524,13,10,650),(525,50,1,639),(526,50,2,640),(527,50,3,641),(528,50,4,644),(529,50,5,645),(530,50,6,646),(531,50,7,647),(532,50,8,648),(533,50,9,1054),(534,50,10,1065),(535,22,7,776);
/*!40000 ALTER TABLE `ejercicio_practica` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `esquema`
--

DROP TABLE IF EXISTS `esquema`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `esquema` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `nombre` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `host` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `puerto` int unsigned NOT NULL,
  `esquema` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `usuario` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `password` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `sgbd` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `pdf` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UNIQUE` (`nombre`)
) ENGINE=InnoDB AUTO_INCREMENT=83 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `esquema`
--

LOCK TABLES `esquema` WRITE;
/*!40000 ALTER TABLE `esquema` DISABLE KEYS */;
INSERT INTO `esquema` VALUES (58,'Comercio mySQL','db',3306,'comercio?useOldAliasMetadataBehavior=true','comercioUsr','comercioUsrcomercioUsr','mysql','/pdf/58.jpg'),(61,'empresa mySQL','db',3306,'empresa?useOldAliasMetadataBehavior=true','empresaUsr','empresaUsrempresaUsr','mysql','/pdf/61.bmp'),(62,'Biblioteca mySQL','db',3306,'biblioteca?useOldAliasMetadataBehavior=true','bibliotecaUsr','bibliotecaUsrbibliotecaUsr','mysql','/pdf/62.JPG'),(64,'Universidad mySQL','db',3306,'universidad?useOldAliasMetadataBehavior=true','uniUsr','uniUsruniUsr','mysql','/pdf/64.jpg'),(76,'Biblioteca SQLServer','yaiza.unirioja.es',1433,'RedBibliotecas','biblioUsr','biblioUsrbiblioUsr','sqlserver','/pdf/76.jpg'),(77,'Universidad SQLServer','yaiza.unirioja.es',1433,'universidad','uniUsr','uniUsruniUsr','sqlserver','/pdf/77.jpg'),(78,'Comercio SQLServer','yaiza.unirioja.es',1433,'Comercio','comercioUsr','comercioUsrcomercioUsr','sqlserver','/pdf/58.jpg'),(79,'Empresa SQLServer','yaiza.unirioja.es',1433,'Empresa','empresaUsr','empresaUsrempresaUsr','sqlserver','/pdf/61.bmp'),(82,'viajes mySQL','db',3306,'viajes?useOldAliasMetadataBehavior=true','viajesUsr','viajesUsrviajesUsr','mysql','/pdf/82.pdf');
/*!40000 ALTER TABLE `esquema` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Temporary view structure for view `evaluacion_practicas`
--

DROP TABLE IF EXISTS `evaluacion_practicas`;
/*!50001 DROP VIEW IF EXISTS `evaluacion_practicas`*/;
SET @saved_cs_client     = @@character_set_client;
/*!50503 SET character_set_client = utf8mb4 */;
/*!50001 CREATE VIEW `evaluacion_practicas` AS SELECT 
 1 AS `apellidos`,
 1 AS `nombre`,
 1 AS `%OK`,
 1 AS `%hechos`*/;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `habilita`
--

DROP TABLE IF EXISTS `habilita`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `habilita` (
  `cuasi` varchar(12) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `clave` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `password` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `email` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  PRIMARY KEY (`cuasi`) USING BTREE,
  UNIQUE KEY `UNIQUE` (`clave`) USING BTREE,
  CONSTRAINT `FK_habilita_1` FOREIGN KEY (`cuasi`) REFERENCES `alumno` (`cuasi`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `habilita`
--

LOCK TABLES `habilita` WRITE;
/*!40000 ALTER TABLE `habilita` DISABLE KEYS */;
/*!40000 ALTER TABLE `habilita` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `practica`
--

DROP TABLE IF EXISTS `practica`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `practica` (
  `id` int unsigned NOT NULL AUTO_INCREMENT,
  `nombre` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `numsesion` int unsigned NOT NULL,
  `visible` tinyint(1) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `UNIQUE` (`nombre`)
) ENGINE=InnoDB AUTO_INCREMENT=66 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `practica`
--

LOCK TABLES `practica` WRITE;
/*!40000 ALTER TABLE `practica` DISABLE KEYS */;
INSERT INTO `practica` VALUES (13,'sql01_1',1,0),(14,'sql02_1',2,0),(16,'sql04_1',4,0),(17,'sql07_1',7,0),(18,'sql08_1',8,0),(19,'sql09_1',9,0),(20,'sql01_2',1,0),(21,'sql01_3',1,0),(22,'sql02_2',2,0),(23,'sql02_3',2,0),(25,'sql03_3',3,0),(26,'sql04_2',4,0),(27,'sql04_3',4,0),(28,'sql07_2',7,0),(29,'sql07_3',7,0),(30,'sql08_2',8,0),(32,'sql08_3',8,0),(33,'sql09_2',9,0),(34,'sql09_3',9,0),(39,'sql03_1',3,0),(41,'sql03_2',3,0),(42,'paper_example',2,0),(44,'sql02_3_sqlserver',2,0),(47,'sql08_4',8,0),(49,'sql01_4',1,0),(50,'sql01_5',101,0),(51,'sql02_4',2,0),(52,'sql01_6',1,0),(53,'sql03_4',3,0),(54,'sql07_4',7,0),(55,'sql04_4',4,0),(57,'simulacro1',40,0),(58,'sql09_4',9,0),(59,'simulacro2',50,0),(61,'sql02_14',2,0),(62,'sql03_14',3,0),(63,'new_sql02_2_para_sustitur',2,0),(65,'prueba_miryam',100,0);
/*!40000 ALTER TABLE `practica` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `profesor`
--

DROP TABLE IF EXISTS `profesor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `profesor` (
  `cuasi` varchar(12) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  PRIMARY KEY (`cuasi`),
  CONSTRAINT `FK_profesor_1` FOREIGN KEY (`cuasi`) REFERENCES `usuario` (`cuasi`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `profesor`
--

LOCK TABLES `profesor` WRITE;
/*!40000 ALTER TABLE `profesor` DISABLE KEYS */;
INSERT INTO `profesor` VALUES ('admin');
/*!40000 ALTER TABLE `profesor` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `usuario`
--

DROP TABLE IF EXISTS `usuario`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!50503 SET character_set_client = utf8mb4 */;
CREATE TABLE `usuario` (
  `cuasi` varchar(12) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `password` varchar(32) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin NOT NULL,
  `email` varchar(45) CHARACTER SET utf8mb3 COLLATE utf8mb3_bin DEFAULT NULL,
  PRIMARY KEY (`cuasi`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_bin;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `usuario`
--

LOCK TABLES `usuario` WRITE;
/*!40000 ALTER TABLE `usuario` DISABLE KEYS */;
INSERT INTO `usuario` VALUES ('admin','21232f297a57a5a743894a0e4a801fc3',NULL);
/*!40000 ALTER TABLE `usuario` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Final view structure for view `evaluacion_practicas`
--

/*!50001 DROP VIEW IF EXISTS `evaluacion_practicas`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8mb4 */;
/*!50001 SET character_set_results     = utf8mb4 */;
/*!50001 SET collation_connection      = utf8mb4_0900_ai_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`aplicacionbd`@'%' SQL SECURITY DEFINER */
/*!50001 VIEW `evaluacion_practicas` AS select `a`.`apellidos` AS `apellidos`,`a`.`nombre` AS `nombre`,round(((count((case when (0 = `aep`.`correcta`) then NULL else 1 end)) * 100) / (select count(0) from (`ejercicio_practica` `ep` join `practica` `p` on((`ep`.`practica` = `p`.`id`))) where ((`p`.`nombre` like '%_3') and (`p`.`numsesion` in (1,2,3,4,7,8,9))))),1) AS `%OK`,round(((count(0) * 100) / (select count(0) from (`ejercicio_practica` `ep` join `practica` `p` on((`ep`.`practica` = `p`.`id`))) where ((`p`.`nombre` like '%_3') and (`p`.`numsesion` in (1,2,3,4,7,8,9))))),1) AS `%hechos` from (((`alumno` `a` join `alumno_ejercicio_practica` `aep` on((`a`.`cuasi` = `aep`.`alumno`))) join `ejercicio_practica` `ep` on((`aep`.`ejerciciopractica` = `ep`.`id`))) join `practica` `p` on((`ep`.`practica` = `p`.`id`))) where (`p`.`numsesion` in (1,2,3,4,7,8,9)) group by `a`.`cuasi`,`a`.`apellidos`,`a`.`nombre` order by `a`.`nombre`,`a`.`apellidos` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2023-01-17 18:34:58
